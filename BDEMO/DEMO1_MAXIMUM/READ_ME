
                     MAXIMUM DEMONSTRATION
                     ---------------------

  Demonstration Aim

    The MAXIMUM demonstration illustrates (on a simple example)
    some of the basic functionality of the B-Toolkit: the functions
    of the configuration and dependency managers are illustrated,
    together with the following tools:

       B-Introduce from SRC
       B-Edit                  (opn/clo) All Environments
       B-Commit                (cmt) All Environments
       B-Analyser/TypeChecker  (anl) Main Environment
       B-Animator              (anm) Main Environment
       B-POGenerator           (pog) Main Environment
       B-AutoProver            (prv) Provers Environment
       B-Remake
       B-Status                (sts) Main Environment



Demonstration Outline

    The demonstration illustrates how various errors are reported and
    dealt with, and the use of the `Mini-remake' facility on a very simple
    specification of maintaining a set of numbers having operations to add
    a number to the set and to return the maximum value of the set.

    o The B-Introduce tools enable constructs to be introduced
      to the development under the control of the configuration manager:
      from SRC, in which case the user's constructs are introduced, from
      SLIB, in which case re-usable re-namable library specification/code
      pairs are introduced, or enable an entirely new construct to be
      introduced.
 
    o The B-Edit tool allows the user to use any editor
      to browse or edit a configured construct. Non-library/generated
      constructs may be subsequently committed, provided they parse correctly
      (if not, the nature of the errors together with their line numbers are
      displayed). 

    o The B-Commit tools allow the user to commit edits of 
      existing constructs to the system,
      checking the extent of the effect through the dependency and
      configuration managers.

    o The B-Analyser automatically effects syntactic analysis and scope
      checking under the control of the configuration and dependency managers.

    o The B-TypeChecker automatically checks that all variables, sets and
      constants are correctly declared and that all expressions are
      correctly typed.

    o The B-Animator allows the specification to be
      ``symbolically executed'', enabling the testing of operation
      preconditions and the inspection of state variables. 

    o The B-POGenerator automatically produces proof obligations
      (verification conditions) that ensure a specification is
      mathematically consistent and a refinement or implementation is
      correct with respect to its abstraction.

    o The B-AutoProver attempts to discharge automatically proof
      obligations generated by the proof obligation generator.

    o The B-Remake tool attempts to rebuild the system to its previous
      ``high water mark'', inviting the user to commit edits to the system
      where appropriate.

    o The B-Status tool gives the current state of a construct
      under configuration; information is provided on refinement paths,
      subordinate and dependent constructs, and proof obligation status.



Illustration of Specification Error and Remake Facilities

1.  Start the development

    After entering the DEMO1_MAXIMUM directory, run the B-Toolkit to
    create a new development directory by invoking: $BKIT/BToolkit

2.  Introduce from SRC

    Pull down `Introduce' and introduce `From SRC' the construct 
    MaxOfSet.mch.

    A row of buttons will appear on the main panel indicating the 
    presence of MaxOfSet.mch in the database (coloured-red-buttons
    indicate that an option is enabled).

3.  Analyse

    Click on the word anl itself to bring up a short help text.

    Click on the (red) anl button in the MaxOfSet.mch row to submit
    MaxOfSet.mch for analysis.	A new panel will appear displaying the
    results of the analysis.

4.  Open

    Open MaxOfSet.mch for editing, (click `MaxOfSet.mch' under
    `opn/clo'). The default editor will now be invoked with
    MaxOfSet.mch. If you prefer another editor you can change the
    editor through the `Editor/Viewers/Shell Option' facility
    within the `TopBar: Option' pull down.

    Use the editor to introduce the following errors:

       INVARIANT: change `numset <: NAT1' to `numset NAT1'
         (missing infix symbol)
       OPERATION enter: change precondition to `numset new : NAT & new <= max_val'
         (logical error)
       OPERATION enter: remove `{}' around `new'
         (Type error)
       INITIALISATION: change to `numsest:={}'
         (mis-spelling of variable)
       OPERATION maximum: change body to `mx  := max(numset) + 1'
         (requirement error)

5.  Commit

    Save the edits by using the 'save file' facility of your editor.
    (a `!' on the buttons will now indicate that an edited version exists).
    Commit edits (cmt); parsing error is reported.
    Correct text (insert subset symbol <:) and save and commit again.

6.  Analyse

   Analyse (anl); an  error is reported (numsest is an undeclared variable)
    and Mini-remake cycle entered.
    Correct error (change to numset) and continue Mini-remake.

7.  Type Error Reported

    Type error reported relating to `\/'.
    Correct type error by writing `{new}' and continue Mini-remake.

8.  Animate

    Animate (anm) Interactively - the  theory file `SRC/MaxOfSet.mch.thy' is
    automatically loaded. Instantiate the constant to 1000000 (this
    is the suggested value because of the PROPERTIES clause);
    `enter 5' then `enter 8' (the numbers 5 and 8 are now in the set)
    then `maximum' to discover requirement error. 
    Select `Animator Utilities' and then 
    `Save as ANIMATE Script Initialisation' to file `save1';
    `Cancel' `Animator Utilities' and `Quit' from animation.
    Open construct, correct error, commit changes (cmt), re-analyse
    and re-animate - answer `Yes' to `Initialise state from file?'
    and select `MaxOfSet.save1.anm'.
    Select `maximum' to check requirement has been met.
    `Quit' from animation.

9.  Generate Proof Obligations

    Select TopBar: Options -> Provers and ensure `POGenerator Setting'
    is to `generate non-trivial proof obligations';
    ensure that Global PROOFMETHOD File is NOT set!;
    click on `OK' and then submit for Proof Obligation Generation (pog) -  
    2 proof obligations are generated.

10. AutoProve

    Enter the Provers Environment (click on `Provers') and 
    submit for AutoProof (prv, and then select `AutoProver');
    1 proof obligation remains.
    (pmd) can be used to edit the current Proof Method file if
    necessary (but don't edit it yet).

11.  InterProve

    Submit for InterProof (prv, and then select `InterProver');
    click on the `enter' Theory, click on the proof obligation 
    and try to prove (Run InterProver).
    Select `Show Hypotheses' to discover that the obligation cannot
    be discharged due to specification error. `Cancel' and `Exit InterProver'

12. Correct Specification Error

    Open construct, correct error in precondition of the
    `enter' OPERATION (NAT -> NAT1), (save the edits!) and commit
    the edits; then remake, through TopBar: Remake -> All Constructs and click `OK'
    (all remake jobs are automatically pre-selected).

13. Proof Now Complete

    The construct is re-analysed, po-generated and autoproved; both
    obligations are now discharged.

14. Mark Up for Viewing

    Enter the Documents environment and submit the construct for document
    mark-up (dmu); select TopBar: Options -> Documents and enter an
    appropriate `Dvi Screen Viewer' (for example, `xdvi'); click `OK' and
    then view the marked-up document (shw).

15. Annotational Edit

    Edit one of the annotations and Remake (again, commit your edits first);
    only the type-set file needs to  be rebuilt, since the change was
    annotational and not mathematical.

16. Introduce the implementation

    Back to Main. Introduce `MaxSoFarI.imp' From SRC - this is the 
    bottom-level implementation; submit for analysis (anl).
    MaxSoFarR.ref is automatically introduced (the intermediate-level
    refinement) and processed first; the SLIB constructs `MAX_Nvar'
    and `Bool_TYPE' on which the implementation is built are also
    introduced automatically.

17. Status

    Finally, request Status (sts) for information about the dependencies
    of each construct. 


    Exercise
    --------

1. Change the MaxOfSet.mch specification so that:

    a) the set may include the number 0

    b) an operation to remove a number from the set is provided

    c) an operation to return the second-highest number of the set is provided

2. Analyse, POGenerate and AutoProve the amended specification.



You can now use TopBar: Utils -> Change Directory to get to DEMO2 - have fun!
