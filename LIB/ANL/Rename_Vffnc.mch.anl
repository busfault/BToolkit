(
 (?)
 ;
 (
 (
 (?)
 )
 |
 (
 (?)
 )
 )
 )
;
(
(Bool_TYPE(?):(?):((?),(?),(?)))
,
(String_TYPE(?):(?):((?),(?),(?)))
)
;
(?)
;
(?)
;
(?)
;
(Rename_UnPack , Rename_CHARperWORD)
;
(Rename_UnPack , Rename_CHARperWORD)
;
(Rename_UnPack : NAT +-> VALUE --> STRING & Rename_CHARperWORD = 4)
;
(Rename_UnPack : NAT +-> VALUE --> STRING & Rename_CHARperWORD = 4)
;
(?)
;
(?)
;
(Rename_Vfnc)
;
(Rename_Vfnc)
;
(Rename_Vfnc : 1..rcdsiz +-> VALUE)
;
(Rename_Vfnc : 1..rcdsiz +-> VALUE)
;
(?)
;
(Rename_Vfnc := {})
;
(Rename_Vfnc := {})
;
(Rename_TST_FLD_FNC,Rename_DEF_FNC,Rename_FREE_FNC,Rename_STO_FNC,Rename_RMV_FNC,Rename_VAL_FNC,Rename_EQL_FNC,Rename_NEQ_FNC,Rename_MOV_FFNC,Rename_OVR_FFNC,Rename_OVR_LIT_FFNC,Rename_XTR_FFNC,Rename_EQL_FFNC,Rename_SAV_FNC,Rename_RST_FNC,Rename_SAVN_FNC,Rename_RSTN_FNC)
;
(Rename_TST_FLD_FNC , Rename_DEF_FNC , Rename_FREE_FNC , Rename_STO_FNC , Rename_RMV_FNC , Rename_VAL_FNC , Rename_EQL_FNC , Rename_NEQ_FNC , Rename_MOV_FFNC , Rename_OVR_FFNC , Rename_OVR_LIT_FFNC , Rename_XTR_FFNC , Rename_EQL_FFNC , Rename_SAV_FNC , Rename_RST_FNC , Rename_SAVN_FNC , Rename_RSTN_FNC)
;
(Rename_Vffnc(VALUE , rcdsiz):(card(VALUE) : NAT1 & rcdsiz : NAT):(?))
;
(
(
 (Rename_TST_FLD_FNC)
;
 (? , Val_Op , Det_Op , (bb <-- Rename_TST_FLD_FNC(ff)))
;
 (ff)
;
 (bb)
;
 (
 (ff : NAT)
 |
 (
 (bb := bool(ff : 1..rcdsiz))
 )
 )
;
 (
 (ff : NAT)
 |
 (
 (bb := bool(ff : 1..rcdsiz))
 )
 )
)
,
(
 (Rename_DEF_FNC)
;
 (? , Val_Op , Det_Op , (bb <-- Rename_DEF_FNC(ff)))
;
 (ff)
;
 (bb)
;
 (
 (ff : 1..rcdsiz)
 |
 (
 (bb := bool(ff : dom(Rename_Vfnc)))
 )
 )
;
 (
 (ff : 1..rcdsiz)
 |
 (
 (bb := bool(ff : dom(Rename_Vfnc)))
 )
 )
)
,
(
 (Rename_FREE_FNC)
;
 (? , Val_Op , NonDet_Op , (bb , dd <-- Rename_FREE_FNC))
;
 (?)
;
 (bb , dd)
;
 (
 (true)
 |
 (
 (IF (1..rcdsiz)-dom(Rename_Vfnc) /= {} THEN
 bb := TRUE ||
 dd :: (1..rcdsiz)-dom(Rename_Vfnc)
 ELSE
 bb := FALSE ||
 dd :: 1..rcdsiz
 END)
 )
 )
;
 (
 (true)
 |
 (
 (
 (
 (not((1..rcdsiz)-dom(Rename_Vfnc) = {}))
 )
 ==>
 (
 (
 (bb := TRUE)
 )
 ||
 (
 @(ddx).
 (
 (
 (ddx : (1..rcdsiz)-dom(Rename_Vfnc))
 )
 ==>
 (
 (dd := ddx)
 )
 )
 )
 )
 )
 []
 (
 (
 ((1..rcdsiz)-dom(Rename_Vfnc) = {})
 )
 ==>
 (
 (
 (bb := FALSE)
 )
 ||
 (
 @(ddx).
 (
 (
 (ddx : 1..rcdsiz)
 )
 ==>
 (
 (dd := ddx)
 )
 )
 )
 )
 )
 )
 )
)
,
(
 (Rename_STO_FNC)
;
 (? , Mod_Op , Det_Op , Rename_STO_FNC(ff , vv))
;
 (ff , vv)
;
 (?)
;
 (
 (ff : 1..rcdsiz & vv : VALUE)
 |
 (
 (Rename_Vfnc(ff) := vv)
 )
 )
;
 (
 (ff : 1..rcdsiz & vv : VALUE)
 |
 (
 (Rename_Vfnc := Rename_Vfnc <+ {ff |-> vv})
 )
 )
)
,
(
 (Rename_RMV_FNC)
;
 (? , Mod_Op , Det_Op , Rename_RMV_FNC(ff))
;
 (ff)
;
 (?)
;
 (
 (ff : dom(Rename_Vfnc))
 |
 (
 (Rename_Vfnc := {ff} <<| Rename_Vfnc)
 )
 )
;
 (
 (ff : dom(Rename_Vfnc))
 |
 (
 (Rename_Vfnc := {ff} <<| Rename_Vfnc)
 )
 )
)
,
(
 (Rename_VAL_FNC)
;
 (? , Val_Op , Det_Op , (vv <-- Rename_VAL_FNC(ff)))
;
 (ff)
;
 (vv)
;
 (
 (ff : dom(Rename_Vfnc))
 |
 (
 (vv := Rename_Vfnc(ff))
 )
 )
;
 (
 (ff : dom(Rename_Vfnc))
 |
 (
 (vv := Rename_Vfnc(ff))
 )
 )
)
,
(
 (Rename_EQL_FNC)
;
 (? , Val_Op , Det_Op , (bb <-- Rename_EQL_FNC(ff , vv)))
;
 (ff , vv)
;
 (bb)
;
 (
 (vv : VALUE & ff : dom(Rename_Vfnc))
 |
 (
 (bb := bool(Rename_Vfnc(ff) = vv))
 )
 )
;
 (
 (vv : VALUE & ff : dom(Rename_Vfnc))
 |
 (
 (bb := bool(Rename_Vfnc(ff) = vv))
 )
 )
)
,
(
 (Rename_NEQ_FNC)
;
 (? , Val_Op , Det_Op , (bb <-- Rename_NEQ_FNC(ff , vv)))
;
 (ff , vv)
;
 (bb)
;
 (
 (vv : VALUE & ff : dom(Rename_Vfnc))
 |
 (
 (bb := bool(Rename_Vfnc(ff) /= vv))
 )
 )
;
 (
 (vv : VALUE & ff : dom(Rename_Vfnc))
 |
 (
 (bb := bool(not(Rename_Vfnc(ff) = vv)))
 )
 )
)
,
(
 (Rename_MOV_FFNC)
;
 (? , Mod_Op , NonDet_Op , Rename_MOV_FFNC(ii , jj , ll))
;
 (ii , jj , ll)
;
 (?)
;
 (
 (ii : 1..rcdsiz & jj : 1..rcdsiz & ll : 1..rcdsiz & ii..ii+ll-1 /\ jj..jj+ll-1 = {} & jj..jj+ll-1 <: 1..rcdsiz & ii..ii+ll-1 <: dom(Rename_Vfnc))
 |
 (
 (ANY newsegment WHERE
 newsegment : jj..jj+ll-1 --> VALUE &
 newsegment = %xx.(xx : jj..jj+ll-1 | Rename_Vfnc(ii+(jj-xx)))
 THEN
 Rename_Vfnc := Rename_Vfnc <+ newsegment
 END)
 )
 )
;
 (
 (ii : 1..rcdsiz & jj : 1..rcdsiz & ll : 1..rcdsiz & ii..ii+ll-1 /\ jj..jj+ll-1 = {} & jj..jj+ll-1 <: 1..rcdsiz & ii..ii+ll-1 <: dom(Rename_Vfnc))
 |
 (
 @(newsegment).
 (
 (
 (newsegment : jj..jj+ll-1 --> VALUE & newsegment = %xx.(xx : jj..jj+ll-1 | Rename_Vfnc(ii+(jj-xx))))
 )
 ==>
 (
 (Rename_Vfnc := Rename_Vfnc <+ newsegment)
 )
 )
 )
 )
)
,
(
 (Rename_OVR_FFNC)
;
 (? , Mod_Op , NonDet_Op , Rename_OVR_FFNC(ii , ll , aa))
;
 (ii , ll , aa)
;
 (?)
;
 (
 (ii : 1..rcdsiz & ll : 1..rcdsiz & ii..ii+ll-1 <: 1..rcdsiz & aa : STRING & ll*Rename_CHARperWORD > size(aa))
 |
 (
 (ANY newsegment WHERE
 newsegment : ii..ii+ll-1 --> VALUE &
 Rename_UnPack(newsegment) = aa
 THEN
 Rename_Vfnc := Rename_Vfnc <+ newsegment
 END)
 )
 )
;
 (
 (ii : 1..rcdsiz & ll : 1..rcdsiz & ii..ii+ll-1 <: 1..rcdsiz & aa : STRING & size(aa) < ll*Rename_CHARperWORD)
 |
 (
 @(newsegment).
 (
 (
 (newsegment : ii..ii+ll-1 --> VALUE & Rename_UnPack(newsegment) = aa)
 )
 ==>
 (
 (Rename_Vfnc := Rename_Vfnc <+ newsegment)
 )
 )
 )
 )
)
,
(
 (Rename_OVR_LIT_FFNC)
;
 (? , Mod_Op , NonDet_Op , Rename_OVR_LIT_FFNC(ii , ll , aa))
;
 (ii , ll , aa)
;
 (?)
;
 (
 (ii : 1..rcdsiz & ll : 1..rcdsiz & ii..ii+ll-1 <: 1..rcdsiz & aa : STRING & size(aa) < 1000 & ll*Rename_CHARperWORD > size(aa))
 |
 (
 (ANY newsegment WHERE
 newsegment : ii..ii+ll-1 --> VALUE &
 Rename_UnPack(newsegment) = aa
 THEN
 Rename_Vfnc := Rename_Vfnc <+ newsegment
 END)
 )
 )
;
 (
 (ii : 1..rcdsiz & ll : 1..rcdsiz & ii..ii+ll-1 <: 1..rcdsiz & aa : STRING & size(aa) < 1000 & size(aa) < ll*Rename_CHARperWORD)
 |
 (
 @(newsegment).
 (
 (
 (newsegment : ii..ii+ll-1 --> VALUE & Rename_UnPack(newsegment) = aa)
 )
 ==>
 (
 (Rename_Vfnc := Rename_Vfnc <+ newsegment)
 )
 )
 )
 )
)
,
(
 (Rename_XTR_FFNC)
;
 (? , Val_Op , NonDet_Op , (vv <-- Rename_XTR_FFNC(ii , ll)))
;
 (ii , ll)
;
 (vv)
;
 (
 (ii : 1..rcdsiz & ll : 1..rcdsiz & ll <= 250 & ii..ii+ll-1 <: dom(Rename_Vfnc))
 |
 (
 (ANY str WHERE
 str : STRING &
 str = Rename_UnPack(ii..ii+ll-1 <<| Rename_Vfnc)
 THEN
 vv := str
 END)
 )
 )
;
 (
 (ii : 1..rcdsiz & ll : 1..rcdsiz & ll <= 250 & ii..ii+ll-1 <: dom(Rename_Vfnc))
 |
 (
 @(str).
 (
 (
 (str : STRING & str = Rename_UnPack(ii..ii+ll-1 <<| Rename_Vfnc))
 )
 ==>
 (
 (vv := str)
 )
 )
 )
 )
)
,
(
 (Rename_EQL_FFNC)
;
 (? , Val_Op , Det_Op , (bb <-- Rename_EQL_FFNC(ii , ll , vv)))
;
 (ii , ll , vv)
;
 (bb)
;
 (
 (ii : 1..rcdsiz & ll : 1..rcdsiz & ii..ii+ll-1 <: dom(Rename_Vfnc) & vv : STRING)
 |
 (
 (bb := bool(Rename_UnPack(ii..ii+ll-1 <<| Rename_Vfnc) = vv))
 )
 )
;
 (
 (ii : 1..rcdsiz & ll : 1..rcdsiz & ii..ii+ll-1 <: dom(Rename_Vfnc) & vv : STRING)
 |
 (
 (bb := bool(Rename_UnPack(ii..ii+ll-1 <<| Rename_Vfnc) = vv))
 )
 )
)
,
(
 (Rename_SAV_FNC)
;
 (? , Val_Op , Det_Op , Rename_SAV_FNC)
;
 (?)
;
 (?)
;
 (
 (true)
 |
 (
 (BEGIN
 skip
 END)
 )
 )
;
 (
 (true)
 |
 (
 (skip)
 )
 )
)
,
(
 (Rename_RST_FNC)
;
 (? , Mod_Op , NonDet_Op , Rename_RST_FNC)
;
 (?)
;
 (?)
;
 (
 (true)
 |
 (
 (BEGIN
 Rename_Vfnc :: 1..rcdsiz +-> VALUE
 END)
 )
 )
;
 (
 (true)
 |
 (
 @(Rename_Vfncx).
 (
 (
 (Rename_Vfncx : 1..rcdsiz +-> VALUE)
 )
 ==>
 (
 (Rename_Vfnc := Rename_Vfncx)
 )
 )
 )
 )
)
,
(
 (Rename_SAVN_FNC)
;
 (? , Val_Op , Det_Op , Rename_SAVN_FNC)
;
 (?)
;
 (?)
;
 (
 (true)
 |
 (
 (BEGIN
 skip
 END)
 )
 )
;
 (
 (true)
 |
 (
 (skip)
 )
 )
)
,
(
 (Rename_RSTN_FNC)
;
 (? , Mod_Op , NonDet_Op , Rename_RSTN_FNC)
;
 (?)
;
 (?)
;
 (
 (true)
 |
 (
 (BEGIN
 Rename_Vfnc :: 1..rcdsiz +-> VALUE
 END)
 )
 )
;
 (
 (true)
 |
 (
 @(Rename_Vfncx).
 (
 (
 (Rename_Vfncx : 1..rcdsiz +-> VALUE)
 )
 ==>
 (
 (Rename_Vfnc := Rename_Vfncx)
 )
 )
 )
 )
)
)
