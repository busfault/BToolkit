/* Copyright (c) 1985-2012, B-Core (UK) Ltd
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following
conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT 
NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
cpy_seq_and_contents_dave ( ss, tt )
{
  int ii, nn;
  int ll = len ( ss );
  ii = 1;
  while ( ii <= ll ) {
    nn = cre ( 1 );
    cop ( val ( ss, ii ), nn );
    psh ( tt, nn );
    ii++;
  }
}













void CheckBrowseAfterModrRule ();

int seq_sub_rr_i;

int yes_no_n;
int yes_no_n1;

int pog_flag = 0;

int binhyp_count = 0;

/*  ; return DONE  */
extern int max_fwd_ctr_auto_prf;
int lst_tac_prf,tac_prf,tac_ptr_prf,lst_input_prf,
max_ctr_prf,ctr_prf,abt_prf,aster_prf,halt_prf,
lst_fwd_tac_prf,fwd_tac_prf,fwd_tac_ptr_prf,
the_prf,new_tac_prf,end_of_tac_prf,max_fwd_ctr_prf,print_ext_prf,
first_prf,
sho_big_gol_prf,sho_gol_prf,sho_der_hyp_prf,exec_prf;
char fstr_prf[1001];
FILE *ff_prf;
ini_prffunc()
#define ini_prf ini_prffunc()
{
  print_ext_prf=FALSE;
  aster_prf=FALSE;
  
/*
  max_fwd_ctr_prf=100;
*/
  max_fwd_ctr_prf=max_fwd_ctr_auto_prf;
  max_ctr_prf=100;
}

#define val_print_ext_prf_the     print_ext_prf

#define mod_print_ext_prf_the(v)  print_ext_prf=v

#define val_first_prf_the     first_prf

#define mod_first_prf_the(v)  first_prf=v
                     
/*  LIST ){ HYPOTHESES ; s  */
                     
                  
  lst_hyp_prf(p,n,s)
  {register int m,g ;
    itr_asc_nod(p,n,m,g,if( def_hso_gol(g)==TRUE ){
                          rcnc(s,hso_gol(g))
                       ;});
  }

  lst_genuine_hyp_frm_prf(p,n,s)
  {register int ss,i,h ;
    ss=cre(20);
    lst_hyp_prf(p,n,ss);
    itr(ss,i,h,if( isa_der_hyp(h)==FALSE ){
                 psh(s,frm_hyp(h));
              });
    kil(ss);
    rev(s);
  }

  lst_all_hyp_frm_prf(p,n,s)
  {register int ss,i,h ;
    ss=cre(20);
    lst_hyp_prf(p,n,ss);
    itr(ss,i,h,psh(s,frm_hyp(h)));
    kil(ss);
    rev(s);
  }

                    
/*  HANDLING ){ VARIABLES  */
  
  
                
/*  ggg is supposed to be a single letter
                   TRUE if h is of the form  bvrb(...,ggg,...)   */
                         
  is_vrb_in_hyp_prf(h,ggg)   
  {register int op,ff,i,w,b,is_vrb_in_hyp_prf_res ;    
    op=val_root_frm(h);
    if( 
/* (op==VRB_sym) || ( */
op==BVRB_sym
/* ) */
 ){
      ff=dec_tree(h,right_node_frm(h),COM_sym);
      xst(ff,i,w,val_root_frm(w)==ggg,b=TRUE,b=FALSE);
      is_vrb_in_hyp_prf_res=b;
      itr(ff,i,w,kil(w));
      kil(ff);
    } else {
      is_vrb_in_hyp_prf_res=FALSE;
    }
  ; return is_vrb_in_hyp_prf_res;
  }

                   
/*  ggg is supposed to be a single letter
                      TRUE if there exists an hypothesis
                       of the form  vrb(...,ggg,...)   */
                       
                       
  is_in_hyp_vrb_prf(p,n,ggg)   
  {register int s,i,h,b ;                     
    s=cre(20);
    lst_hyp_prf(p,n,s);
    xst(s,i,h,is_vrb_in_hyp_prf(frm_hyp(h),ggg)==TRUE,b=TRUE,b=FALSE);
    kil(s);
    return b;
  }

                   
/*  ggg is supposed to be a single letter
                      TRUE if
                        . either there exists an hypothesis
                          of the form bvrb(...,ggg,...)
                        . || ggg does not appear in initial goal
                   */
                      
  is_letter_vrb_prf(p,n,ggg)
  {register int is_letter_vrb_prf_res ;
    if( is_in_hyp_vrb_prf(p,n,ggg)==FALSE ){
      if( exec_prf==FALSE ){
        if( is_in_frm(frm_gol(info_nod(p)),ggg)==FALSE ){
          is_letter_vrb_prf_res=TRUE;
        } else {
          is_letter_vrb_prf_res=FALSE;
        };
      } else {
        is_letter_vrb_prf_res=TRUE;
      };
    } else {
      is_letter_vrb_prf_res=TRUE;
    }
  ; return is_letter_vrb_prf_res;
  }

    
                   
/*  TRUE if 
                        . either fff is a valid variable formula
                          (identifier with more than one letter || digit && not made of digits only)
                        . || fff is made of a single letter ggg
                          which can be taken as a variable
                   */
  
  chk_vrb_prf(p,n,fff)        
  {register int ggg,chk_vrb_prf_res ;
    if( is_vrb_spe_frm(fff)==FALSE ){
      ggg=val_root_frm(fff);
      if( letter_sym(ggg)==TRUE ){
        chk_vrb_prf_res=is_letter_vrb_prf(p,n,ggg);
      } else {
        chk_vrb_prf_res=FALSE;
      };
    } else {
      chk_vrb_prf_res=TRUE;
    }
  ; return chk_vrb_prf_res;
  }

is_lst_vrb_frm_prf(p,n,lv,f,i)
{register int s,j,v,b ;
  clr(lv);
  s=dec_tree(f,i,COM_sym);
  xst(s,j,v,chk_vrb_prf(p,n,v)==FALSE,b=FALSE,b=TRUE);
  if( b==TRUE ){
    itr(s,j,v,if( is_idx_vrb_frm(v,root_tree(v))==TRUE ){
                psh(lv,code_idx_vrb_frm(v,root_tree(v)));
              } else {
                psh(lv,val_root_frm(v));
              };
              kil(v));
  } else {
    itr(s,j,v,kil(v));
  };
  kil(s);
  return b;
}

is_qtf_frm_prf(p,n,lv,f,i)
{register int l,op,is_qtf_frm_prf_res ;
  is_qtf_frm_prf_res=FALSE;
  op=val_tree(f,i);
  if( op==DOT_sym ){
    l=left_node_tree(f,i);
    if( ari_sym(val_tree(f,l))==2 ){
      if( val_tree(f,left_node_tree(f,l))==GHO_sym ){
        if( is_lst_vrb_frm_prf(p,n,lv,f,right_node_tree(f,l))==TRUE ){
          is_qtf_frm_prf_res=TRUE;
        };
      };
    };
  }
; return is_qtf_frm_prf_res;
}

is_set_frm_prf(p,n,lv,f,i)                 
/* x | P */
{register int l,op,is_set_frm_prf_res ;
  is_set_frm_prf_res=FALSE;
  op=val_tree(f,i);
  if( op==LCB_sym ){
    l=right_node_tree(f,i);
    if( val_tree(f,l)==BAR_sym ){
      if( is_lst_vrb_frm_prf(p,n,lv,f,left_node_tree(f,l))==TRUE ){
        is_set_frm_prf_res=TRUE;
      };
    };
  }
; return is_set_frm_prf_res;
}

is_unv_frm_prf(p,n,lv,f,i)
{register int l,op,is_unv_frm_prf_res ;
  is_unv_frm_prf_res=FALSE;
  op=val_tree(f,i);
  if( op==DOT_sym ){
    l=left_node_tree(f,i);
    if( val_tree(f,l)==UNV_sym ){
      if( val_tree(f,left_node_tree(f,l))==GHO_sym ){
        if( is_lst_vrb_frm_prf(p,n,lv,f,right_node_tree(f,l))==TRUE ){
          is_unv_frm_prf_res=TRUE;
/***
printf ( "is_unv_frm_prf(p=%d n=%d lv=%d f=%d i=%d)\n", p,n,lv,f,i );
***/
        };
      };
    };
  }
; return is_unv_frm_prf_res;
}

is_sub_frm_prf(p,n,lv,le,f,i)
{register int l,r,op,s,is_sub_frm_prf_res ;
  clr(lv);
  clr(le);
  is_sub_frm_prf_res=FALSE;
  op=val_tree(f,i);
  if( op==SPE_sym ){
    l=left_node_tree(f,i);
    if( val_tree(f,l)==LSB_sym ){
      r=right_node_tree(f,l);
      if( val_tree(f,r)==CEQ_sym ){
        if( is_lst_vrb_frm_prf(p,n,lv,f,left_node_tree(f,r))==TRUE ){
          s=dec_tree(f,right_node_tree(f,r),COM_sym);
          cop(s,le);
          kil(s); 
          is_sub_frm_prf_res=((len(lv)==len(le))!=0);
        }
      }
    }
  }
  return is_sub_frm_prf_res;
}

  
           
/*   TEST FOR PRESENCE ){ GOAL AMONG HYPOTHESES   */
           
/*           OR ){ A "FALSE" HYPOTHESIS           */
           
                     
  hyp_prf(p,n,g,f)
  {register int s,i,h,hyp_prf_res ;
    if ( pog_flag && ! binhyp_count ) {
      return FALSE;
    }
    else {
      s=cre(20);
      lst_hyp_prf(p,n,s);
      xst(s,i,h,(eql_frm(f,frm_hyp(h))==TRUE) || (val_root_frm(frm_hyp(h))==FAL_sym),
              mod_uti_hyp(h);
              mod_hyp_gol(g,h);
              if( val_root_frm(frm_hyp(h))==FAL_sym ){
                mod_spe_gol(g,CONTRA_gol);
              } else {
                mod_spe_gol(g,INHYP_gol);
              };
              hyp_prf_res=TRUE,
              hyp_prf_res=FALSE);
      kil(s);
      if ( pog_flag && hyp_prf_res == TRUE && binhyp_count ) {
        binhyp_count--;
/***
 fprintf ( bstdout, "pog_flag && hyp_prf_res == TRUE && binhyp_count now %d\n",binhyp_count);delay;
***/
      };
      return hyp_prf_res;
    }
  }

                           
/*  FORWARD PROOF  */
     
     
  chk_hyp_prf(i,f,s,h,lh)
  {register int j,hh,chk_hyp_prf_res ;
    if( i==1 ){
      psh(s,h);
      chk_hyp_prf_res=TRUE;
    } else {
      xst(lh,j,hh,chk_frm(f,frm_hyp(hh))==TRUE,psh(s,hh);
                                              chk_hyp_prf_res=TRUE,
                                              chk_hyp_prf_res=FALSE);
    }
  ; return chk_hyp_prf_res;
  }

  cre_drv_hyp(frm3,s,gl,r,lh)
  {register int j,hh,dh,cre_drv_hyp_res ;
    if( is_ff_eql_ff_frm(frm3)==FALSE ){
      xst(lh,j,hh,(eql_frm(frm3,frm_hyp(hh))==TRUE) || (val_root_frm(frm_hyp(hh))==FAL_sym),
                cre_drv_hyp_res=FALSE;
                kil(s);
                kil(frm3),
                dh=cre_hyp(frm3);
                if( r!=0 ){ 
                  mod_rul_hyp(dh,r);
                } else {
                  mod_spe_hyp(dh,1)    
/*  TO BE IMPROVED HERE  */;
                };
                mod_hso_hyp(dh,s);
                psh(hso_gol(gl),dh);
                psh(lh,dh);
                cre_drv_hyp_res=TRUE);
    } else {
      cre_drv_hyp_res=FALSE;
      kil(s);
      kil(frm3);
    }
  ; return cre_drv_hyp_res;
  }

  dec_hyp_prf(rr,s,gl,lh)
  {register int frm3,op,ss,j,frm4,t,b ;
    frm3=prd_tree(cns_rul(rr));
    b=FALSE;
    op=val_root_frm(frm3);
    if( (op==AND_sym) || (op==SMC_sym) || (op==COM_sym) ){
      ss=dec_frm(frm3,op);
      itr(ss,j,frm4,t=cre(4);
                    cop(s,t);
                    if( cre_drv_hyp(frm4,t,gl,rr,lh)==TRUE ){
                      b=TRUE
                   ;});
      kil(ss);  
      kil(s);
      kil(frm3);
    }
    else {
      b=cre_drv_hyp(frm3,s,gl,rr,lh);
    }
    return b;
  }

  chk_lst_hyp_prf(h,gl,rr,la,lh)
  {register int x,idx,l,m,i,v,sta,b,s ;
    b=FALSE;
    idx=cre(len(la));
    sta=cre(len(la));
    l=len(lh);
    m=len(la);
    itr(la,i,v,psh(idx,0));
    itr(la,i,v,psh(sta,0));
    x=2;
    str(idx,x,0);
    str(sta,x,len_fnc);
    while( x!=1 ){
      while( val(idx,x)<l ){
        reset_fnc(val(sta,x));
        str(idx,x,val(idx,x)+1);
        if( chk_frm(val(la,x),frm_hyp(val(lh,val(idx,x))))==TRUE ){
          if( x==m ){
            s=cre(len(la));
            psh(s,h);
            itrn( i , 2 , len(la) , {
                                psh(s,val(lh,val(idx,i)))
                                   ;}
            );
            if( dec_hyp_prf(rr,s,gl,lh)==TRUE ){
              b=TRUE;
            }
          }
          else {
            x=x+1;
            str(sta,x,len_fnc);
            str(idx,x,0);
          }
        }
      }
      x=x-1;
    }
    kil(idx);
    kil(sta);
    return b;
  }

  dir_mon_prf(gl,h,rr,lh,r)
  {register int la,frm1,frm2,s,dir_mon_prf_res ;
    dir_mon_prf_res=FALSE;
    if( (r!=rr) && (val_sts_rul(rr)==on_rul) ){
      la=ant_rul(rr);
      if( len(la)!=0 ){
        frm1=fst(la);
        frm2=frm_hyp(h);
        clr_chk_frm;
        if( chk_frm(frm1,frm2)==TRUE ){
          if( len(la)==1 ){
            s=cre(1);
            psh(s,h);
            dir_mon_prf_res=dec_hyp_prf(rr,s,gl,lh);
          }
          else {
            dir_mon_prf_res=chk_lst_hyp_prf(h,gl,rr,la,lh);
          }
        }
      }
    }
    return dir_mon_prf_res;
  }

  dir_prf(r,gl,h,lh,th,t)
  {register int i,rr ;
    xst(rul_the(th),i,rr,dir_mon_prf(gl,h,rr,lh,r)==TRUE,
                         mod_res_tac(t,TRUE),mod_res_tac(t,FALSE));
  }

  
  down_fwd_tac_prf(n)
  {register int m,s ;
    m=n;
    s=sons_nod(m);
    while( len(s)!=0 ){
      m=fst(s);
      s=sons_nod(m);
    }
  ; return m;
  }

#define  fst_fwd_tac_prf(p) down_fwd_tac_prf(p)  
  up_fwd_tac_prf(p,n)
  {register int f,t,s,i,v,m,b,up_fwd_tac_prf_res ;
    f=fath_nod(n);
    if( f==fath_nod(p) ){
      up_fwd_tac_prf_res=0;
} else {
      s=sons_nod(f);
      m=snbr_nod(n);
      if( m==len(s) ){
        b=FALSE;
        itr(s,i,v,t=info_nod(v);
                  if( res_tac(t)==TRUE ){
                    b=TRUE;
                  };
                  mod_res_tac(t,FALSE));
        if( (b==TRUE) && (spe_tac(info_nod(f))==TIL_tac) ){
          mod_res_tac(info_nod(f),TRUE);
          up_fwd_tac_prf_res=down_fwd_tac_prf(fst(s));
        } else {
          up_fwd_tac_prf_res=up_fwd_tac_prf(p,f);
        };
      } else {
        up_fwd_tac_prf_res=down_fwd_tac_prf(val(s,m+1));
      };
    }
  ; return up_fwd_tac_prf_res;
  }

  
  nxt_fwd_tac_prf(p,n)
  {register int s,nxt_fwd_tac_prf_res ;
    s=sons_nod(n);
    if( len(s)!=0 ){
      nxt_fwd_tac_prf_res=down_fwd_tac_prf(fst(s));
    } else {
      nxt_fwd_tac_prf_res=up_fwd_tac_prf(p,n);
    }
  ; return nxt_fwd_tac_prf_res;
  }

                           
/*  FEQL SPECIAL TACTIC  */
/* 
  vrb_eql_frm_prf(h)
  {register int vrb_eql_frm_prf_res ;
    if( val_root_frm(h)==EQL_sym ){
      if( is_vrb_spe_tree(h,left_node_frm(h))==TRUE ){
        vrb_eql_frm_prf_res=TRUE;
      } else {
        vrb_eql_frm_prf_res=FALSE;
      };
    } else {
      vrb_eql_frm_prf_res=FALSE;
    }
  ; return vrb_eql_frm_prf_res;
  };
*/
  vrb_eql_frm_prf(p,n,h)
  {register int vrb_eql_frm_prf_res,fff ;
    if( val_root_frm(h)==EQL_sym ){
      fff=left_frm(h);
      if( chk_vrb_prf(p,n,fff)==TRUE ){
        vrb_eql_frm_prf_res=TRUE;
      } else {
        vrb_eql_frm_prf_res=FALSE;
      };
      kil(fff)                                        
/*  HERE  */;
    } else {
      vrb_eql_frm_prf_res=FALSE;
    }
  ; return vrb_eql_frm_prf_res;
  }

  sub_feql_prf(p,i,f)
  {register int n,v,lv,le,fff,ff,gl,j,sub_feql_prf_res ;
    lv=cre(4);
    le=cre(4);
    nxst_sub_frm(f,n,v,is_dis_sub_frm_prf(p,i,lv,le,f,n)==TRUE,
                 fff=cre(4);
                 rec_sub_prf(p,i,lv,le,f,right_node_tree(f,n),fff,TRUE);
                 if( eql_tree(f,n,fff,root_tree(fff))==FALSE ){
                   ff=cre_mod_tree(f,n,fff);
                   kil(fff);
                   sub_feql_prf_res=ff;
                 }
                 else {
                   kil(fff);
                   sub_feql_prf_res=0;
                 },
                 sub_feql_prf_res=0
              );
    kil(lv);
    itr(le,j,v,kil(v));
    kil(le);
    return sub_feql_prf_res;
  }

  cre_finish_up_sub_feql_prf(p,i,g)
  {register int gg,hh ;
    hh=cre(len(g));
    cop(g,hh);
    gg=sub_feql_prf(p,i,hh);
    while( gg!=0 ){
      kil(hh);
      hh=gg;
      gg=sub_feql_prf(p,i,hh);
    }
    return hh;
  }

  cre_subst_frm_prf(p,n,h,lh,st)
  {register int i,hh,ff,lff,w,lv,le,e,z,g,gg,cre_subst_frm_prf_res ;
    lv=cre(5);
    le=cre(5);
    nitr(lh,i,hh,ff=frm_hyp(hh);
                if( vrb_eql_frm_prf(p,n,ff)==TRUE ){
                  lff=left_node_frm(ff);
                  if( is_idx_vrb_frm(ff,lff)==TRUE ){
                    w=code_idx_vrb_frm(ff,lff);
                  }
                  else {
                    w=val_tree(ff,lff);
                  };
                  if( mbr(lv,w)==FALSE ){
                    psh(lv,w);
                    e=cre_cop_tree(ff,right_node_frm(ff));
                    psh(le,e);
                  }
               ;});
    if( len(lv)!=0 ){
      z=len(h);
      hh=cre(len(h));
      cop(h,hh);
      g=cre(z);
      rec_sub_prf(p,n,lv,le,hh,root_tree(hh),g,TRUE
/* FALSE */
);
      gg=cre_finish_up_sub_feql_prf(p,i,g);
      kil(g);
      
/* fprintf ( bstdout, "\n2 st,FEQLS_tac: %d %d",st,FEQLS_tac);
      {register int c ; c=0; while( c!='\n' ){ c = getchar() ;} ;};
*/

      if( st==FEQLS_tac ){
        while( eql_frm(hh,gg)==FALSE ){
          kil(hh);
          hh=gg;
          g=cre(z);
          rec_sub_prf(p,n,lv,le,hh,root_tree(hh),g,FALSE);
          gg=cre_finish_up_sub_feql_prf(p,i,g);
          kil(g);
        };
      };
      kil(hh);
      cre_subst_frm_prf_res=gg;
    } else {
      cre_subst_frm_prf_res=0;
    };
    kil(lv);
    itr(le,i,e,kil(e));
    kil(le)
  ; return cre_subst_frm_prf_res;
  }

  
  DAVE_fwd_ari_prf(p,n,gl,h,lh,st)
  {register int ff, s, w, N, V, S, T, DAVE_fwd_ari_prf_res;
    int arith_prf_is_int;
    DAVE_fwd_ari_prf_res = FALSE;
    ff=frm_hyp(h);                      /* ff the seq corresp to the hyp h */
    if( vrb_eql_frm_prf(p,n,ff)==FALSE ){
/*
DAVE_print_seq(ff);
*/
      xst_sub_frm(ff,N,V,is_arith_frm(ff,N)==TRUE,w=comp_arith_prf(ff,N,&arith_prf_is_int);
                     if   ( arith_prf_is_int ) S=cre_int_frm(w);
                     else                      S=cre_frm(w);
                     T=cre_mod_tree(ff,N,S);
                     kil(S);
                     s=cre(1);                       /*** ARI in hypmch ***/
                     psh(s,h);                          /****  \/  ***/
                     DAVE_fwd_ari_prf_res = cre_drv_hyp(T,s,gl,1,lh),
      );
    }
    return DAVE_fwd_ari_prf_res;
  }

  DAVE_fwd_sub_prf(p,n,gl,h,lh,st)
  {register int ff, s, N, V, S, T, lv, le, j, DAVE_fwd_sub_prf_res;
    DAVE_fwd_sub_prf_res = FALSE;
    ff=frm_hyp(h);                      /* ff the seq corresp to the hyp h */
/*
DAVE_print_seq(ff);
*/
    if( vrb_eql_frm_prf(p,n,ff)==FALSE ){
      lv=cre(4);
      le=cre(4);
      nxst_sub_frm(ff,N,V,is_dis_sub_frm_prf(p,n,lv,le,ff,N)==TRUE,
                 S=cre(4);
                 rec_sub_prf(p,n,lv,le,ff,right_node_tree(ff,N),S,TRUE);
                 if( eql_tree(ff,N,S,root_tree(S))==FALSE ) {
                   T=cre_mod_tree(ff,N,S);
                   s=cre(1);                       /*** SUB in hypmch ***/
                   psh(s,h);                          /****  \/  ***/
                   DAVE_fwd_sub_prf_res = cre_drv_hyp(T,s,gl,2,lh);
                 }
                 else {
                   DAVE_fwd_sub_prf_res=FALSE;
                 }
                 kil(S),
                 DAVE_fwd_sub_prf_res=FALSE
      );
      kil(lv);
      itr(le,j,V,kil(V));
      kil(le);
    }
    return DAVE_fwd_sub_prf_res;
  }

  fwd_eql_prf(p,n,gl,h,lh,st)
  {register int s,ff,f,lff,w,lv,le,e,b,c,i,hh,llh,gg,g,fwd_eql_prf_res ;
    ff=frm_hyp(h);
    if( vrb_eql_frm_prf(p,n,ff)==FALSE ){
      f=cre_subst_frm_prf(p,n,ff,lh,st);
      if( f!=0 ){
        s=cre(1);
        psh(s,h);
        fwd_eql_prf_res=cre_drv_hyp(f,s,gl,0,lh);
      }
      else {
        fwd_eql_prf_res=FALSE;
      }
    }
    else {
      lv=cre(1);
      le=cre(1);
      lff=left_node_frm(ff);
      if( is_idx_vrb_frm(ff,lff)==TRUE ){
        w=code_idx_vrb_frm(ff,lff);
      }
      else {
        w=val_tree(ff,lff);
      }
      psh(lv,w);
      e=cre_cop_tree(ff,right_node_frm(ff));
      psh(le,e);
      b=FALSE;
      llh=len(lh);
      itrn(i,1,llh,{
        hh=val(lh,i);
        if( (hh!=h) && (
/* (isa_der_hyp(hh)==TRUE) || */
(vrb_eql_frm_prf(p,n,hh)==FALSE)) ){
          gg=frm_hyp(hh);
          if( eql_frm(ff,gg)==FALSE ){
            g=cre(10);
            rec_sub_prf(p,n,lv,le,gg,root_tree(gg),g,FALSE);
            if( eql_frm(gg,g)==FALSE ){
              f=cre_subst_frm_prf(p,n,g,lh,st);
              if( f!=0 ){
                s=cre(1);
                psh(s,h);
                c=cre_drv_hyp(f,s,gl,0,lh);
                if( b==FALSE ){
                  b=c;
                };
              };
            };
            kil(g);
          };
        }
     ;});
      kil(lv);
      kil(e);
      kil(le);
      fwd_eql_prf_res=b;
    }
    return fwd_eql_prf_res;
  }

                         
/*  FORWARD PROOF INTERPRETER  */
                         
  
  itp_fwd_tac_prf(p,n,r,gl,h,lh
/* ,siz */ , max_no_hyp
)
  {register int t,st;
/***
printf ( "\n---------------------\nitp_fwd_tac_prf(p=%d,n=%d,r=%d,gl=%d,h=%d,lh=%d,max_no_hyp=%d)\n---------------------\n", p,n,r,gl,h,lh,max_no_hyp ); fflush ( stdout );
***/
    fwd_tac_ptr_prf=fst_fwd_tac_prf(fwd_tac_prf);
    while( fwd_tac_ptr_prf!=0 ){

      if ( len ( hso_gol ( gl ) ) > max_no_hyp ) return;
/***
printf ( " (%d)", len ( hso_gol ( gl ) ) ); fflush ( stdout );
***/

      t=info_nod(fwd_tac_ptr_prf);
      if( def_the_tac(t)==TRUE ){
/***
printf ( " " );
str_buf [ 0 ] = '\0';
write_frm_res(tac_the ( the_tac(t) ),0); printf ( str_buf ); fflush ( stdout );
***/
        dir_prf(r,gl,h,lh,the_tac(t),t);
      }
      else if( def_spe_tac(t)==TRUE ){
        st=spe_tac(t);
        if( (st==FEQL_tac) || (st==FEQLS_tac) ){
/*        
 fprintf ( bstdout, "\n1 st,FEQLS_tac: %d %d",st,FEQLS_tac);
          {register int c ; c=0; while( c!='\n' ){ c = getchar() ;} ;};
*/
          if( fwd_eql_prf(p,n,gl,h,lh,st)==TRUE ){
            mod_res_tac(t,TRUE);
          }
          else {
            mod_res_tac(t,FALSE);
          }
        }
        else if ( st==ARI_tac ) {
          if( DAVE_fwd_ari_prf(p,n,gl,h,lh,st)==TRUE ){
            mod_res_tac(t,TRUE);
          }
	}
        else if ( st==SUB_tac ) {
          if( DAVE_fwd_sub_prf(p,n,gl,h,lh,st)==TRUE ){
            mod_res_tac(t,TRUE);
          }
	}
        else {
          mod_res_tac(t,FALSE);
        }
      }
      fwd_tac_ptr_prf=nxt_fwd_tac_prf(fwd_tac_prf,fwd_tac_ptr_prf);
    }
    fwd_tac_ptr_prf=fst_fwd_tac_prf(fwd_tac_prf);
  }


  print_lh(lh)
  {register int i,h ;
    DisplayCurrWinText ( "\nContent of lh\n");
    itr(lh,i,h, {
      reset_res(0);
      write_frm_res(frm_hyp(h),0);
      DisplayCurrWinText ( "\n")
   ;});
  }

  fwd_prf(p,n,r,gl)
  {register int i,s,j,lh
/* ,siz */
 ;
    i=1;
    s=hso_gol(gl);            /* the hyp */
    lh=cre(50);
    rcnc(lh,s);               /* reverse conc ? */
    lst_hyp_prf(p,n,lh);
    
/* siz=len(lh)-len(s); */

/*
    if( exec_prf==FALSE ){
      j=max_fwd_ctr_prf;
    }
    else {
      j=max_fwd_ctr_auto_prf;
    }
*/

    j=max_fwd_ctr_auto_prf;

/***
fprintf ( bstdout, "prfmch: proving with max_fwd_ctr_auto_prf = %d\n", j );
***/

    while( i<=len(s) ){
      if( len(s)>=j  ){          /* len(s) = no of derived hyp */
        {
          char ebuf [ 250 ];
          sprintf ( ebuf, "Forward proof quota (%d) reached", j );
          Popup_Error ( ebuf );
        }
        i=len(s)+1;
      }
      else {
        itp_fwd_tac_prf(p,n,r,gl,val(s,i),lh
/* ,siz */ , /*  max_no_hyp = */ j );
        i=i+1;
      }
    }
    kil(lh);
  }

  ded_prf(r,p,n,g,f)
  {register int w,s,t,i,v,gl,h,N,V,S,T,ii,hh,ded_prf_res ;
    if( val_root_frm(f)==IMP_sym ){                    /* => */
      if( /* ask_ded_prf== */ TRUE ){
        mod_spe_gol(g,DED_gol);
        w=right_frm(f);                                /* the new goal */
        gl=cre_gol(w);                                 /* so create it */
        s=dec_tree(f,left_node_frm(f),AND_sym);        /* the hyp */
        t=cre(len(s));                                 /* cre the hyp length */
        itr(s,i,v,if( is_ff_eql_ff_frm(v)==FALSE ){
                    h=cre_hyp(v);
                    psh(t,h);
/*
printf ( " >>>>>>>>>> ded_prf w %d gl %d s %d h %d v %d t %d len(s) %d\n",w, gl, s,  h, v, t, len(s) );
DAVE_print_goal(gl);
DAVE_print_seq(w); /? the same as the goal ?/
DAVE_print_hyp(h);
DAVE_print_seq(v); /? the same as the hyp ?/
*/
		  }
                  else {
                    kil(v);
                  }
        );
        mod_hso_gol(gl,t);
        kil(s);
        cre_nod(gl,n);
        if( (fwd_tac_prf!=0) && (len(t)!=0) ){
          fwd_prf(p,n,r,gl);
        }
        ded_prf_res=TRUE;
      }
      else {
        ded_prf_res=FALSE;
      }
    }
    else {
      ded_prf_res=FALSE;
    }
    return ded_prf_res;
  }

                   
/*  'ARITHMETIC' BUILT_IN RULES  */
    
  log2e_prf(y)
  {register int l,k ;
    l=0;
    k=1;
    while( k<y ){
      l=l+1;
      if( k>(maxint / 2) ){
        k=y;
      } else {
        k=2*k;
      };
    }
  ; return l;
  }

  nrm2e_prf(y)
  {register int k ;
    k=1;
    while( k<y ){
      k=2*k;
    }
  ; return k;
  }

  comp_arith_prf(f,n,arith_prf_is_int)
  int f;
  int n;
  int * arith_prf_is_int;
  {register int op,l,r,fr,fl,comp_arith_prf_res, s;
    * arith_prf_is_int = 0;
    op=val_tree(f,n);
    fl=val_tree(f,left_node_tree(f,n));
    fr=val_tree(f,right_node_tree(f,n));
    switch( op ){
      case PLS_sym :{
        if( is_nbr_sym(fl) ) {
          l=arith_val_sym(fl);
        }
        else {
          s=cre_cop_tree(f,left_node_tree(f,n));
          l = val_int(s);
          kil(s);
          * arith_prf_is_int = 1;
	}
        if( is_nbr_sym(fr) ) {
          r=arith_val_sym(fr);
	}
        else {
          s=cre_cop_tree(f,right_node_tree(f,n));
          r = val_int(s);
          kil(s);
          * arith_prf_is_int = 1;
	}
        comp_arith_prf_res=(-(l+r));
        break;
      }
      case MIN_sym :{
        if( is_nbr_sym(fl) ) {
          l=arith_val_sym(fl);
        }
        else {
          s=cre_cop_tree(f,left_node_tree(f,n));
          l = val_int(s);
          kil(s);
          * arith_prf_is_int = 1;
	}
        if( is_nbr_sym(fr) ) {
          r=arith_val_sym(fr);
        }
        else {
          s=cre_cop_tree(f,right_node_tree(f,n));
          r = val_int(s);
          kil(s);
          * arith_prf_is_int = 1;
	}
        comp_arith_prf_res=(-(l-r));
        break;
      }
      case MUL_sym :{
        if( is_nbr_sym(fl) ) {
          l=arith_val_sym(fl);
        }
        else {
          s=cre_cop_tree(f,left_node_tree(f,n));
          l = val_int(s);
          kil(s);
          * arith_prf_is_int = 1;
	}
        if( is_nbr_sym(fr) ) {
          r=arith_val_sym(fr);
        }
        else {
          s=cre_cop_tree(f,right_node_tree(f,n));
          r = val_int(s);
          kil(s);
          * arith_prf_is_int = 1;
	}
        comp_arith_prf_res=(-(l*r));
        break;
      }
      case DIV_sym :{
        if( is_nbr_sym(fl) ) {
          l=arith_val_sym(fl);
        }
        else {
          s=cre_cop_tree(f,left_node_tree(f,n));
          l = val_int(s);
          kil(s);
          * arith_prf_is_int = 1;
	}
        if( is_nbr_sym(fr) ) {
          r=arith_val_sym(fr);
        }
        else {
          s=cre_cop_tree(f,right_node_tree(f,n));
          r = val_int(s);
          kil(s);
          * arith_prf_is_int = 1;
	}
        comp_arith_prf_res=(-(l / r));
        break;
      }
      case LOG2_sym :{
        r=arith_val_sym(fr);
        comp_arith_prf_res=(-log2e_prf(r));
        break;
      }
      case NRM2_sym :{
        r=arith_val_sym(fr);
        comp_arith_prf_res=(-nrm2e_prf(r));
        break;
      }
      case LEN_sym :{
        comp_arith_prf_res=(-len_sym(fr));
        break;
      }
    }
  ; return comp_arith_prf_res;
  }



  /************ used in ReconstructProofAndPrint only ************/

  test_ari_prf_func(f,n)
  {register int test_ari_prf_res ;
    if( is_arith_frm(f,n)==TRUE ){
      /* test_ari_prf_res=ask_ari_prffunc(f,n); */ test_ari_prf_res = TRUE;
    } else {
      test_ari_prf_res=FALSE;
    }
    return test_ari_prf_res;
  }

  ari_prf_func(i,g,f)
  {register int n,v,s,ff,gl,w,ari_prf_res ;
    int arith_prf_is_int;
    xst_sub_frm(f,n,v,test_ari_prf_func(f,n)==TRUE,w=comp_arith_prf(f,n,&arith_prf_is_int);
                         if   ( arith_prf_is_int ) s=cre_int_frm(w);
                         else                      s=cre_frm(w);
                         ff=cre_mod_tree(f,n,s);
                         kil(s);
                         gl=cre_gol(ff);
                         cre_nod(gl,i);
                         mod_spe_gol(g,ARI_gol);
                         seq_sub_rr_i = n;
                         ari_prf_res=TRUE,
                         ari_prf_res=FALSE);
    return ari_prf_res;
  }

  /************ motif version of the above ************/

  ask_ari_prffunc(f,n)
  {register int k;
    if ( auto_prf==FALSE ) {

      strcpy ( buf, "ARI" );

      str_buf [ 0 ] = '\0';
      k=cre_high_frm(f,n);
      reset_res(/* 6 */ 0);
      write_frm_res(k,/* 6 */ 0);
      kil(k);

      query_box_flag = query_box_ask_ari_prf;
      ApplyRuleBox ( 0, 1 );
    }
    else {
      ari_prf_2 ( TRUE );       /* auto_prf==TRUE */
    }
  }

int ari_prf_t;
ari_prf(t)
{
  ari_prf_t = t;
  yes_no_n = len ( run_man_prf_f );
  ari_prf_1();
}

ari_prf_1 ()
{
/***
printf ( "ari_prf_1 - yes_no_n %d\n", yes_no_n );
***/
  if ( yes_no_n ) {
    if ( is_arith_frm ( run_man_prf_f, yes_no_n ) ) {
      seq_sub_rr_i = yes_no_n;
/***
printf ( "  found seq_sub_rr_i = %d\n", yes_no_n);
***/
     ask_ari_prffunc ( run_man_prf_f, yes_no_n );
    }
    else {
      ari_prf_2 ( FALSE );  /* not arith form */
    }
  }
  else {                    /* yes_no_n == 0 */ 
    run_man_prf_success=FALSE;
    run_man_prf_run_man_prf_res=run_man_prf_i;
    mod_res_tac(ari_prf_t,FALSE);
    Proof_CB_continued ( FALSE, proof_step_flag_NO );  /* run_Proof_CB */
  }
}

ari_prf_2 ( b ) /* from Query Box */
int b;
{
  register int s,ff,gl,w;
  int arith_prf_is_int;
/***
printf ( "ari_prf_2 - b %d\n", b );
***/
  if ( b == TRUE ) {
    w=comp_arith_prf(run_man_prf_f,yes_no_n,&arith_prf_is_int);
    if   ( arith_prf_is_int ) s=cre_int_frm(w);
    else                      s=cre_frm(w);
    ff=cre_mod_tree(run_man_prf_f,yes_no_n,s);
    kil(s);
    gl=cre_gol(ff);
    cre_nod(gl,run_man_prf_i);
    mod_spe_gol(run_man_prf_g,ARI_gol);
    run_man_prf_success=TRUE;
    run_man_prf_run_man_prf_res=run_man_prf_i;
    pssubrr [ run_man_prf_i ] = seq_sub_rr_i;
    mod_res_tac(ari_prf_t,TRUE);
/***
printf ( "  -->> pssubrr [ %d ] = %d  (run_man_prf_f %d)\n", run_man_prf_i, seq_sub_rr_i, run_man_prf_f );
***/
    Proof_CB_continued ( FALSE, proof_step_flag_NO );  /* run_Proof_CB */
  }
  else {  /* b == FALSE */
    seq_sub_rr_i = 0;
    yes_no_n--;
    ari_prf_1 ();
  }
}



                   
/*   'QUOTE && CATL' BUILT_IN RULE (bcat && bcatl)   */
    
    
  
  comp_quo_prf(f,n)
  {register int s,st,i,v,t ;
    s=dec_tree(f,right_node_tree(f,n),COM_sym);
    st=cre(5);
    psh_str(st,SMPQUO_sym);
    itr(s,i,v,cnc_stri_sym(st,val_root_frm(v)));
    itr(s,i,v,kil(v));
    kil(s);
    psh_str(st,SMPQUO_sym);
    t=cre_sym(st,atm,nrml,0);
    kil(st)
  ; return t;
  }

  quo_prf(i,g,f)
  {register int n,v,s,ff,gl,w,quo_prf_res ;
    xst_sub_frm(f,n,v,is_quote_frm(f,n)==TRUE,w=comp_quo_prf(f,n);
                                             s=cre_frm(w);
                                             ff=cre_mod_tree(f,n,s);
                                             kil(s);
                                             gl=cre_gol(ff);
                                             cre_nod(gl,i);
                                             mod_spe_gol(g,QUO_gol);
                                             quo_prf_res=TRUE,
                                             quo_prf_res=FALSE)
  ; return quo_prf_res;
  }

  bcatl_prf(i,g,f)
  {register int n,v,s,ff,gl,w,quo_prf_res ;
    xst_sub_frm(f,n,v,is_bcatl_frm(f,n)==TRUE,w=comp_quo_prf(f,n);
                                             s=cre_frm(w);
                                             ff=cre_mod_tree(f,n,s);
                                             kil(s);
                                             gl=cre_gol(ff);
                                             cre_nod(gl,i);
                                             mod_spe_gol(g,QUO_gol);
                                             quo_prf_res=TRUE,
                                             quo_prf_res=FALSE)
  ; return quo_prf_res;
  }

  
  
  
                   
/*   'NEW VARIABLE' BUILT_IN RULE   */
    
    
  
  comp_new_vrb_prf(f,n)
  {register int s,st,i,v,t ;
    s=dec_tree(f,right_node_tree(f,n),COM_sym);
    st=cre(5);
    itr(s,i,v,cnc_stri_sym(st,val_root_frm(v)));
    itr(s,i,v,kil(v));
    kil(s);
    t=cre_sym(st,atm,nrml,0);
    kil(st)
  ; return t;
  }

  new_vrb_prf(i,g,f)
  {register int n,v,s,ff,gl,w,new_vrb_prf_res ;
    xst_sub_frm(f,n,v,is_new_vrb_frm(f,n)==TRUE,w=comp_new_vrb_prf(f,n);
                                             s=cre_frm(w);
                                             ff=cre_mod_tree(f,n,s);
                                             kil(s);
                                             gl=cre_gol(ff);
                                             cre_nod(gl,i);
                                             mod_spe_gol(g,NEW_gol);
                                             new_vrb_prf_res=TRUE,
                                             new_vrb_prf_res=FALSE)
  ; return new_vrb_prf_res;
  }

  bnewv_vrb_prf(i,g,f)
  {register int n,v,s,ff,gl,w,new_vrb_prf_res ;
    xst_sub_frm(f,n,v,is_bnew_vrb_frm(f,n)==TRUE,w=comp_new_vrb_prf(f,n);
                                             s=cre_frm(w);
                                             ff=cre_mod_tree(f,n,s);
                                             kil(s);
                                             gl=cre_gol(ff);
                                             cre_nod(gl,i);
                                             mod_spe_gol(g,NEW_gol);
                                             new_vrb_prf_res=TRUE,
                                             new_vrb_prf_res=FALSE)
  ; return new_vrb_prf_res;
  }

                   
/*   'LOWERING' BUILT_IN RULE   */
    
  comp_low_prf(f,n)
  {register int s,st,ss,i,v,t ;
    s=val_tree(f,right_node_tree(f,n));
    st=cre(5);
    if( letter_sym(s)==TRUE ){
      psh_str(st,trans_to_low_sym(s));
    } else {
      ss=stri_sym(s);
      itr_str(ss,i,v,psh_str(st,trans_to_low_sym(v)));
    };
    t=cre_sym(st,atm,nrml,0);
    kil(st)
  ; return t;
  }

  low_prf(i,g,f)
  {register int n,v,s,ff,gl,w,low_prf_res ;
    xst_sub_frm(f,n,v,is_low_frm(f,n)==TRUE,w=comp_low_prf(f,n);
                                           s=cre_frm(w);
                                           ff=cre_mod_tree(f,n,s);
                                           kil(s);
                                           gl=cre_gol(ff);
                                           cre_nod(gl,i);
                                           mod_spe_gol(g,NEW_gol);
                                           low_prf_res=TRUE,
                                           low_prf_res=FALSE)
  ; return low_prf_res;
  }

   
                     
/*   'WRITE' BUILT_IN RULES   */
  
  bwrite_prf(f)
  {register int op,ff,i,fff,b,bwrite_prf_res ;
    op=val_root_frm(f);
    if( op==WRI_sym ){
    
      save_fic;
      con_motif_fic;
      ff=dec_tree(f,right_node_frm(f),COM_sym);
      itr(ff,i,fff,write_frm_out(fff,0);kil(fff));
      kil(ff);
      flush_fic;
                                        
      restore_fic;
      
      bwrite_prf_res=TRUE;
    } else {
      bwrite_prf_res=FALSE;
    }
  ; return bwrite_prf_res;
  }

                     
/*   'WRITEF' BUILT_IN RULES   */
                     
  
  bwritef_prf(f)
  {register int op,ff,i,fff,b,bwrite_prf_res,ss,vv ;
    op=val_root_frm(f);
    if( (op==WRIF_sym) || (op==PRIF_sym) || (op==WRIM_sym) ){
      ff=dec_tree(f,right_node_frm(f),COM_sym);
      ss=fst(ff);
      vv=val_root_frm(ss);
      if( is_string_sym(vv)==TRUE ){
        if( op==WRIF_sym ){
          save_fic;
          con_motif_fic;
        };
        if( op==WRIM_sym ){
          save_fic;
          open_men_win;
          con_stdwin_fic;
};
        write_format_out(vv,ff);
        flush_fic;
        if( op==WRIF_sym ){
          restore_fic;
        };
        if( op==WRIM_sym ){
          restore_fic;
          clos_win;
        };
        bwrite_prf_res=TRUE;
      } else {
        bwrite_prf_res=FALSE;
      };
      itr(ff,i,fff,kil(fff));
      kil(ff);
    } else {
      bwrite_prf_res=FALSE;
    }
  ; return bwrite_prf_res;
  }

/*   'SHELL' BUILT_IN RULE   */
  bshell_prf(f)
  {register int v,s,i,w,l,x,bshell_prf_res ;
    bshell_prf_res=FALSE;
    if( val_root_frm(f)==SHL_sym ){
      v=val_tree(f,right_node_frm(f));
      if( ari_sym(v)==0  ){
        if( nrml_stri_sym(v)==TRUE ){
          s=stri_sym(v);
          if( (fst_str(s)==SMPQUO_sym) && (lst_str(s)==SMPQUO_sym) ){
            l=len_str(s);
            x=0;
            itr_str(s,i,w,
                    if( (i!=1) && (i!=l) ){
                      fstr_prf[x]=chr(w);
                      x=x+1
                   ;});
            fstr_prf[x]='\0';
            if( system(fstr_prf)==0 ){
              bshell_prf_res=TRUE;
            }
          }
        }
      }
    }
    return bshell_prf_res;
  }

                     
/*   'MODIFYING RULE' BUILT_IN RULE   */
                     
  bmodr_prf(f)
  {register int bmodr_res,r,lr,llrn,thn,t,b,rlrn,rc,n,rr ;
    bmodr_res=FALSE;
    if( val_root_frm(f)==MODR_sym ){
      r=right_frm(f);
      if( val_root_frm(r)==COM_sym ){
        lr=left_frm(r);
        if( val_root_frm(lr)==DOT_sym ){
          llrn=left_node_frm(lr);
          thn=val_tree(lr,llrn);
          if( ari_sym(thn)==0 ){
            xst_the(t,nam_the(t)==thn,b=TRUE,b=FALSE);
            if( b==TRUE ){
              rlrn=right_node_frm(lr);
              rc=val_tree(lr,rlrn);
              if( ari_sym(rc)==0 ){
                if( is_nbr_sym(rc)==TRUE ){
                  n=arith_val_sym(rc);
                  if( (n>0) && (n<=nbr_rul_the(t)) ){
                    rr=right_frm(r);
                    mod_rul_the(t,n,rr);
                    bmodr_res=TRUE;
                  };
                };
              };
            };
          };
        };
        kil(lr);
      };
      kil(r);
    }
    if ( bmodr_res ) CheckBrowseAfterModrRule ( t );
    return bmodr_res;
  }

  bmark_proved_prf(f)
  {register int bmark_proved_res,lr,llrn,thn,t,b,rlrn,rc,n,rr ;
    bmark_proved_res=FALSE;
    if( val_root_frm(f)==MARK_sym ){
      lr=right_frm(f);
      if( val_root_frm(lr)==DOT_sym ){
        llrn=left_node_frm(lr);
        thn=val_tree(lr,llrn);
        if( ari_sym(thn)==0 ){
          xst_the(t,nam_the(t)==thn,b=TRUE,b=FALSE);
          if( b==TRUE ){
            rlrn=right_node_frm(lr);
            rc=val_tree(lr,rlrn);
            if( ari_sym(rc)==0 ){
              if( is_nbr_sym(rc)==TRUE ){
                n=arith_val_sym(rc);
                if( (n>0) && (n<=nbr_rul_the(t)) ){
                  rr=val_rul_the(t,n);
                  mod_pvd_rul(rr,now_rul);
                  bmark_proved_res=TRUE;
                };
              };
            };
          };
        };
      };
      kil(lr);
    }
    if ( bmark_proved_res ) CheckBrowseAfterModrRule ( t );
    return bmark_proved_res;
  }

  
                       
/*   'POP THEORY' BUILT_IN RULE   */
                     
  bpopt_prf(rr,f)
  {register int bpopt_res,thn,t,r ;
    bpopt_res=FALSE;
    if( val_root_frm(f)==BPOP_sym ){
      thn=val_tree(f,right_node_frm(f));
      if( ari_sym(thn)==0 ){
        xst_the(t,nam_the(t)==thn,if( len(rul_the(t))!=0 ){
                                   r=lst(rul_the(t));
                                   if( typ_rul(r)!=nrm_rul ){
                                     if( test_lsb_rul(rr,r)==TRUE ){
                                       rmv_lsb_rul(rr,r);
                                       rem_rul_the(t,len(rul_the(t)));
                                       bpopt_res=TRUE
                                     ;}
                                   ;}
                                 ;},{});
};
    }
    if ( bpopt_res ) CheckBrowseAfterModrRule ( t );
    return bpopt_res;
  }

  bcleant_prf(rr,f)
  {register int bcleant_res,thn,t,r,l,b ;
    bcleant_res=FALSE;
    if( val_root_frm(f)==BCLEAN_sym ){
      thn=val_tree(f,right_node_frm(f));
      if( ari_sym(thn)==0 ){
        xst_the(t,nam_the(t)==thn,b=TRUE,b=FALSE);
        if( b==TRUE ){
          l=len(rul_the(t));
          bcleant_res=TRUE;
          while( l!=0 ){
            r=val(rul_the(t),l);
            if( typ_rul(r)!=nrm_rul ){
              if( test_lsb_rul(rr,r)==TRUE ){
                rmv_lsb_rul(rr,r);
                rem_rul_the(t,l);
};
            };
            l=l-1;
          };
        };
      };
    }
    if ( bcleant_res ) CheckBrowseAfterModrRule ( t );
    return bcleant_res;
  }

                    
/*  'EQUALITY' BUILT_IN RULE   */
       
       
  eql_prf(g,f) /* f=frm_gol(g); */
  {register int eql_prf_res ;
/***
printf ( "eql_prf(%d,%d)\n", g,f );
DAVE_print_goal(g);
DAVE_print_seq(f);
***/
    if ( pog_flag ) {
      return FALSE;
    }
    else {
      if( val_root_frm(f)==EQL_sym ){
        if( eql_tree(f,left_node_frm(f),f,right_node_frm(f))==TRUE ){
          mod_spe_gol(g,EQL_gol);
          eql_prf_res=TRUE;
        } else {
          eql_prf_res=FALSE;
        };
      } else {
        eql_prf_res=FALSE;
      };
      return eql_prf_res;
    }
  }

                      
/*  'CLOSE' BUILT_IN RULE   */
       
       
  clo_prf(f)
  {register int clo_prf_res ;
    if( val_root_frm(f)==CLO_sym ){
      clo_prf_res=TRUE;
      close_fic;
} else {
      clo_prf_res=FALSE;
    }
  ; return clo_prf_res;
  }

                      
/*  'HALT' AND 'REDO' BUILT_IN RULE  */
                      
  hlt_prf(r,g,f)
  {register int hlt_prf_res ;
    if( (val_root_frm(f)==HALT_sym) || (val_root_frm(f)==REDO_sym) ){
      halt_prf=TRUE;
      if( val_root_frm(f)==REDO_sym ){
        abt_prf=TRUE;
        mod_spe_gol(g,REDO_gol);
      } else {
        mod_spe_gol(g,HALT_gol);
      };
      rem_sub_rul_the(the_rul(r),num_rul(r));
      hlt_prf_res =TRUE;
    } else {
      hlt_prf_res=FALSE;
    }
  ; return hlt_prf_res;
  }

                   
/*  'STATISTICS' BUILT ; RULES  */
  stat_prf(f)
  {register int stat_prf_res ;
    if( val_root_frm(f)==BSTATISTICS_sym ){
      max0_tool;
      stat_prf_res=TRUE;
    } else {
      stat_prf_res=FALSE;
    }
    return stat_prf_res;
  }

                   
/*  'SUSPEND' BUILT ; RULES  */
  susp_prf(f)
  {register int susp_prf_res ;
    if( val_root_frm(f)==BSUSPEND_sym ){
      sigpause ( SIGCONT ); /* Note: this has been deprecated */
      susp_prf_res=TRUE;
    } else {
      susp_prf_res=FALSE;
    };
    return susp_prf_res;
  }

                   
/*  'RECOMPACT' BUILT ; RULES  */
  recompact_prf(f)
  {register int recompact_prf_res ;
    if( val_root_frm(f)==BRECOMPACT_sym ){
      cmp_seq(20);
      recompact_prf_res=TRUE;
    } else {
      recompact_prf_res=FALSE;
    }
  ; return recompact_prf_res;
  }

  
              
/*   'ADDING RULE TO A THEORY' BUILT_IN RULES   */
              
 
/*
  old_lod_rul_prf(f)
  {register int v,t,ff,r,i,gg,fff,lod_rul_prf_res ;
    lod_rul_prf_res=FALSE;
    if( val_root_frm(f)==PLS_sym ){
      v=val_tree(f,left_node_frm(f));
      if( ari_sym(v)==0 ){
        if( is_nbr_sym(v)==FALSE ){
          t=cre_the(v);
          ff=right_frm(f);
          if( val_root_frm(ff)==SMC_sym ){
            gg=dec_frm(ff,SMC_sym);
            itr(gg,i,fff,r=add_rul_the(fff,t,rul_rul));
            kil(gg);
            kil(ff);
          } else {
            r=add_rul_the(ff,t,rul_rul);
          };
        };
        lod_rul_prf_res=TRUE;
      };
    }
  ; return lod_rul_prf_res;
  }
*/

  lod_rul_prf(f)
  {register int v,t,ff,r,i,gg,fff,newfff,lod_rul_prf_res ;
    lod_rul_prf_res=FALSE;
    if( val_root_frm(f)==PLS_sym ){
      v=val_tree(f,left_node_frm(f));
      if( ari_sym(v)==0 ){
        if( is_nbr_sym(v)==FALSE ){
          t=cre_the(v);
          ff=right_frm(f);
          if( val_root_frm(ff)==SMC_sym ){
            gg=dec_frm(ff,SMC_sym);
            itr(gg,i,fff,if( val_root_frm(fff)==UNPLEM_sym ){
              newfff=right_frm(fff);
              kil(fff);
              r=add_rul_the(newfff,t,lem_rul);
            } else if( val_root_frm(fff)==PLEM_sym ){
              newfff=right_frm(fff);
              kil(fff);
              r=add_rul_the(newfff,t,lem_rul);
              mod_pvd_rul(r,now_rul);
            } else {
              r=add_rul_the(fff,t,rul_rul)
           ;});
            kil(gg);
            kil(ff);
          } else {
            if( val_root_frm(ff)==UNPLEM_sym ){
              newfff=right_frm(ff);
              kil(ff);
              r=add_rul_the(newfff,t,lem_rul);
            } else if( val_root_frm(ff)==PLEM_sym ){
              newfff=right_frm(ff);
              kil(ff);
              r=add_rul_the(newfff,t,lem_rul);
              mod_pvd_rul(r,now_rul);
            } else {
              r=add_rul_the(ff,t,rul_rul);
            };
          };
        };
        lod_rul_prf_res=TRUE;
      };
    }
  ; return lod_rul_prf_res;
  }

  add_rul_prf(p,n,rr,f)
  {register int v,t,ff,r,s,fff,w,add_rul_prf_res ;
    add_rul_prf_res=FALSE;
    w=val_root_frm(f);
    if( (w==PLS_sym) || (w==MUL_sym) ){
      v=val_tree(f,left_node_frm(f));
      if( (ari_sym(v)==0) && (is_nbr_sym(v)==FALSE) ){
        t=cre_the(v);
        ff=right_frm(f);
        s=cre(7);
        lst_genuine_hyp_frm_prf(p,n,s);
        if( len(s)!=0 ){
          fff=rec_frm(s,AND_sym);
          cnc(fff,ff);
          psh(fff,IMP_sym);
          kil(ff);
          ff=fff;
        };
        kil(s);
        if( w==PLS_sym ){
          r=add_rul_the(ff,t,rul_rul);
        } else {
          r=add_rul_the(ff,t,lem_rul);
        };
        add_lsb_rul(rr,r);
        add_rul_prf_res=TRUE;
      };
    }
    return add_rul_prf_res;
  }

  badd_lirul_prf(rr,f)
  {register int w,rp,v,t,ff,r,i,gg,fff,newfff,badd_lirul_prf_res ;
    badd_lirul_prf_res=FALSE;
    w=val_root_frm(f);
    if( w==BCRELR_sym ){
      rp=right_frm(f);
      if( val_root_frm(rp)==COM_sym ){
        v=val_tree(rp,left_node_frm(rp));
        if( ari_sym(v)==0 ){
          if( is_nbr_sym(v)==FALSE ){
            t=cre_the(v);
            ff=right_frm(rp);
            if( val_root_frm(ff)==SMC_sym ){
              gg=dec_frm(ff,SMC_sym);
              itr(gg,i,fff,if( val_root_frm(fff)==UNPLEM_sym ){
                newfff=right_frm(fff);
                kil(fff);
                r=add_rul_the(newfff,t,lem_rul);
                add_lsb_rul(rr,r);
              } else if( val_root_frm(fff)==PLEM_sym ){
                newfff=right_frm(fff);
                kil(fff);
                r=add_rul_the(newfff,t,lem_rul);
                add_lsb_rul(rr,r);
                mod_pvd_rul(r,now_rul);
              } else {
                r=add_rul_the(fff,t,rul_rul);
                add_lsb_rul(rr,r)
             ;});
              
/* itr(gg,i,fff,r=add_rul_the(fff,t,rul_rul);add_lsb_rul(rr,r)); */
              kil(gg);
              kil(ff);
            } else {
              if( val_root_frm(ff)==UNPLEM_sym ){
                newfff=right_frm(ff);
                kil(ff);
                r=add_rul_the(newfff,t,lem_rul);
                add_lsb_rul(rr,r);
              } else if( val_root_frm(ff)==PLEM_sym ){
                newfff=right_frm(ff);
                kil(ff);
                r=add_rul_the(newfff,t,lem_rul);
                add_lsb_rul(rr,r);
                mod_pvd_rul(r,now_rul);
              } else {
                r=add_rul_the(ff,t,rul_rul);
                add_lsb_rul(rr,r);
              }
              
/* r=add_rul_the(ff,t,rul_rul);
              add_lsb_rul(rr,r) */;
            };
            badd_lirul_prf_res=TRUE;
          };
        };
      };
      kil(rp);
    }
    if ( badd_lirul_prf_res ) CheckBrowseAfterModrRule ( t );
    return badd_lirul_prf_res;
  }

 
  badd_rul_prf(p,n,rr,f)
  {register int v,t,ff,r,s,fff,w,rp,add_rul_prf_res ;
    add_rul_prf_res=FALSE;
    w=val_root_frm(f);
    if( (w==BCRER_sym) || (w==BCREL_sym) ){
      rp=right_frm(f);
      if( val_root_frm(rp)==COM_sym ){
        v=val_tree(rp,left_node_frm(rp));
        if( (ari_sym(v)==0) && (is_nbr_sym(v)==FALSE) ){
          t=cre_the(v);
          ff=right_frm(rp);
          s=cre(7);
          lst_genuine_hyp_frm_prf(p,n,s);
          if( len(s)!=0 ){
            fff=rec_frm(s,AND_sym);
            cnc(fff,ff);
            psh(fff,IMP_sym);
            kil(ff);
            ff=fff;
          };
          kil(s);
          if( w==BCRER_sym ){
            r=add_rul_the(ff,t,rul_rul);
          } else {
            r=add_rul_the(ff,t,lem_rul);
          };
          add_lsb_rul(rr,r);
          add_rul_prf_res=TRUE;
        };
      };
      kil(rp);
    }
    if ( add_rul_prf_res ) CheckBrowseAfterModrRule ( t );
    return add_rul_prf_res;
  }

  
  
                  
/*   'AND' BUILT_IN RULE   */
                  
                  
  and_prf(n,g,f)
  {register int s,i,v,gl,and_prf_res ;
    if( val_root_frm(f)==AND_sym ){
      s=dec_frm(f,AND_sym);
      itr(s,i,v,gl=cre_gol(v);
                cre_nod(gl,n));
      mod_spe_gol(g,AND_gol);
      kil(s);
      and_prf_res=TRUE;
    } else {
      and_prf_res=FALSE;
    }
  ; return and_prf_res;
  }

  
                 
/*   'MAP' BUILT_IN RULE   */
                 
   map_prf(n,g,f)
   {register int op,s,rf,lf,i,v,w,gl,map_prf_res ;
     if( val_root_frm(f)==MAP_sym ){
       op=val_tree(f,right_node_frm(f));
       if( (op==AND_sym) || (op==SMC_sym) || (op==COM_sym) ){
         s=dec_tree(f,right_node_frm(f),op)
       ;} else {
         s=cre(1);
         rf=right_frm(f);
         psh(s,rf)
       ;};
       lf=left_frm(f);
       itr(s,i,v,w=cons_frm(lf,EVL_sym,v);
                 gl=cre_gol(w);
                 cre_nod(gl,n);
                 kil(v));
       mod_spe_gol(g,MAP_gol);
       kil(lf);
       kil(s);
       map_prf_res=TRUE
     ;} else {
       map_prf_res=FALSE
     ;}
   ; return map_prf_res
   ;}

    
                 
/*   'LMAP' BUILT_IN RULE   */
                 
   lmap_cmp_prf(n,g,f,i)
   {register int ff,op,s,rf,lf,t,ii,v,w,u,fff,gl,  fnc,prm,lprm   ;
     ff=cre_cop_tree(f,i);
     op=val_tree(ff,right_node_frm(ff));
     if( (op==AND_sym) || (op==SMC_sym) || (op==COM_sym) ){
       s=dec_tree(ff,right_node_frm(ff),op)
     ;} else {
       s=cre(1);
       rf=right_frm(ff);
       psh(s,rf)
     ;};
     lf=left_frm(ff);
     t=cre(len(s)); 
     if( val_root_frm(lf)!=EVL_sym ){
       itr(s,ii,v,w=cons_frm(lf,EVL_sym,v);
                  psh(t,w);
                  kil(v))
     ;} else {
       fnc=left_frm(lf);
       prm=right_frm(lf);
       itr(s,ii,v,lprm=cons_frm(prm,COM_sym,v);
                  w=cons_frm(fnc,EVL_sym,lprm);
                  kil(lprm);
                  psh(t,w);
                  kil(v));
       kil(fnc);
       kil(prm)
     ;};
     u=rec_frm(t,op);
     itr(t,ii,v,kil(v));
     kil(t);
     kil(lf);
     kil(s);
     fff=cre_mod_tree(f,i,u);
     kil(u);
     gl=cre_gol(fff);
     cre_nod(gl,n);
     mod_spe_gol(g,LMAP_gol);
     kil(ff)
   ;}

   lmap_prf(n,g,f)
   {register int v,i,lmap_prf_res ;
     xst_sub_frm(f,i,v,v==LMAP_sym,lmap_cmp_prf(n,g,f,i);
                                  lmap_prf_res=TRUE,
                                  lmap_prf_res=FALSE);
   ; return lmap_prf_res
   ;}

                 
/*   'SMAP' BUILT_IN RULE   */
                 
   smap_prf(n,g,f)
   {register int op,s,rf,lf,i,v,w,gl,fnc,prm,lprm,smap_prf_res ;
     if( val_root_frm(f)==SMAP_sym ){
       op=val_tree(f,right_node_frm(f));
       if( (op==AND_sym) || (op==SMC_sym) || (op==COM_sym) ){
         s=dec_tree(f,right_node_frm(f),op)
       ;} else {
         s=cre(1);
         rf=right_frm(f);
         psh(s,rf)
       ;};
       lf=left_frm(f);
       if( val_root_frm(lf)!=EVL_sym ){
         itr(s,i,v,w=cons_frm(lf,EVL_sym,v);
                   gl=cre_gol(w);
                   cre_nod(gl,n);
                   kil(v))
       ;} else {
         fnc=left_frm(lf);
         prm=right_frm(lf);
         itr(s,i,v,lprm=cons_frm(prm,COM_sym,v);
                   w=cons_frm(fnc,EVL_sym,lprm);
                   kil(lprm);
                   gl=cre_gol(w);
                   cre_nod(gl,n);
                   kil(v));
         kil(fnc);
         kil(prm)
       ;};
       mod_spe_gol(g,MAP_gol);
       kil(lf);
       kil(s);
       smap_prf_res=TRUE
     ;} else {
       smap_prf_res=FALSE
     ;}
   ; return smap_prf_res
   ;}

    
                 
/*   'NMAP' BUILT_IN RULE   */
                 
   nmap_prf(n,g,f)
   {register int op,s,rf,lf,i,v,w,gl,fnc,prm,lprm,smap_prf_res,siz,lprm1,lprm2,lprm11 ;
     if( val_root_frm(f)==NMAP_sym ){
       op=val_tree(f,right_node_frm(f));
       if( (op==AND_sym) || (op==SMC_sym) || (op==COM_sym) ){
         s=dec_tree(f,right_node_frm(f),op)
       ;} else {
         s=cre(1);
         rf=right_frm(f);
         psh(s,rf)
       ;};
       lf=left_frm(f);
       if( val_root_frm(lf)!=EVL_sym ){
         siz=len(s);
         itr(s,i,v,lprm11=cre_frm(arith_val_sym(i));
                   lprm1=cons_frm(v,COM_sym,lprm11);
                   lprm11=cre_frm(arith_val_sym(siz));
                   lprm2=cons_frm(lprm1,COM_sym,lprm11);
                   w=cons_frm(lf,EVL_sym,lprm2);
                   kil(lprm11);
                   kil(lprm1);
                   kil(lprm2);
                   gl=cre_gol(w);
                   cre_nod(gl,n);
                   kil(v))
       ;} else {
         siz=len(s);
         fnc=left_frm(lf);
         prm=right_frm(lf);
         itr(s,i,v,lprm=cons_frm(prm,COM_sym,v);
                   lprm11=cre_frm(arith_val_sym(i));
                   lprm1=cons_frm(lprm,COM_sym,lprm11);
                   lprm11=cre_frm(arith_val_sym(siz));
                   lprm2=cons_frm(lprm1,COM_sym,lprm11);
                   w=cons_frm(fnc,EVL_sym,lprm2);
                   kil(lprm);
                   kil(lprm11);
                   kil(lprm1);
                   kil(lprm2);
                   gl=cre_gol(w);
                   cre_nod(gl,n);
                   kil(v));
         kil(fnc);
         kil(prm)
       ;};
       mod_spe_gol(g,MAP_gol);
       kil(lf);
       kil(s);
       smap_prf_res=TRUE
     ;} else {
       smap_prf_res=FALSE
     ;}
   ; return smap_prf_res
   ;}

    
                 
/*   'SLMAP' BUILT_IN RULE   */
                 
   slmap_cmp_prf(n,g,f,i)
   {register int ff,op,s,rf,lf,t,ii,v,w,u,fff,gl,fnc,prm,lprm ;
     ff=cre_cop_tree(f,i);
     op=val_tree(ff,right_node_frm(ff));
     if( (op==AND_sym) || (op==SMC_sym) || (op==COM_sym) ){
       s=dec_tree(ff,right_node_frm(ff),op)
     ;} else {
       s=cre(1);
       rf=right_frm(ff);
       psh(s,rf)
     ;};
     lf=left_frm(ff);
     t=cre(len(s)); 
     if( val_root_frm(lf)!=EVL_sym ){
       itr(s,ii,v,w=cons_frm(lf,EVL_sym,v);
                  psh(t,w);
                  kil(v))
     ;} else {
       fnc=left_frm(lf);
       prm=right_frm(lf);
       itr(s,ii,v,lprm=cons_frm(prm,COM_sym,v);
                  w=cons_frm(fnc,EVL_sym,lprm);
                  kil(lprm);
                  psh(t,w);
                  kil(v));
       kil(fnc);
       kil(prm)
     ;};
     u=rec_frm(t,op);
     itr(t,ii,v,kil(v));
     kil(t);
     kil(lf);
     kil(s);
     fff=cre_mod_tree(f,i,u);
     kil(u);
     gl=cre_gol(fff);
     cre_nod(gl,n);
     mod_spe_gol(g,LMAP_gol);
     kil(ff)
   ;}

   slmap_prf(n,g,f)
   {register int v,i,slmap_prf_res ;
/***
printf ( "    slmap_prf(%d %d %d)\n", n,g,f );
***/
     xst_sub_frm(f,i,v,v==SLMAP_sym,slmap_cmp_prf(n,g,f,i);
                                  slmap_prf_res=TRUE,
                                  slmap_prf_res=FALSE);
   ; return slmap_prf_res
   ;}

 
                 
/*   'NLMAP' BUILT_IN RULE   */
                 
   nlmap_cmp_prf(n,g,f,i)
   {register int ff,op,s,rf,lf,t,ii,v,w,u,fff,gl,fnc,prm,lprm,
       siz,lprm1,lprm2,lprm11 ;
     ff=cre_cop_tree(f,i);
     op=val_tree(ff,right_node_frm(ff));
     if( (op==AND_sym) || (op==SMC_sym) || (op==COM_sym) ){
       s=dec_tree(ff,right_node_frm(ff),op)
     ;} else {
       s=cre(1);
       rf=right_frm(ff);
       psh(s,rf)
     ;};
     lf=left_frm(ff);
     t=cre(len(s)); 
     if( val_root_frm(lf)!=EVL_sym ){
       siz=len(s);
       itr(s,ii,v,
/* w=cons_frm(lf,EVL_sym,v); */
                  lprm11=cre_frm(arith_val_sym(ii));
                  lprm1=cons_frm(v,COM_sym,lprm11);
                  lprm11=cre_frm(arith_val_sym(siz));
                  lprm2=cons_frm(lprm1,COM_sym,lprm11);
                  w=cons_frm(lf,EVL_sym,lprm2);
                  kil(lprm11);
                  kil(lprm1);
                  kil(lprm2);
                  psh(t,w);
                  kil(v))
     ;} else {
       siz=len(s);
       fnc=left_frm(lf);
       prm=right_frm(lf);
       itr(s,ii,v,
/* lprm=cons_frm(prm,COM_sym,v);
                  w=cons_frm(fnc,EVL_sym,lprm);
                  kil(lprm); */
                  lprm=cons_frm(prm,COM_sym,v);
                  lprm11=cre_frm(arith_val_sym(ii));
                  lprm1=cons_frm(lprm,COM_sym,lprm11);
                  lprm11=cre_frm(arith_val_sym(siz));
                  lprm2=cons_frm(lprm1,COM_sym,lprm11);
                  w=cons_frm(fnc,EVL_sym,lprm2);
                  kil(lprm);
                  kil(lprm11);
                  kil(lprm1);
                  kil(lprm2);
                  psh(t,w);
                  kil(v));
       kil(fnc);
       kil(prm)
     ;};
     u=rec_frm(t,op);
     itr(t,ii,v,kil(v));
     kil(t);
     kil(lf);
     kil(s);
     fff=cre_mod_tree(f,i,u);
     kil(u);
     gl=cre_gol(fff);
     cre_nod(gl,n);
     mod_spe_gol(g,LMAP_gol);
     kil(ff)
   ;}

   nlmap_prf(n,g,f)
   {register int v,i,slmap_prf_res ;
/***
printf ( "    nlmap_prf(%d %d %d)\n", n,g,f );
***/
     xst_sub_frm(f,i,v,v==NLMAP_sym,nlmap_cmp_prf(n,g,f,i);
                                  slmap_prf_res=TRUE,
                                  slmap_prf_res=FALSE);
   ; return slmap_prf_res
   ;}

                     
/*  'REV' BUILT-; RULE  */
                     
   rev_cmp_prf(n,g,f,i)
   {register int ff,op,s,rf,u,fff,gl,j,ggg ;
     ff=cre_cop_tree(f,i);
     op=val_tree(ff,right_node_frm(ff));
     if( (op==AND_sym) || (op==SMC_sym) || (op==COM_sym) ){
       s=dec_tree(ff,right_node_frm(ff),op)
     ;} else {
       s=cre(1);
       rf=right_frm(ff);
       psh(s,rf)
     ;};
     rev(s);
     u=rec_frm(s,op);
     itr(s,j,ggg,kil(ggg));
     kil(s);
     fff=cre_mod_tree(f,i,u);
     kil(u);
     gl=cre_gol(fff);
     cre_nod(gl,n);
     mod_spe_gol(g,REV_gol);
     kil(ff)
   ;}

   
   rev_prf(n,g,f)
   {register int v,i,rev_prf_res ;
     nxst_sub_frm(f,i,v,v==REV_sym,rev_cmp_prf(n,g,f,i);
                                  rev_prf_res=TRUE,
                                  rev_prf_res=FALSE);
   ; return rev_prf_res
   ;}

   
                     
/*  'FLAT' BUILT-; RULE  */
                     
   
   flat_cmp_prf(n,g,f,i)
   {register int ff,op,s,u,t,ii,v,w,fff,gl ;
     ff=cre_cop_tree(f,i);
     op=val_tree(ff,right_node_frm(ff));
     if( 
/* ari_sym(op)==2 */
(op==AND_sym) || (op==SMC_sym) || (op==COM_sym) ){
       s=dec_tree(ff,right_node_frm(ff),op);
       t=cre(len(s));
       itr(s,ii,v, w=dec_frm(v,op);
                   cnc(t,w);
                   kil(w);
                   kil(v));
       while( len(s)!=len(t) ){
         cop(t,s);
         clr(t);
         itr(s,ii,v, w=dec_frm(v,op);
                     cnc(t,w);
                     kil(w);
                     kil(v));
};
       u=rec_frm(t,op);
       itr(t,ii,v,kil(v));
       kil(t);
       kil(s);
       } else {
       u=right_frm(ff)
     ;};
     fff=cre_mod_tree(f,i,u);
     kil(u);
     gl=cre_gol(fff);
     cre_nod(gl,n);
     mod_spe_gol(g,FLAT_gol);
     kil(ff)
   ;}

   
   flat_prf(n,g,f)
   {register int v,i,flat_prf_res ;
     nxst_sub_frm(f,i,v,v==FLAT_sym,flat_cmp_prf(n,g,f,i);
                                 flat_prf_res=TRUE,
                                 flat_prf_res=FALSE);
   ; return flat_prf_res
   ;}

   
                          
/*   TACTIC CONSTRUCTION   */
                
  
  cre_tac_prf(f,i)
  {register int z,tt,th,ff ;
    z=val_root_frm(f);
    if( z==TIL_sym ){
      tt=cre_tac(left_frm(f));
      mod_spe_tac(tt,TIL_tac);
    } else if( z == SMC_sym ){
      {register int s,j,fff,ttt ;
        s=dec_frm(f,SMC_sym);
        itr(s,j,fff,ttt=cre_tac_prf(fff,i);
                    if( ttt!=0 ){
                      cre_nod(ttt,i);
                    };
                    kil(fff));
        kil(s);
      };
      tt=0;
    } else if( z==DED_sym ){
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      mod_spe_tac(tt,DED_tac);
    } else if( z==ARI_sym ){
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      mod_spe_tac(tt,ARI_tac);
    } else if( z==SUB_sym ){
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      mod_spe_tac(tt,SUB_tac);
    } else if( z==REV_tac_sym ){
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      mod_spe_tac(tt,REV_tac);
    } else if( z==FLAT_tac_sym ){
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      mod_spe_tac(tt,FLAT_tac);
    } else if( z==MAP_tac_sym ){
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      mod_spe_tac(tt,MAP_tac);
    } else if( z==MODR_tac_sym ){
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      mod_spe_tac(tt,MODR_tac);
    } else if( z==SHELL_tac_sym ){
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      mod_spe_tac(tt,SHELL_tac);
    } else if( z==LMAP_tac_sym ){
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      mod_spe_tac(tt,LMAP_tac);
    } else if( z==WRITE_tac_sym ){
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      mod_spe_tac(tt,WRITE_tac);
    } else if( z==RULE_tac_sym ){
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      mod_spe_tac(tt,RULE_tac);
    } else if( z==TAC_tac_sym ){
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      mod_spe_tac(tt,TAC_tac);
    } else if( z==CATL_tac_sym ){
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      mod_spe_tac(tt,CATL_tac);
    } else if( z==NEWV_tac_sym ){
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      mod_spe_tac(tt,NEWV_tac);
    } else if( z==GEN_sym ){
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      mod_spe_tac(tt,GEN_tac);
    } else if( z==HYP_sym ){
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      mod_spe_tac(tt,HYP_tac);
    } else if( z==FEQL_tac_sym ){
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      mod_spe_tac(tt,FEQL_tac);
    } else if( z==FEQLS_tac_sym ){
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      mod_spe_tac(tt,FEQLS_tac);
    } else {
      ff=cre(len(f));
      cop(f,ff);
      tt=cre_tac(ff);
      xst_the(th,nam_the(th)==z,mod_the_tac(tt,th),{});
    }
  ; return tt;
  }

  cre_ini_tac_prf(f)
  {register int t,ff;
    if( val_root_frm(f)==TIL_sym ){
      t=cre_tac(left_frm(f));
      mod_spe_tac(t,TIL_tac);
    } else {
      ff=cre(len(f));
      cop(f,ff);
      t=cre_tac(ff);
      mod_spe_tac(t,RUT_tac);
    }
    return cre_root_nod(t);
  }

  step_tac_prf(i,t)
  {register int f,j,s,p,tt ;
    if( def_spe_tac(t)==TRUE ){
      p=spe_tac(t);
      if( (p==TIL_tac) || (p==RUT_tac) ){
        f=frm_tac(t);
        if( val_root_frm(f)==SMC_sym ){
          s=dec_frm(f,SMC_sym);
          itr(s,j,f,tt=cre_tac_prf(f,i);
                    if( tt!=0 ){
                      cre_nod(tt,i);
                    };
                    kil(f));
          kil(s);
        } else {
          cre_nod(cre_tac_prf(f,i),i);
        };
      };
    };
  }

                  
/*   TACTIC  NAVIGATION   */
  
  
  down_tac_prf(n)
  {register int m,s ;
    m=n;
    s=sons_nod(m);
    while( len(s)!=0 ){
      m=fst(s);
      s=sons_nod(m);
    }
  ; return m;
  }

  build_tac_prf(f)
  {register int i,t ;
    tac_prf=cre_ini_tac_prf(f);
    add_set(lst_tac_prf,tac_prf);
    itr_next_nod(tac_prf,tac_prf,i,t,step_tac_prf(i,t));
    tac_ptr_prf=down_tac_prf(tac_prf);
  }

  func_build_tac_prf(f)
  {register int i,t ;
    tac_prf=cre_ini_tac_prf(f);
    itr_next_nod(tac_prf,tac_prf,i,t,step_tac_prf(i,t));
    tac_ptr_prf=down_tac_prf(tac_prf)
  ; return tac_prf;
  }

  build_fwd_tac_prf2(f)
  {register int i,t ;
    fwd_tac_prf=cre_ini_tac_prf(f);
    add_set(lst_fwd_tac_prf,fwd_tac_prf);
    itr_next_nod(fwd_tac_prf,fwd_tac_prf,i,t,step_tac_prf(i,t));
    fwd_tac_ptr_prf=down_tac_prf(fwd_tac_prf);
  }

  func_build_fwd_tac_prf2(f)
  {register int i,t ;
    fwd_tac_prf=cre_ini_tac_prf(f);
    itr_next_nod(fwd_tac_prf,fwd_tac_prf,i,t,step_tac_prf(i,t));
    fwd_tac_ptr_prf=down_tac_prf(fwd_tac_prf)
  ; return fwd_tac_prf;
  }

  kil_tac_prffunc()
#define kil_tac_prf kil_tac_prffunc()
  {register int ta,j,i,t ;
    itr(lst_tac_prf,j,ta,itr_nod(ta,i,t,kil_tac(t),{},{});
                         kil_nod(ta));
    kil(lst_tac_prf);
  }

  kil_fwd_tac_prffunc()
#define kil_fwd_tac_prf kil_fwd_tac_prffunc()
  {register int i,t ;
    itr_nod(fwd_tac_prf,i,t,kil_tac(t),{},{});
    kil_nod(fwd_tac_prf);
  }

  kil_fwd_tac_prf2func()
#define kil_fwd_tac_prf2 kil_fwd_tac_prf2func()
  {register int ta,j,i,t ;
    itr(lst_fwd_tac_prf,j,ta,itr_nod(ta,i,t,kil_tac(t),{},{});
                             kil_nod(ta));
    kil(lst_fwd_tac_prf);
  }

  
  kil_input_prffunc()
#define kil_input_prf kil_input_prffunc()
  {register int i,s ;
    itr(lst_input_prf,i,s,kil(s));
    kil(lst_input_prf);
  }

  kil_content_input_prffunc()
#define kil_content_input_prf kil_content_input_prffunc()
  {register int i,s ;
    itr(lst_input_prf,i,s,kil(s));
    clr(lst_input_prf);
  }

#define fst_tac_prf(p) down_tac_prf(p)  
  up_tac_prf(p,n)
  {register int f,t,s,i,v,m,b,up_tac_prf_res ;
    f=fath_nod(n);
    if( f==fath_nod(p) ){
      up_tac_prf_res=down_tac_prf(p);
      end_of_tac_prf=TRUE;
    } else {
      s=sons_nod(f);
      m=snbr_nod(n);
      if( m==len(s) ){
        b=FALSE;
        itr(s,i,v,t=info_nod(v);
                  if( res_tac(t)==TRUE ){
                    b=TRUE;
                  };
                  mod_res_tac(t,FALSE));
        if( (b==TRUE) && (spe_tac(info_nod(f))==TIL_tac) ){
          mod_res_tac(info_nod(f),TRUE);
          up_tac_prf_res=down_tac_prf(fst(s));
        } else {
          up_tac_prf_res=up_tac_prf(p,f);
        };
      } else {
        up_tac_prf_res=down_tac_prf(val(s,m+1));
      };
    }
  ; return up_tac_prf_res;
  }

  
  nxt_tac_prf(p,n)
  {register int s,nxt_tac_prf_res ;
    s=sons_nod(n);
    if( len(s)!=0 ){
      nxt_tac_prf_res=down_tac_prf(fst(s));
    } else {
      nxt_tac_prf_res=up_tac_prf(p,n);
    }
  ; return nxt_tac_prf_res;
  }

  clean_tac_prffunc()
#define clean_tac_prf clean_tac_prffunc()
  {register int i,t ;
    itr_nod(tac_prf,i,t,mod_res_tac(t,TRUE),{},{});
  }

    
               
/*   'MODIFYING TACTICS' BUILT_IN RULE   */
               
  
  lod_add_tac_prf(f)
  {register int v,t,ff,op,lod_add_tac_prf_res ;
    op=val_root_frm(f);
    lod_add_tac_prf_res=FALSE;
    if( (op==DIV_sym) || (op==MIN_sym) ){
      v=val_tree(f,left_node_frm(f));
      if( (ari_sym(v)==0) ){
        if( is_nbr_sym(v)==FALSE ){
          t=cre_the(v);
          ff=right_frm(f);
          if( op==DIV_sym ){
            mod_tac_the(t,ff);
          } else {
            mod_fwd_tac_the(t,ff);
          };
        };
        lod_add_tac_prf_res=TRUE;
      };
    }
  ; return lod_add_tac_prf_res;
  }

  add_tac_prf(f)
  {register int v,t,ff,op,add_tac_prf_res ;
    op=val_root_frm(f);
    add_tac_prf_res=FALSE;
    if( (op==DIV_sym) || (op==MIN_sym) ){
      v=val_tree(f,left_node_frm(f));
      if( (ari_sym(v)==0) && (is_nbr_sym(v)==FALSE) ){
        t=cre_the(v);
        ff=right_frm(f);
        if( op==DIV_sym ){
          mod_tac_the(t,ff);
        } else {
          mod_fwd_tac_the(t,ff);
        };
        add_tac_prf_res=TRUE;
      };
    }
  ; return add_tac_prf_res;
  }

  badd_tac_prf(f)
  {register int v,t,ff,op,rp,add_tac_prf_res ;
    
/* fprintf ( bstdout, "coucou1"); */
    op=val_root_frm(f);
    add_tac_prf_res=FALSE;
    if( (op==BTAC_sym) || (op==FTAC_sym) ){
      
/* fprintf ( bstdout, "coucou2"); */
      rp=right_frm(f);
      if( val_root_frm(rp)==COM_sym ){
       
/* fprintf ( bstdout, "coucou3"); */
        v=val_tree(rp,left_node_frm(rp));
        if( (ari_sym(v)==0) && (is_nbr_sym(v)==FALSE) ){
          
/* fprintf ( bstdout, "coucou4"); */
          t=cre_the(v);
          ff=right_frm(rp);
          if( op==BTAC_sym ){
            mod_tac_the(t,ff);
          } else {
            mod_fwd_tac_the(t,ff);
          };
          add_tac_prf_res=TRUE;
        };
      };
      kil(rp);
    }
  ; return add_tac_prf_res;
  }

  
  
                          
/*   GUARD HANDLING   */
                   
                   
                          
/*  ARITHMETIC GUARD  */
  test_arith_prf(v)
  {register int w,l,o,r,test_arith_prf_res ;
    w=right_frm(v);
    if( is_rel_arith_frm(w)==TRUE ){
      o=val_root_frm(w);
/*
      l=(arith_val_sym_int(val_tree(w,left_node_frm(w)),w));
      r=(arith_val_sym_int(val_tree(w,right_node_frm(w)),w));
*/
/*
      l=(arith_val_sym_or_int(val_tree(w,left_node_frm(w)),left_frm(w)));
      r=(arith_val_sym_or_int(val_tree(w,right_node_frm(w)),right_frm(w)));
*/
      if ( is_nbr_sym ( val_tree(w,left_node_frm(w)) ) )
        l = - (val_tree(w,left_node_frm(w)));
      else
        l = val_int ( left_frm(w) );

      if ( is_nbr_sym ( val_tree(w,right_node_frm(w)) ) )
        r = - (val_tree(w,right_node_frm(w)));
      else
        r = val_int ( right_frm(w) );

      switch( o ){
        case SMR_sym :{
          test_arith_prf_res=((l<r)!=0);
        ;break;}case GTR_sym :{
          test_arith_prf_res=((l>r)!=0);
        ;break;}case SEQ_sym :{
          test_arith_prf_res=((l<=r)!=0);
        ;break;}case GEQ_sym :{
          test_arith_prf_res=((l>=r)!=0);
        ;break;}case NEQ_sym :{
          test_arith_prf_res=((l!=r)!=0)
        ;break;}case EQL_sym :{
          test_arith_prf_res=((l==r)!=0)
        ;break;};
      };
    } else {
      test_arith_prf_res=FALSE;
    };
    kil(w)
  ; return test_arith_prf_res;
  }

  
  
  
                       
/*  NON FREENESS GUARD  */
                       
               
/*  In fre_jok_prf(p,n,lv,s),
                  s is supposed to be a joker || a genuine variable
                  lv is a list of variables (with at least a joker in
                  case s is not a joker)
                  
                  semantics: s is free in lv
               
                  FALSE iff s can be considered not free in lv:
                    when all element v of lv are such that
                      v \ s  is a side-condition || s \ v  is a side-condition && s is a variable || bvrb(...,v,...,s,...) is a side-condition || v has no occurrence in initial goal (that is, v has 
                      been introduced during the proof) || when
                      s has no occurrence in initial goal (that is, s has 
                      been introduced during the proof)
                      
                */
                      
                    
fre_jok_prf(p,n,lv,s)
{register int lh,lvv,j,h,fh,lw,ff,v,gg,fre_jok_prf_res ;                     
  lh=cre(50);
  lvv=cre(len(lv));
  cop(lv,lvv);
  lst_hyp_prf(p,n,lh);
  itr(lh,j,h,fh=frm_hyp(h);
             if( val_root_frm(fh)==ANTI_SLASH_sym ){
               if( s==val_tree(fh,right_node_frm(fh)) ){
                 lw=cre(4);
                 if( is_lst_vrb_frm_prf(p,n,lw,fh,left_node_frm(fh))==TRUE ){
                   diff_set(lvv,lw)
                 ;};
                 kil(lw)
               ;} else if( is_idx_vrb_frm(fh,right_node_frm(fh))==TRUE ){
                 if( s == code_idx_vrb_frm(fh,right_node_frm(fh)) ){
                   lw=cre(4);
                   if( is_lst_vrb_frm_prf(p,n,lw,fh,left_node_frm(fh))==TRUE ){
                     diff_set(lvv,lw)
                   ;};
                   kil(lw)
                 ;}
               ;} else if( s == val_tree(fh,left_node_frm(fh)) ){
                 lw=cre(4);
                 if( (is_lst_vrb_frm_prf(p,n,lw,fh,left_node_frm(fh))==TRUE) && (is_lst_vrb_frm_prf(p,n,lw,fh,right_node_frm(fh))==TRUE) ){
                   diff_set(lvv,lw)
                 ;};
                 kil(lw)
               ;}
             ;} else if( val_root_frm(fh)==BVRB_sym ){
               lw=cre(4);
               if( is_lst_vrb_frm_prf(p,n,lw,fh,right_node_frm(fh))==TRUE ){
                 if( is_in_set(lw,s)==TRUE ){
                   diff_set(lvv,lw)
                 ;}
               ;};
               kil(lw);
            });
  if( len(lvv)==0 ){
    fre_jok_prf_res=FALSE;
} else {
    if( exec_prf==FALSE ){
      ff=frm_gol(info_nod(p));
      gg=cre_encode_tree(ff,root_tree(ff));
      if( is_in_frm(gg,s)==FALSE ){
        fre_jok_prf_res=FALSE;
      } else {
        exist_set(lvv,v,(is_in_frm(gg,v)==TRUE) 
/* || (letter_sym(v)==FALSE) */
,
                  fre_jok_prf_res=TRUE,
                  fre_jok_prf_res=FALSE);
      };
      kil(gg);
    } else {
      fre_jok_prf_res=FALSE;
    };
  };
  kil(lh);
  kil(lvv)
; return fre_jok_prf_res;
}

      
/*  lv is a list of variable
         f,i is the  sub-tree of f with top node i
         
         semantics: lv is free in sub-tree (f,i)
         
         local s is the value at top of sub-tree f,i
         
         if s is an atom
           if s is a non-joker variable
             if s belongs to lv
               TRUE
             else
               see previous procedure
             end
           elsif s is a joker then
             if s is a variable then 
               if s belongs to lv then
                 TRUE
               else
                 see previous procedure
               end
             else (certainly s cannot be a member of lv)
               see previous procedure
             end
           else (s is a constant)
             FALSE
           end
         else (s is a binary operator)
           if (f,i) an indexed variable then
             if (f,i) belongs to lv then
               TRUE 
             else
               see previous section
             end
           elsif (f,i) is a meta-predicate (bvrb || \ ) || a dummy ($)
             FALSE
           elsif (f,i) is a quantified formula then 
             remove from lv the quantified variables && invoke recursively with the new lv
             unless the new lv is empty in which case: FALSE
           elsif (f,i) is a substitution formula [lw=E]F then
             recursive call on lv && E
             if result is TRUE then 
               TRUE
             else
               if lv-lw is empty then
                 FALSE
               else
                 result is as recursive invocation on lv-lw && F
               end
             end
           else
             call recursively both left && right sub-trees
           end  */
           
rec_fre_prf(p,n,lv,f,i)   
/* lv is free in (f,i) */
{register int s,lq,le,lvv,v,j,b,ff,gg,rec_fre_prf_res ;
  s=val_tree(f,i);
  if( ari_sym(s)==0 ){
    if( is_vrb_spe_sym(s)==TRUE ){
      if( is_in_set(lv,s)==TRUE ){
        rec_fre_prf_res=TRUE;
      } else {
        exist_set(lv,v,letter_sym(v)==TRUE,b=FALSE,b=TRUE);
        if( b == TRUE ){
          rec_fre_prf_res=FALSE;
        } else {
          rec_fre_prf_res=fre_jok_prf(p,n,lv,s)
          
/* 
          ff=frm_gol(info_nod(p));
          gg=cre_encode_tree(ff,root_tree(ff));
          exist_set(lv,v,(is_in_frm(gg,v)==TRUE) && (letter_sym(v)==TRUE),
                          rec_fre_prf_res=TRUE,
                          rec_fre_prf_res=FALSE);
          kil(gg)
           */;
        };
      };
    } else if( letter_sym(s)==TRUE ){
      if( is_letter_vrb_prf(p,n,s)==TRUE ){
        if( is_in_set(lv,s)==TRUE ){
          rec_fre_prf_res=TRUE;
        } else {
          rec_fre_prf_res=fre_jok_prf(p,n,lv,s);
        };
      } else {
        rec_fre_prf_res=fre_jok_prf(p,n,lv,s);
      };
    } else {
      rec_fre_prf_res=FALSE;
    };
  } else {
    lq=cre(4);
    le=cre(4);
    if( is_idx_vrb_frm(f,i)==TRUE ){
      if( is_in_set(lv,code_idx_vrb_frm(f,i)) == TRUE ){
        rec_fre_prf_res=TRUE;
      } else {
        exist_set(lv,v,letter_sym(v)==TRUE,b=FALSE,b=TRUE);
        if( b == TRUE ){
          rec_fre_prf_res=FALSE;
        } else {
          rec_fre_prf_res=fre_jok_prf(p,n,lv,code_idx_vrb_frm(f,i));
        };
      }
      
/* rec_fre_prf_res=is_in_set(lv,code_idx_vrb_frm(f,i)) */;
    } else if( (s==UNDERSCORE_sym) || (s==ANTI_SLASH_sym) || (s==BVRB_sym) ){
      rec_fre_prf_res=FALSE;
    } else if( is_qtf_frm_prf(p,n,lq,f,i)==TRUE ){
      lvv=cre(len(lv));
      cop(lv,lvv);
      diff_set(lvv,lq);
      if( len(lvv)!=0 ){
        rec_fre_prf_res=rec_fre_prf(p,n,lvv,f,right_node_tree(f,i));
    } else {
        rec_fre_prf_res=FALSE;
      };
      kil(lvv);
    } else if( is_set_frm_prf(p,n,lq,f,i)==TRUE ){
      lvv=cre(len(lv));
      cop(lv,lvv);
      diff_set(lvv,lq);
      if( len(lvv)!=0 ){
        j=right_node_tree(f,i);
        rec_fre_prf_res=rec_fre_prf(p,n,lvv,f,right_node_tree(f,j));
      } else {
        rec_fre_prf_res=FALSE;
      };
      kil(lvv);
    } else if( is_sub_frm_prf(p,n,lq,le,f,i)==TRUE ){
      if( rec_fre_prf(p,n,lv,f,
      right_node_tree(f,right_node_tree(f,left_node_tree(f,i))))==TRUE ){
        rec_fre_prf_res=TRUE;
      } else {
        lvv=cre(len(lv));
        cop(lv,lvv);
        diff_set(lvv,lq);
        if( len(lvv)!=0 ){
          rec_fre_prf_res=rec_fre_prf(p,n,lvv,f,right_node_tree(f,i));
        } else {
          rec_fre_prf_res=FALSE;
        };
        kil(lvv);
      }       ;
    } else {
      if( rec_fre_prf(p,n,lv,f,left_node_tree(f,i))==TRUE ){
        rec_fre_prf_res=TRUE;
      } else {
        rec_fre_prf_res=rec_fre_prf(p,n,lv,f,right_node_tree(f,i));
      };
    };
    kil(lq);
    kil(le);
  }
; return rec_fre_prf_res;
}

  is_dis_lst_vrb_frm_prf(p,n,l,f,i)
  {register int m,j,v,is_dis_lst_vrb_frm_prf_res ;
    m=cre(4);
    if( is_lst_vrb_frm_prf(p,n,l,f,i)==TRUE ){
      xst(l,j,v,test_ident_vrb_prf(p,n,l,m,j,v)==TRUE,
                is_dis_lst_vrb_frm_prf_res=FALSE,
                is_dis_lst_vrb_frm_prf_res=TRUE);
    } else {
      is_dis_lst_vrb_frm_prf_res=FALSE  ;
    };
    kil(m)
  ; return is_dis_lst_vrb_frm_prf_res;
  }

  test_non_freeness_prf(p,n,w)
  {register int l,test_non_freeness_prf_res ;
    l=cre(4);
    if( is_dis_lst_vrb_frm_prf(p,n,l,w,left_node_frm(w))==TRUE ){
      test_non_freeness_prf_res=((rec_fre_prf(p,n,l,w,right_node_frm(w))==FALSE)!=0);
    } else {
      test_non_freeness_prf_res=FALSE;
    };
    kil(l)
  ; return test_non_freeness_prf_res;
  }

                        
/*  VARIABLE GUARD  */
                        
                        
  test_ident_vrb_prf(p,n,l,m,i,v)
  {register int w,test_ident_vrb_prf_res ;
    cop(l,m);
    rem(m,i);
    w=cre_frm(v);
    test_ident_vrb_prf_res=rec_fre_prf(p,n,m,w,root_tree(w));
    kil(w)
  ; return test_ident_vrb_prf_res;
  }

                          
  test_vrb_prf(p,n,w)
  {register int l,test_vrb_prf_res ;
    l=cre(4);
    test_vrb_prf_res=is_dis_lst_vrb_frm_prf(p,n,l,w,right_node_frm(w));
    kil(l)
  ; return test_vrb_prf_res;
  }

  is_dis_sub_frm_prf(p,n,lv,le,f,i)
  {register int l,r,op,s,is_dis_sub_frm_prf_res ;
  clr(lv);
  clr(le);
  is_dis_sub_frm_prf_res=FALSE;
  op=val_tree(f,i);
  if( op==SPE_sym ){
    l=left_node_tree(f,i);
    if( val_tree(f,l)==LSB_sym ){
      r=right_node_tree(f,l);
      if( val_tree(f,r)==CEQ_sym ){
        if( is_dis_lst_vrb_frm_prf(p,n,lv,f,left_node_tree(f,r))==TRUE ){
          s=dec_tree(f,right_node_tree(f,r),COM_sym);
          cop(s,le);
          kil(s); 
          is_dis_sub_frm_prf_res=((len(lv)==len(le))!=0);
        };
      };
    };
  }
; return is_dis_sub_frm_prf_res;
}

   
                       
/*  INTEGER GUARD  */
                       
val_int(w)
{
  int pos_neg;
  if   ( val_root_frm ( w ) == PLS_sym ) pos_neg = (-1);
  else                                   pos_neg = 1;
  return ( pos_neg * ( val_root_frm ( right_frm ( w ) ) ) );
}


test_int_prf(w)
{
  return ( is_int_frm ( right_frm ( w ) ) );
}


                        
/*  NUMERIC GUARD  */
                       
   
   test_num_prf(w)
   {register int v ;
     v=val_tree(w,right_node_frm(w))
   ; return is_nbr_sym(v)
   ;}

                        
/*  STRING GUARD  */
                    
                       
  test_string_prf(w)
  {register int v ;
    v=val_tree(w,right_node_frm(w));
  ; return is_string_sym(v);
  }

                       
/*  BITSTRING GUARD  */
                    
                       
  test_bitstring_prf(w)
  {register int v ;
    v=val_tree(w,right_node_frm(w));
  ; return is_bitstring_sym(v);
  }

                       
/*  LITERAL GUARD  */
                    
                       
  test_literal_prf(w)
  {register int v ;
    v=val_tree(w,right_node_frm(w));
  ; return is_literal_sym(v);
  }

                       
/*  SINGLETON GUARD  */
                    
                       
  test_singleton_prf(w)
  {
    return((val_tree(w,right_node_frm(w)) == COM_sym) == 0 );
  }

                       
/*  CONSTANT GUARD  */
                                           
  test_constant_prf ( v )
  {
    if      ( is_nbr_sym ( v ) )       { /*** printf ( " num\n") ;        ***/ return ( 1 ); }
    else if ( is_string_sym ( v ) )    { /*** printf ( " string\n") ;     ***/ return ( 1 ); }
    else if ( is_literal_sym ( v ) )   { /*** printf ( " literal\n") ;    ***/ return ( 1 ); }
    else if ( is_ident_sym ( v ) )     { /*** printf ( " ident\n") ;      ***/ return ( 1 ); }
    else if ( is_empty_set_sym ( v ) ) { /*** printf ( " empty set\n") ;  ***/ return ( 1 ); }
    else if ( is_empty_seq_sym ( v ) ) { /*** printf ( " empty seq\n") ;  ***/ return ( 1 ); }
    else                               { /*** printf ( " NO\n") ;         ***/ return ( 0 ); }
  }

                       
/*  LCONSTANT GUARD  */
                                           
  test_lconstant_prf(w)
  {
    int f, l, i, ok;
    ok = 1;
    f = dec_tree ( w, right_node_frm ( w ), COM_sym );
    l = len ( f );
    i = 1;
    while ( ( i <= l ) && ( ok ) ) {
     ok = test_constant_prf ( val_root_frm ( val ( f, i ) ) );
     i++;
    }
    kil ( f );
    return ( ok );
  }


/*  IDENTIFIER GUARDS  */
test_ident_prf(w)
{register int v ;
  v=val_tree(w,right_node_frm(w));
; return is_ident_sym(v);
}

test_upper_ident_prf(w)
{register int v ;
  v=val_tree(w,right_node_frm(w));
; return is_upper_ident_sym(v);
}

is_lst_ident_frm_prf(lv,f,i)
{register int s,j,v,b ;
  clr(lv);
  s=dec_tree(f,i,COM_sym);
  xst(s,j,v,is_ident_sym(val_root_frm(v))==FALSE,b=FALSE,b=TRUE);
  if( b==TRUE ){
    itr(s,j,v,psh(lv,val_root_frm(v));kil(v));
  } else {
    itr(s,j,v,kil(v));
  };
  kil(s);
  return b;
}

  test_ident_ident_prf(p,n,l,m,i,v)
  {register int w,test_ident_vrb_prf_res ;
    cop(l,m);
    rem(m,i);
    w=cre_frm(v);
    test_ident_vrb_prf_res=rec_fre_prf(p,n,m,w,root_tree(w));
    kil(w)
  ; return test_ident_vrb_prf_res;
  }

  is_dis_lst_ident_frm_prf(p,n,l,f,i)
  {register int m,j,v,is_dis_lst_ident_frm_prf_res ;
    m=cre(4);
    if( is_lst_ident_frm_prf(l,f,i)==TRUE ){
      xst(l,j,v,test_ident_ident_prf(p,n,l,m,j,v)==TRUE,
                is_dis_lst_ident_frm_prf_res=FALSE,
                is_dis_lst_ident_frm_prf_res=TRUE);
    } else {
      is_dis_lst_ident_frm_prf_res=FALSE  ;
    };
    kil(m)
  ; return is_dis_lst_ident_frm_prf_res;
  }

  test_lident_prf(p,n,w)
  {register int l,test_lident_prf_res ;
    l=cre(4);
    test_lident_prf_res=is_dis_lst_ident_frm_prf(p,n,l,w,right_node_frm(w));
    kil(l)
  ; return test_lident_prf_res;
  }

                         
/*  INHYP GUARD  */
  
                   
  tst_hyp_prf(a,h)
  {register int rn,fh ;
    rn=right_node_frm(a);
    fh=frm_hyp(h)
  ; return chk_tree(a,rn,beg_tree(a,rn),fh,root_tree(fh),1);
  }

  test_inhyp_prf(p,n,a,li,w)
  {register int s,i,h,ww,test_inhyp_prf_res,wc ;
    s=cre(4);
    lst_hyp_prf(p,n,s);
    xst(s,i,h,tst_hyp_prf(a,h)==TRUE,ww=right_frm(a);
                                    kil(w);
                                    wc=prd_tree(ww);
                                    kil(ww);
                                    psh(li,wc);
                                    test_inhyp_prf_res=TRUE,
                                    kil(w);
                                    test_inhyp_prf_res=FALSE);
    kil(s);
    return test_inhyp_prf_res;
  }

                    
/*  SPARE MEMORY GUARD  */
  spare_mem_test_prf(f)
  {register int j,s,spare_mem_test_prf_res ;
    j=right_frm(f);
    s=cre_frm(arith_val_sym(spare_mem_percent_seq ()));
    psh(lst_input_prf,s);
    spare_mem_test_prf_res=chk_frm(j,s)
  ; return spare_mem_test_prf_res;
  }
                      
/*  RULE NUMBER GUARD  */
  test_len_theo_prf(w,a)
  {register int r,lr,thn,ra,rra,t,b,n,s,test_len_theo_prf_res ;
    test_len_theo_prf_res=FALSE;
    r=right_frm(w);
    if( val_root_frm(r)==DOT_sym ){
      lr=left_frm(r);
      thn=val_root_frm(lr);
      if( ari_sym(thn)==0 ){
        xst_the(t,nam_the(t)==thn,b=TRUE;n=nbr_rul_the(t),b=FALSE);
        if( b==TRUE ){
          s=cre_frm(arith_val_sym(n));
          psh(lst_input_prf,s);
          ra=right_frm(a);
          rra=right_frm(ra);
          test_len_theo_prf_res=chk_frm(rra,s);
          kil(ra);
          kil(rra);
        };
      };
      kil(lr);
    };
    kil(r)
  ; return test_len_theo_prf_res;
  }
  
                        
/*  RULE GUARD  */
                        
  test_rule_prf(rul,i,rra,rlra)
  {register int s,nn,result ;
    result=FALSE;
    s=cre_rec_rul(rul);
    if( chk_frm(rra,s)==TRUE ){
      nn=cre_frm(arith_val_sym(i));
      if( chk_frm(rlra,nn)==TRUE ){
        result=TRUE;
        psh(lst_input_prf,s);
        psh(lst_input_prf,nn);
      } else {
        kil(nn);
        kil(s);
      };
    } else {
      kil(s);
    }
  ; return result;
  }

  
  test_rul_grd_prf(w,a)
  {register int r,lr,llrn,thn,t,b,rlrn,rc,n,rul,s,ra,rra,
  lra,lra2,rlra,c,i,lr2,nb,nbv,nbval,test_rul_grd_prf_res ;
    test_rul_grd_prf_res=FALSE;
    r=right_frm(w);
    nbval=0-1;
    if( val_root_frm(r)==COM_sym ){
      lr=left_frm(r);
      if( val_root_frm(lr)==COM_sym ){
        nb=left_frm(lr);
        nbv=val_root_frm(nb);
        kil(nb);
        if( is_nbr_sym(nbv)==TRUE ){
          nbval=arith_val_sym(nbv);
        };
        lr2= right_frm(lr);
        kil(lr);
        lr=lr2;
      };
      if( val_root_frm(lr)==DOT_sym ){
        llrn=left_node_frm(lr);
        thn=val_tree(lr,llrn);
        if( ari_sym(thn)==0 ){
          xst_the(t,nam_the(t)==thn,b=TRUE,b=FALSE);
          if( b==TRUE ){
            rlrn=right_node_frm(lr);
            rc=val_tree(lr,rlrn);
            if( ari_sym(rc)==0 ){
              if( is_nbr_sym(rc)==TRUE ){
                n=(arith_val_sym(rc));
                if( (n>0) && (n<=nbr_rul_the(t)) ){
                  rul=val_rul_the(t,n);
                  s=cre_rec_rul(rul);
                  psh(lst_input_prf,s);
                  ra=right_frm(a);
                  rra=right_frm(ra);
                  test_rul_grd_prf_res=chk_frm(rra,s);
                  kil(rra);
                  kil(ra);
                };
              } else {
                ra=right_frm(a);
                rra=right_frm(ra);
                lra=left_frm(ra);
                if( val_root_frm(lra)==COM_sym ){
                  lra2=right_frm(lra);
                  kil(lra);
                  lra=lra2;
                };
                rlra=right_frm(lra);
                c=FALSE;
                if( nbval==(-1) ){
                  nitr(rul_the(t),i,rul,if( c==FALSE ){
                    c=test_rule_prf(rul,i,rra,rlra)
                 ;});
                } else {
                  nitr(rul_the(t),i,rul,if( (c==FALSE) && (i <= nbval) ){
                    c=test_rule_prf(rul,i,rra,rlra);
                  } else {
                 ;});
                };
                test_rul_grd_prf_res=c;
                kil(rra);
                kil(ra);
                kil(lra);
                kil(rlra);
              };
            };
          };
        };
      };
      kil(lr);
    };
    kil(r)
  ; return test_rul_grd_prf_res;
  }

  test_unproved_lem_grd_prf(w,a)
  {register int r,lr,llrn,thn,t,b,rlrn,rc,n,rul,s,ra,rra,
  lra,lra2,rlra,c,i,lr2,nb,nbv,nbval,test_rul_grd_prf_res ;
    test_rul_grd_prf_res=FALSE;
    r=right_frm(w);
    nbval=0-1;
    if( val_root_frm(r)==COM_sym ){
      lr=left_frm(r);
      if( val_root_frm(lr)==COM_sym ){
        nb=left_frm(lr);
        nbv=val_root_frm(nb);
        kil(nb);
        if( is_nbr_sym(nbv)==TRUE ){
          nbval=arith_val_sym(nbv);
        };
        lr2= right_frm(lr);
        kil(lr);
        lr=lr2;
      };
      if( val_root_frm(lr)==DOT_sym ){
        llrn=left_node_frm(lr);
        thn=val_tree(lr,llrn);
        if( ari_sym(thn)==0 ){
          xst_the(t,nam_the(t)==thn,b=TRUE,b=FALSE);
          if( b==TRUE ){
            rlrn=right_node_frm(lr);
            rc=val_tree(lr,rlrn);
            if( ari_sym(rc)==0 ){
              if( is_nbr_sym(rc)==TRUE ){
                n=(arith_val_sym(rc));
                if( (n>0) && (n<=nbr_rul_the(t)) ){
                  rul=val_rul_the(t,n);
                  if( (typ_rul(rul)==lem_rul) && (pvd_rul(rul)!=now_rul) ){
                    s=cre_rec_rul(rul);
                    psh(lst_input_prf,s);
                    ra=right_frm(a);
                    rra=right_frm(ra);
                    test_rul_grd_prf_res=chk_frm(rra,s);
                    kil(rra);
                    kil(ra);
                  };
                };
              } else {
                ra=right_frm(a);
                rra=right_frm(ra);
                lra=left_frm(ra);
                if( val_root_frm(lra)==COM_sym ){
                  lra2=right_frm(lra);
                  kil(lra);
                  lra=lra2;
                };
                rlra=right_frm(lra);
                c=FALSE;
                if( nbval==(-1) ){
                  nitr(rul_the(t),i,rul,if( c==FALSE ){
                    if( (typ_rul(rul)==lem_rul) && (pvd_rul(rul)!=now_rul) ){
                      c=test_rule_prf(rul,i,rra,rlra);
                    }
                 ;});
                } else {
                  nitr(rul_the(t),i,rul,if( (c==FALSE) && (i <= nbval) ){
                    if( (typ_rul(rul)==lem_rul) && (pvd_rul(rul)!=now_rul) ){
                      c=test_rule_prf(rul,i,rra,rlra);
                    };
                  } else {
                 ;});
                };
                test_rul_grd_prf_res=c;
                kil(rra);
                kil(ra);
                kil(lra);
                kil(rlra);
              };
            };
          };
        };
      };
      kil(lr);
    };
    kil(r)
  ; return test_rul_grd_prf_res;
  }

                             
/*  READF GUARD  */
    
  ridf_test_prf(w,a)
  {register int ff,i,fff,s,gg,ggg,b,rid_test_prf_res,ss,vv ;
    ff=dec_tree(w,right_node_frm(w),COM_sym);
    gg=dec_tree(a,right_node_frm(a),COM_sym);
    pop(ff);
    if( len(ff)>0 ){
      ss=fst(ff);
      vv=val_root_frm(ss);
      if( is_string_sym(vv)==TRUE ){    
        save_fic;
        con_stderr_fic;
        reset_out(0);
        write_format_out(vv,ff);
        flush_fic;
        restore_fic;
      };
    };
    s=
/* read_eol_frm */
read_frm;
    psh(lst_input_prf,s);
    rid_test_prf_res=chk_frm(lst(gg),s);
    itr(ff,i,fff,kil(fff));
    kil(ff);
    itr(gg,i,ggg,kil(ggg));
    kil(gg)
  ; return rid_test_prf_res;
  }

/*  READE GUARD  */
    
  rideol_test_prf(w,a)
  {register int ff,i,fff,s,gg,ggg,b,rid_test_prf_res,ss,vv ;
/***
printf ( "rideol_test_prf: info_nod(loop_do_prf_i) = %d\n", info_nod(loop_do_prf_i) );
***/
    ff=dec_tree(w,right_node_frm(w),COM_sym);
    gg=dec_tree(a,right_node_frm(a),COM_sym);
    pop(ff);
    if( len(ff)>0 ){
      ss=fst(ff);
      vv=val_root_frm(ss);
      if( is_string_sym(vv)==TRUE ){    
        save_fic;
        /* con_stderr_fic; */
        file_fic = -999; /* so appended to str_buf */
        strcpy ( str_buf, "breade guards must be instantiated before rule can be presented ...\n\n" );
        reset_out(0);
        write_format_out(vv,ff);
        flush_fic;
        restore_fic;
      };
    };
    {
      FILE * Bexe;
      int not_parsed, ii, c;
      Bfile = fopen ( ".Bexe", "w" );
      fprintf ( Bfile, "printf \"%s\"\nread input\necho $input > .Bout\n", str_buf );
      fclose ( Bfile );
      system ( "chmod +x .Bexe" );
      not_parsed = 1;
      while ( not_parsed ) {
        system ( "xterm  -sb -geometry 100x15+100+100 -e ./.Bexe" );
        ii = 0;
        Bfile = fopen ( ".Bout", "r" );
        if ( Bfile != NULL ) {
          c = getc ( Bfile );
          while ( c != EOF ) {
            str_buf [ ii++ ] = c;
            c = getc ( Bfile );
          }
          fclose ( Bfile );
        }
        str_buf [ ii ] = '\0';
        s = read_frm_str_buf;
        if   ( s != -999 ) not_parsed = 0;
        else               Popup_Info ( "Input does not parse" );
      }      
/*
      s=read_eol_frm;
*/
      system ( "rm -f .Bexe .Bout" );
    }
/***
printf ( " read_eol_frm s = %d\n", s );
***/
    psh(lst_input_prf,s);
    rid_test_prf_res=chk_frm(lst(gg),s);
    if ( rid_test_prf_res == TRUE ) {
      if ( gbreade[info_nod(loop_do_prf_i)] == 0 ) {
        gbreade[info_nod(loop_do_prf_i)] = cre ( 5 );
/***
printf ( " created gbreade[info_nod(loop_do_prf_i)] = %d )\n", gbreade[info_nod(loop_do_prf_i)] );
***/
      }
      {
        int nn = cre ( 1 );
        cop ( s, nn );
        psh ( gbreade[info_nod(loop_do_prf_i)], nn );
/***
printf ( " psh ( gbreade[info_nod(loop_do_prf_i)], %d ) ->", nn );
prf_frm_dave ( nn );
prt_seq_dave ( gbreade[info_nod(loop_do_prf_i)] );
***/
      }
    }
    itr(ff,i,fff,kil(fff));
    kil(ff);
    itr(gg,i,ggg,kil(ggg));
    kil(gg)
  ; return rid_test_prf_res;
  }

                             
  rideol_test_reconstruct_prf(w,a,prf_seq_breade)
  {register int ff,i,fff,s,gg,ggg,b,rid_test_prf_res,ss,vv ;
/***
printf ( "rideol_test_reconstruct_prf: prf_seq_breade = %d\n", prf_seq_breade );
***/
    ff=dec_tree(w,right_node_frm(w),COM_sym);
    gg=dec_tree(a,right_node_frm(a),COM_sym);
    pop(ff);
    s = val ( prf_seq_breade, 1 );
    rem ( prf_seq_breade, 1 );
/***
printf ( " current first s", s ); fflush ( stdout );
prf_frm_dave ( s );
***/
    psh(lst_input_prf,s);
    rid_test_prf_res=chk_frm(lst(gg),s);
    itr(ff,i,fff,kil(fff));
    kil(ff);
    itr(gg,i,ggg,kil(ggg));
    kil(gg);
    return rid_test_prf_res;
  }

                             
/*  GET FILE GUARD  */
  get_test_prf(f)
  {register int ff,v,s,ss,p,get_test_prf_res ;
    get_test_prf_res=FALSE;
    ff=right_frm(f);
    if( val_root_frm(ff)==COM_sym ){
      v=val_tree(ff,left_node_frm(ff));
      if( ari_sym(v)==0 ){
        if( nrml_stri_sym(v)==TRUE ){
          s=stri_sym(v);
          if( (fst_str(s)==SMPQUO_sym) && (lst_str(s)==SMPQUO_sym) ){
            if( mod_str_read_name_fil(s)==TRUE ){
              ss=read_file_frm;
              if( ss!=0 ){
                psh(lst_input_prf,ss);
                p=right_frm(ff);
                get_test_prf_res=chk_frm(p,ss);
                kil(p);
              }
            }
          }
        }
      }
    }
    kil(ff);
    return get_test_prf_res;
  }

  
                               
/*  GET HYP GUARD  */
  gethyp_test_prf(p,n,f)
  {register int ff,s,fff,gethyp_test_prf_res ;
    gethyp_test_prf_res=FALSE;
    ff=right_frm(f);
    s=cre(7);
    lst_genuine_hyp_frm_prf(p,n,s);
    if( len(s)!=0 ){
      fff=rec_frm(s,AND_sym);
      psh(lst_input_prf,fff);
      gethyp_test_prf_res=chk_frm(ff,fff);
    };
    kil(s);
    kil(ff)
  ; return gethyp_test_prf_res;
  }

  getallhyp_test_prf(p,n,f)
  {register int ff,s,fff,getallhyp_test_prf_res ;
    getallhyp_test_prf_res=FALSE;
    ff=right_frm(f);
    s=cre(10);
    lst_all_hyp_frm_prf(p,n,s);
    if( len(s)!=0 ){
      fff=rec_frm(s,AND_sym);
      psh(lst_input_prf,fff);
      getallhyp_test_prf_res=chk_frm(ff,fff);
    };
    kil(s);
    kil(ff)
  ; return getallhyp_test_prf_res;
  }

  
                           
/*  FILE CONNECT GUARD  */
  
  test_con_prf(f)
  {register int v,s,test_con_prf_res ;
    test_con_prf_res=FALSE;
    v=val_tree(f,right_node_frm(f));
    if( ari_sym(v)==0 ){
      if( nrml_stri_sym(v)==TRUE ){
        s=stri_sym(v);
        if( (fst_str(s)==SMPQUO_sym) && (lst_str(s)==SMPQUO_sym) ){
          if( con_fic(v)==TRUE ){
            reset_out(0);
            test_con_prf_res=TRUE;
          };
        };
      };
    }
  ; return test_con_prf_res;
  }

                           
/*  FILE APPEND GUARD  */
  
  test_app_prf(f)
  {register int v,s,test_app_prf_res ;
    test_app_prf_res=FALSE;
    v=val_tree(f,right_node_frm(f));
    if( ari_sym(v)==0 ){
      if( nrml_stri_sym(v)==TRUE ){
        s=stri_sym(v);
        if( (fst_str(s)==SMPQUO_sym) && (lst_str(s)==SMPQUO_sym) ){
          if( app_fic(v)==TRUE ){
            
/* reset_out(0); */
            test_app_prf_res=TRUE;
          };
        };
      };
    }
  ; return test_app_prf_res;
  }

                            
/*  SET_FWD_PRF GUARD  */
  
  test_set_fwd_prf(f)
  {register int v,s,test_set_fwd_prf_res ;
    test_set_fwd_prf_res=FALSE;
    v=val_tree(f,right_node_frm(f));
    if( is_nbr_sym(v) ){
      max_fwd_ctr_auto_prf = arith_val_sym ( v );
      test_set_fwd_prf_res=TRUE;
    }
    return test_set_fwd_prf_res;
  }

                            
/*  SEARCH GUARD  */
                            
  search_test_prf(w)
  {register int rw,v,s,i,ss,pat,res,list,op,u,j,frm,b,newlist,search_test_prf_res ;
    search_test_prf_res=FALSE;
    rw=right_frm(w);
    v=val_root_frm(rw);
    if( v == COM_sym ){
      s=dec_frm(rw,COM_sym);
      if( len(s) == 3 ){
        pat=val(s,1);
        list=val(s,2);
        res=val(s,3);
        op=val_root_frm(list);
        if( (op==AND_sym) || (op==SMC_sym) || (op==COM_sym) ){
          u=dec_frm(list,op);
          nxst(u,j,frm,chk_frm(pat,frm) == TRUE,
          rem(u,j);
          
/* psh(u,frm); */
          b=TRUE,
          b=FALSE);
          if( b==TRUE ){
            newlist=rec_frm(u,op);
            if( chk_frm(res,newlist) == TRUE ){
              psh(lst_input_prf,frm);
              psh(lst_input_prf,newlist);
              itr(u,i,ss,kil(ss));
              search_test_prf_res=TRUE;
            } else {
              kil(newlist);
              itr(u,i,ss,kil(ss));
              kil(frm);
            };
          } else {
            itr(u,i,ss,kil(ss));
          };
          kil(u);
        };
      };
      itr(s,i,ss,kil(ss));
      kil(s);
    };
    kil(rw)
  ; return search_test_prf_res;
  }

                           
/*  GUARD MONITOR  */
 
  guard_prf(p,n,a,li,app_rule_flag,prf_seq_breade)
  {register int w,op,guard_prf_res ;
/***
printf ( "guard_prf(p=%d,n=%d,a=%d,li=%d,app_rule_flag=%d,prf_seq_breade=%d)\n",p,n,a,li,app_rule_flag,prf_seq_breade);
***/
    w=prd_tree(a);
    op=val_root_frm(w);
    if( op==BTST_sym ){
/***
printf ( "guard_prf 1\n" );
***/
      guard_prf_res=test_arith_prf(w);     
/*  arithmetic relation  */
      kil(w);
    } else if( op==BNUM_sym  ){
/***
printf ( "guard_prf 2\n" );
***/
      guard_prf_res=test_num_prf(w);            
/*  numericness  */
      kil(w);
    } else if( op==BINT_sym  ){
/***
printf ( "guard_prf 3\n" );
***/
      guard_prf_res=test_int_prf(w);            
/*  intergerness */
      kil(w);
    } else if( op==STR_sym ){
/***
printf ( "guard_prf 4\n" );
***/
      guard_prf_res=test_string_prf(w);         
/*  stringness  */
      kil(w);
    } else if( op==BBITSTR_sym ){
/***
printf ( "guard_prf 5\n" );
***/
      guard_prf_res=test_bitstring_prf(w);         
/*  bitstringness  */
      kil(w);
    } else if( op==BLITERAL_sym ){
/***
printf ( "guard_prf 6\n" );
***/
      guard_prf_res=test_literal_prf(w);         
/*  literalness  */
      kil(w);
    } else if( op==BSINGLETON_sym ){
/***
printf ( "guard_prf 7\n" );
***/
      guard_prf_res=test_singleton_prf(w);         
/*  literalness  */
      kil(w);
    } else if( op==BCONSTANT_sym ){
      guard_prf_res=test_constant_prf(val_tree(w,right_node_frm(w)));         
/*  constantness  */
      kil(w);
    } else if( op==BLCONSTANT_sym ){
      guard_prf_res=test_lconstant_prf(w);         
/*  lconstantness  */
      kil(w);
    } else if( op==IDENT_sym ){
/***
printf ( "guard_prf 8\n" );
***/
      guard_prf_res=test_ident_prf(w);          
/*  identifierness  */
      kil(w);
    } else if( op==UIDENT_sym ){
/***
printf ( "guard_prf 9\n" );
***/
      guard_prf_res=test_upper_ident_prf(w);    
/*  upidentifierness  */
      kil(w);
    } else if( op==LIDENT_sym ){
/***
printf ( "guard_prf 10\n" );
***/
      guard_prf_res=test_lident_prf(p,n,w);     
/*  listidentifierness  */
      kil(w);
    } else if( op==ANTI_SLASH_sym ){                 
/***
printf ( "guard_prf 11\n" );
***/
      guard_prf_res=test_non_freeness_prf(p,n,w);
/*  non freeness  */
      kil(w);
    } else if( op==BVRB_sym  ){                      
/***
printf ( "guard_prf 12\n" );
***/
      guard_prf_res=test_vrb_prf(p,n,w);       
/*  variableness  */
      kil(w);
    } else if( op==CON_sym ){                        
/***
printf ( "guard_prf 13\n" );
***/
      guard_prf_res=test_con_prf(w);            
/*  bconnect  */
      kil(w);
    } else if( op==APP_sym ){                        
/***
printf ( "guard_prf 14\n" );
***/
      guard_prf_res=test_app_prf(w);           
/*  bappend  */
      kil(w);
    } else if( op==BINH_sym  ){                      
/*  binhyp  */
    
/***
printf ( "guard_prf 15\n" );
***/
      guard_prf_res=test_inhyp_prf(p,n,a,li,w);
      if ( pog_flag && guard_prf_res == TRUE ) {
          binhyp_count++;
/***
 fprintf ( bstdout, "binhyp_count %d\n",binhyp_count);delay;
***/
        }
    } else if( op==RUL_sym ){                        
/***
printf ( "guard_prf 16\n" );
***/
      guard_prf_res=test_rul_grd_prf(w,a);       
/*  rule  */
      kil(w);
    } else if( op==BLENT_sym ){                        
/***
printf ( "guard_prf 17\n" );
***/
      guard_prf_res=test_len_theo_prf(w,a);       
/*  nbr of rules  */
      kil(w);
    } else if( op==LEM_sym ){                        
/*  unproved lemma  */
/***
printf ( "guard_prf 18\n" );
***/
      guard_prf_res=test_unproved_lem_grd_prf(w,a);
      kil(w);
    } else if( op==RIDF_sym ){                   
/*  reading  from terminal (`) */
/***
printf ( "guard_prf 19\n" );
***/
      guard_prf_res=ridf_test_prf(w,a);
      kil(w);
    } else if( op==RIDE_sym ){                  
/*  reading  from terminal (eol) */
      if      ( app_rule_flag == 1 ) { /* show applicable rules/single step */
/***
printf ( "guard_prf 20\n" );
***/
        guard_prf_res=TRUE;
      } 
      else if ( app_rule_flag == 2 ) { /* reconstruct proof */
/***
printf ( "guard_prf 21\n" );
***/
        guard_prf_res=rideol_test_reconstruct_prf(w,a,prf_seq_breade); 
      } 
      else {
/***
printf ( "guard_prf 22\n" );
***/
        guard_prf_res=rideol_test_prf(w,a);
      } 
      kil(w);
    } else if( op==GET_sym ){                        
/*  getting from file  */
/***
printf ( "guard_prf 23\n" );
***/
      guard_prf_res=get_test_prf(w);
      kil(w);
    } else if( op==BGETHYP_sym ){                    
/*  getting genuine hypos.  */
/***
printf ( "guard_prf 24\n" );
***/
      guard_prf_res=gethyp_test_prf(p,n,w);
      kil(w);
    } else if( op==BGETALLHYP_sym ){                 
/*  getting all hypos.  */
/***
printf ( "guard_prf 25\n" );
***/
      guard_prf_res=getallhyp_test_prf(p,n,w);
      kil(w);
    } else if( op==BSEARCH_sym ){                    
/*  Searching in a list  */
/***
printf ( "guard_prf 26\n" );
***/
      guard_prf_res=search_test_prf(w);
      kil(w);
    } else if( op==BSPAREMEM_sym ){    
/*  Getting Spare Memory Percentage  */
/***
printf ( "guard_prf 27\n" );
***/
      guard_prf_res=spare_mem_test_prf(w);
      kil(w);
    } else if( op==BSETFWDPRF_sym  ){
/*  Setting max_fwd_ctr_auto_prf  */
/***
printf ( "guard_prf 28\n" );
***/
      guard_prf_res=test_set_fwd_prf(w);
      kil(w);
    } else {
      psh(li,w);
/***
printf ( "guard_prf 29\n" );
***/
      guard_prf_res=TRUE;
    }
/***
printf ( "guard_prf_res = %d\n", guard_prf_res );
***/
  ; return guard_prf_res;
  }

              
/*  TENTATIVE GOAL FORMULA ALREADY ; PARENT GOALS  */
  
  already_frm_prf(p,n,f)
  {register int m,g,already_frm_prf_res ;
    xst_asc_nod(p,n,m,g,eql_spe_frm(f,frm_gol(g))==TRUE,
                                  already_frm_prf_res=TRUE,
                                  already_frm_prf_res=FALSE)
  ; return already_frm_prf_res;
  }

                
/*  EXTERNAL 'NORMAL' RULE HANDLING   */
                
                
  cre_lst_gol_prf(p,li,n)
  {register int j,a,g,cre_lst_gol_prf_res ;
/***
printf ( ">>> cre_lst_gol_prf p %d li %d n %d len(li) %d\n",p,li,n,len(li) );
DAVE_print_frm_lst("cre_lst_gol_prf",li);
***/
    xst(li,j,a,already_frm_prf(p,n,a)==TRUE,
               cre_lst_gol_prf_res=FALSE,
               itr(li,j,a,g=cre_gol(a);cre_nod(g,n););
               cre_lst_gol_prf_res=TRUE);
    return cre_lst_gol_prf_res;
  }

/*
  ask_rul_prf_func(rr)
  {register int ask_rul_prf_res ;
    ask_rul_prf_res=TRUE;
    if( auto_prf==FALSE ){
      str_buf [ 0 ] = '\0';
      write_nam_the(the_rul(rr));
      strcat ( str_buf, ".");
      write_nat(num_rul(rr));
      strcat ( str_buf, "\n\n");
      write_spe_ver_rul(rr);
      strcat ( str_buf, "\n\n\nApply ");
      write_nam_the(the_rul(rr));
      strcat ( str_buf, ".");
      write_nat(num_rul(rr));
      strcat ( str_buf, "?");
      if( motif_yes_no==NO ){
        ask_rul_prf_res=FALSE;
      }
    }
    return ask_rul_prf_res;
  }
*/

  ask_rul_prf(rr)
  {
/***
printf ( "ask_rul_prf (%d) from_applicable_rr %d auto_prf %d\n", rr, from_applicable_rr, auto_prf );
***/
    if ( from_applicable_rr ) {
      test_nrm_rul_prf1 ( TRUE );
    }
    else if( auto_prf==FALSE ){
      if ( from_applicable_rr ) return TRUE;

      str_buf [ 0 ] = '\0';
      app_write_rul ( rr );
      strcpy ( buf, str_buf );

      str_buf [ 0 ] = '\0';

      query_box_flag = query_box_ask_rul_prf;
      query_box_rule = rr;                     /* for cre_instant_rule */
/***
printf ( "ask_rul_prf - `query_box_rule = rr' query_box_rule=%d\n", query_box_rule );
***/
      ApplyRuleBox ( rr, 0 );
    }
    else {
      test_nrm_rul_prf1 ( TRUE );
    }
  }


  ask_eql_rul_prf_func(f,i,rr)
  {
    return TRUE;
  }


  ask_eql_rul_prf(f,i,rr)
  {register int k;

    if( auto_prf==FALSE ) {

      str_buf [ 0 ] = '\0';
/*
      write_spe_ver_rul(rr);
*/
      app_write_rul ( rr );
      strcpy ( buf, str_buf );

      str_buf [ 0 ] = '\0';
      k=cre_high_frm(f,i);
      reset_res(/* 6 */ 0);
      write_frm_res(k,/* 6 */ 0);
      kil(k);

      query_box_flag = query_box_ask_eql_rul_prf;
      query_box_rule = rr;                     /* for cre_instant_rule */
/***
printf ( "ask_eql_rul_prf - `query_box_rule = rr' query_box_rule=%d\n", query_box_rule );
***/
     ApplyRuleBox ( rr, 1 );
    }
    else {
      test3_eql_rul_prf1 ( TRUE );
    }
  }


  test_nrm_rul_prf_func(p,n,rr,app_rule_flag,prf_seq_breade)
  {register int la,li,j,a,b,i,pa ;
/***
printf ( "test_nrm_rul_prf_func(p=%d,n=%d,rr=%d,app_rule_flag=%d,prf_seq_breade=%d)\n", p,n,rr,app_rule_flag,prf_seq_breade );
***/
    la=ant_rul(rr);
    li=cre(len(la));
      nxst(la,j,a,guard_prf(p,n,a,li, /* app_rule_flag = */ app_rule_flag, /* prf_seq_breade = */ prf_seq_breade )==FALSE,
                  b=FALSE,
                  if( /* ask_rul_prf_func(rr)== */ TRUE ){
                    b=cre_lst_gol_prf(p,li,n);
                  } else {
                    b=FALSE
                 ;});
    if( b==FALSE ){
      itr(li,i,pa,kil(pa));
    }
    kil(li);
    return b;
  }


int  test_nrm_rul_prf_p;
int  test_nrm_rul_prf_n;
int  test_nrm_rul_prf_li;

test_nrm_rul_prf ( p, n, rr, app_rule_flag )
{
  register int la, j, b, a;

		/***

		comes through here (from test_rul_prf) for
		the application of an applicable rule, when
		app_rule_flag = 0 ....

		... also for the first part of single step
		(from test_rul_prf) when app_rule_flag = 1

		***/

/***
printf ( "test_nrm_rul_prf (%d %d %d)\n", p, n, rr );
***/
/***
printf ( " --- test_nrm_rul_prf\n --- " );
DAVE_print_rule_nl(rr);
***/
/***
printf ( "test_nrm_rul_prf: app_rule_flag=%d\n", app_rule_flag );
***/
  test_nrm_rul_prf_p = p;
  test_nrm_rul_prf_n = n;
  la=ant_rul(rr);
  test_nrm_rul_prf_li=cre(len(la));
  j = 1;
  b = 1;
  while ( ( j <= len ( la ) ) && b ) {
    a = val ( la, j );
    /***
    check all guards true
    ***/
    if ( guard_prf(run_man_prf_p,run_man_prf_i,a,test_nrm_rul_prf_li, app_rule_flag, /* prf_seq_breade = */ 0 ) ) {
      j++;
    }
    else {
      b = 0;
    }
  }
  if   ( b ) ask_rul_prf ( rr );
  else       test_nrm_rul_prf1 ( FALSE );
}

test_nrm_rul_prf1 ( b )  /* return from ask_rul_prf */
int b;
{
  register int success, pa, i;
/***
printf ( "test_nrm_rul_prf1 (%d)\n", b );
***/
  if ( b == TRUE ) {
    success = cre_lst_gol_prf(test_nrm_rul_prf_p,test_nrm_rul_prf_li,test_nrm_rul_prf_n);
  }
  else {
    success = FALSE;
  }
  if ( success == FALSE ) {
    itr(test_nrm_rul_prf_li,i,pa,kil(pa));
  }
  kil(test_nrm_rul_prf_li);
  test_rul_prf1 ( success );
}
  
              
/*   EXTERNAL REWRITING RULE HANDLING   */
       
       
  
/*  Obtain left-most sub_formula of goal that matches the left hand side of the  */
  
/*  rewriting rule; expand the antecedents (if any) of the rule (together     */
  
/*  with the testing of the guards); if these expansions are successful then */
  
/*  expand the right hand side of the rule && put this expansion in the     */
  
/*  right place in the old goal to form the new goal; test whether the new   */
  
/*  goal && the expanded antecedents are genuinely new; if not so, try next */
  
/*  sub_formula in goal, etc ...  */
  
  
  clean_prf(li)
  {register int ii,pa ;
    itr(li,ii,pa,kil(pa));
    clr(li);
  }

  test3_eql_rul_prf_func(f,i,rr,li,p,n)
  {register int test3_eql_rul_prf_res ;
    if( ask_eql_rul_prf_func(f,i,rr)==FALSE ){
/*
printf ( "%d", li );
print_seq_info("pre clean_prf");
*/
      clean_prf(li);
/*
print_seq_info("post clean_prf");
*/
      test3_eql_rul_prf_res=FALSE;
    } else if( cre_lst_gol_prf(p,li,n)==TRUE ){
/***
printf ( "\ntest3_eql_rul_prf_func %d\n", i );
printf ( "1 pssubrr [ n=%d ] = i=%d\n", n, i );
***/
      pssubrr [ n ] = i;

      test3_eql_rul_prf_res=TRUE;
    } else {
      clean_prf(li);
      test3_eql_rul_prf_res=FALSE ;
    }
    return test3_eql_rul_prf_res;
  }

int test3_eql_rul_prf_li;
int test3_eql_rul_prf_p;
int test3_eql_rul_prf_n;

  test3_eql_rul_prf(f,i,rr,li,p,n)
  {
/***
printf ( "test3_eql_rul_prf\n" );
***/
/***
str_buf [ 0 ] = '\0';
write_frm_res ( f, 0 );
printf ( "  - - - - test3_eql_rul_prf formula :\n  |%s|\n", str_buf );
***/
    test3_eql_rul_prf_li = li;
    test3_eql_rul_prf_p = p;
    test3_eql_rul_prf_n = n;
    seq_sub_rr_i = i;
    ask_eql_rul_prf(f,i,rr);
  }

test3_eql_rul_prf1 ( b ) /* from ask_eql_rul_prf */
{
/***
printf ( "test3_eql_rul_prf1 ( %d ) end_of_tac_prf %d\n", b, end_of_tac_prf );
***/
/***
printf ( "test3_eql_rul_prf1\n" );
***/
  if ( b == FALSE ) {
/*
printf ( "%d", test3_eql_rul_prf_li );
print_seq_info("pre clean_prf");
*/
    seq_sub_rr_i = 0;
    clean_prf(test3_eql_rul_prf_li);
/*
print_seq_info("post clean_prf");
*/
    test2_eql_rul_prf1 ( FALSE );
  }
  else if ( cre_lst_gol_prf(test3_eql_rul_prf_p,test3_eql_rul_prf_li,test3_eql_rul_prf_n)==TRUE ) {
    test2_eql_rul_prf1 ( TRUE );
  }
  else {
    seq_sub_rr_i = 0;
    clean_prf(test3_eql_rul_prf_li);
    test2_eql_rul_prf1 ( FALSE );
  }
}

  is_fre_in_ant_prf(p,n,lv,a)
  {register int is_fre_in_ant_res ;
    if( is_bspec_sym(val_root_frm(a))==TRUE ){
      is_fre_in_ant_res=FALSE;
    } else {
      is_fre_in_ant_res=rec_fre_prf(p,n,lv,a,root_tree(a));
    }
    return is_fre_in_ant_res;
  }

  
/*  After testing the guards ( && thus possibly producing some
     new joker instanciations), it tests whether some quantified
     variables that are visible from the place of replacement are free 
     in some antecedent; if it is the case, the rule is not applied  */
     
  test2_eql_rul_prf_func(rr,p,n,la,f,i,c,lnod,li)
  {register int rp,s,ff,j,a,test2_eql_rul_prf_res   ,b,lv   ;
/*
print_seq_info ( "test2_eql_rul_prf_func 1" );
*/
    if( chk_tree(c,lnod,beg_tree(c,lnod),f,i,beg_tree(f,i))==TRUE ){
      if( ari_sym(val_tree(f,i))==0 ){
        b=father_is_idx_vrb_frm(f,i) 
/*  to avoid left of aaa$1 to match with aaa  */;
      } else {
        b=FALSE;
      };
      if( b==TRUE ){
        test2_eql_rul_prf_res=FALSE;
      } else if( len(la)!=0 ){
        nxst(la,j,a,guard_prf(p,n,a,li, /* app_rule_flag = */ 0, /* prf_seq_breade = */ 0 )==FALSE,
                    b=FALSE,
                    b=TRUE)
        if( b==TRUE ){
          lv=cre(5);
          get_asc_nod_vrb_frm(lv,f,i);
          if( len(lv)!=0 ){
/*
print_seq_info ( "test2_eql_rul_prf_func 2" );
*/
            nxst(li,j,a,is_fre_in_ant_prf(p,n,lv,a)==TRUE,
                        
/* rec_fre_prf(p,n,lv,a,root_tree(a)) */
              clean_prf(li);
              test2_eql_rul_prf_res=FALSE,
              
              rp=right_frm(c);
              s=prd_tree(rp);
              ff=cre_mod_tree(f,i,s);
              psh(li,ff);
              test2_eql_rul_prf_res=test3_eql_rul_prf_func(f,i,rr,li,p,n);
              kil(rp);
              kil(s)
              
            );
          }  /* if( len(lv)!=0 ) */
          else {
            rp=right_frm(c);
            s=prd_tree(rp);
            ff=cre_mod_tree(f,i,s);
            psh(li,ff);
            test2_eql_rul_prf_res=test3_eql_rul_prf_func(f,i,rr,li,p,n);
            kil(rp);
            kil(s);
          };
          kil(lv);
        } /* if ( b==TRUE) */
        else {
          clean_prf(li);
          test2_eql_rul_prf_res=FALSE;
        }
      } /* else if( len(la)!=0 ) */
      else {
        rp=right_frm(c);
        s=prd_tree(rp);
        ff=cre_mod_tree(f,i,s);
        psh(li,ff);
        test2_eql_rul_prf_res=test3_eql_rul_prf_func(f,i,rr,li,p,n);
        kil(rp);
        kil(s);
      }
    } /* if chk_tree .. */
    else {
      test2_eql_rul_prf_res=FALSE;
    };
    if( test2_eql_rul_prf_res==FALSE ){
      clr_chk_frm;
      clean_prf(li);
    }
  ; return test2_eql_rul_prf_res;
  }





int test_eql_rul_prf_p;
int test_eql_rul_prf_n;
int test_eql_rul_prf_r;
int test_eql_rul_prf_f;
int test_eql_rul_prf_c;
int test_eql_rul_prf_lnod;
int test_eql_rul_prf_op;
int test_eql_rul_prf_li;
int test_eql_rul_prf_la;
int test_eql_rul_prf_i;
int test_eql_rul_prf_j;
int test_eql_rul_prf_rp;
int test_eql_rul_prf_s;
int test_eql_rul_prf_lv;

  test2_eql_rul_prf (rr,p,n,la,f,i,c,lnod,li)
  {register int rp,s,ff,j,a,b,lv;
/***
printf ( "test2_eql_rul_prf ( %d %d %d %d %d %d %d %d %d \n", rr,p,n,la,f,i,c,lnod,li );
***/
/*
print_seq_info ( "test2_eql_rul_prf 1" );
*/
/***
printf ( "test2_eql_rul_prf\n" );
***/
    test_eql_rul_prf_lv = 0;
    test_eql_rul_prf_li = li;
    if( chk_tree(c,lnod,beg_tree(c,lnod),f,i,beg_tree(f,i))==TRUE ){
      if( ari_sym(val_tree(f,i))==0 ){
        b=father_is_idx_vrb_frm(f,i) 
/*  to avoid left of aaa$1 to match with aaa  */;
      } else {
        b=FALSE;
      }
      if( b==TRUE ){
        test2_eql_rul_prf2 ( FALSE );
      }
      else if( len(la)!=0 ){
        nxst(la,j,a,guard_prf(p,n,a,li, /* app_rule_flag = */ 0, /* prf_seq_breade = */ 0 )==FALSE,
                    b=FALSE,
                    b=TRUE)
        if( b==TRUE ){
          lv=cre(5);
          test_eql_rul_prf_lv = lv;
          get_asc_nod_vrb_frm(lv,f,i);
          if( len(lv)!=0 ){
/*
print_seq_info ( "test2_eql_rul_prf 1" );
*/
             j =1;
             while( j <= len ( li ) ) {
               a = val ( li, j );
               if ( is_fre_in_ant_prf(p,n,lv,a)==TRUE  ) {   
                 clean_prf(li);
                 j = len ( li ) + 2;
	       }
               else {
                 j++;
	       }
	     }
             if( j == len( li ) + 1 ) {  
               rp=right_frm(c);
               s=prd_tree(rp);
               ff=cre_mod_tree(f,i,s);
/***
str_buf [ 0 ] = '\0';
write_frm_res ( ff, 0 );
printf ( "  - - - - 1 :\n  |%s|\n", str_buf );
***/
               psh(li,ff);
               test_eql_rul_prf_rp = rp;
               test_eql_rul_prf_s = s;
/***
printf ( " LLLLL test3_eql_rul_prf 1\n" );
***/
               test3_eql_rul_prf(f,i,rr,li,p,n);
	     }
             else {
               test2_eql_rul_prf2 ( FALSE );
	     }
          } /* if( len(lv)!=0 ) */
          else {
            rp=right_frm(c);
            s=prd_tree(rp);
            ff=cre_mod_tree(f,i,s);
/***
str_buf [ 0 ] = '\0';
write_frm_res ( ff, 0 );
printf ( "  - - - - 2 :\n  |%s|\n", str_buf );
***/
            psh(li,ff);
            test_eql_rul_prf_rp = rp;
            test_eql_rul_prf_s = s;
/***
printf ( " LLLLL test3_eql_rul_prf 2\n" );
***/
            test3_eql_rul_prf(f,i,rr,li,p,n);
          }
        } /* if( b==TRUE ) */
        else {
          clean_prf ( li );
          test2_eql_rul_prf2 ( FALSE );
        }
      } /* else if( len(la)!=0 ) */
      else {
        rp=right_frm(c);
        s=prd_tree(rp);
        ff=cre_mod_tree(f,i,s);
/***
str_buf [ 0 ] = '\0';
write_frm_res ( ff, 0 );
printf ( "  - - - - - - - - 3 :\n  |%s|\n", str_buf );
***/
/***
printf ( "  - - - - - - - - val_tree(f,i) :%d\n", val_tree(f,i) );
***/
        psh(li,ff);
        test_eql_rul_prf_rp = rp;
        test_eql_rul_prf_s = s;
/***
printf ( " LLLLL test3_eql_rul_prf 2\n" );
***/
        test3_eql_rul_prf(f,i,rr,li,p,n);
      }
    } /* if( chk_tree ... */
    else {
      test2_eql_rul_prf2 ( FALSE );
    }
  }


test2_eql_rul_prf1 ( b ) /* from test3_eql_rul_prf */
{
/***
printf ( "test2_eql_rul_prf1 ( %d ) end_of_tac_prf %d \n", b, end_of_tac_prf );
***/
  kil ( test_eql_rul_prf_rp );
  kil ( test_eql_rul_prf_s );
/***
print_live_seq( "LLLLL000" );
printf ( "test_eql_rul_prf_lv %d - ", test_eql_rul_prf_lv );
***/
  if ( test_eql_rul_prf_lv ) {
    kil ( test_eql_rul_prf_lv );
  }
/***
print_live_seq( "LLLLL001" );
***/
  test2_eql_rul_prf2 ( b );
}

test2_eql_rul_prf2 ( b )
int b;
{
/***
printf ( "test2_eql_rul_prf2 ( %d ) end_of_tac_prf %d\n", b, end_of_tac_prf );
***/
  if ( b == FALSE ) {
    clr_chk_frm;
    clean_prf ( test_eql_rul_prf_li );
  }
  test_eql_rul_prf2 ( b );
}



  test_eql_rul_prf_func(p,n,r,f)
  {register int c,lnod,op,li,la,i,v,test_eql_rul_prf_res ;
    c=cns_rul(r);
    lnod=left_node_frm(c);
    op=val_tree(c,lnod);
    if( (is_in_frm(f,op)==TRUE) || (letter_sym(op)==TRUE) || (op==JK2_sym) || (op==JK1_sym) ){
      la=ant_rul(r);
      li=cre(len(la));
      nxst_sub_frm(f,i,v,test2_eql_rul_prf_func(r,p,n,la,f,i,c,lnod,li)==TRUE,
                         test_eql_rul_prf_res=TRUE,
                         test_eql_rul_prf_res=FALSE);
      kil(li);
    } else {
      test_eql_rul_prf_res=FALSE;
    }
    return test_eql_rul_prf_res;
  }





/*
  test_eql_rul_prf(p,n,r,f)
  {register int c,lnod,op,li,la,i,v,test_eql_rul_prf_res ;
    c=cns_rul(r);
    lnod=left_node_frm(c);
    op=val_tree(c,lnod);
    if( (is_in_frm(f,op)==TRUE) || (letter_sym(op)==TRUE) || (op==JK2_sym) || (op==JK1_sym) ){
      la=ant_rul(r);
      li=cre(len(la));
      nxst_sub_frm(f,i,v,test2_eql_rul_prf(r,p,n,la,f,i,c,lnod,li)==TRUE,
                         test_eql_rul_prf_res=TRUE,
                         test_eql_rul_prf_res=FALSE);
      kil(li);
    } else {
      test_eql_rul_prf_res=FALSE;
    }
    test_rul_prf1 ( test_eql_rul_prf_res );
  }
*/

  test_eql_rul_prf(p,n,r,f)
/*
  p the top level node
  n the cur level node
  r is the rule
  f ?
*/
  {
/***
printf ( "test_eql_rul_prf p %d n %d r %d f %d\n", p,n,r,f );
***/
/***
str_buf [ 0 ] = '\0';
write_frm_res ( f, 0 );
printf ( "  - - - - test_eql_rul_prf formula :\n  |%s|\n", str_buf );
***/
    test_eql_rul_prf_p = p;
    test_eql_rul_prf_n = n;
    test_eql_rul_prf_r = r;
    test_eql_rul_prf_f = f;

    test_eql_rul_prf_c=cns_rul(test_eql_rul_prf_r);
    test_eql_rul_prf_lnod=left_node_frm(test_eql_rul_prf_c);
    test_eql_rul_prf_op=val_tree(test_eql_rul_prf_c,test_eql_rul_prf_lnod);
    if ( ( is_in_frm(test_eql_rul_prf_f,test_eql_rul_prf_op)==TRUE) ||
         (letter_sym(test_eql_rul_prf_op)==TRUE)                    ||
         (test_eql_rul_prf_op==JK2_sym)                             ||
         (test_eql_rul_prf_op==JK1_sym)                                ) {
/***
printf ( "    test_eql_rul_prf branch1\n" );
***/
      test_eql_rul_prf_la=ant_rul(test_eql_rul_prf_r);
      test_eql_rul_prf_li=cre(len(test_eql_rul_prf_la));
      test_eql_rul_prf_i = 1;
      test_eql_rul_prf1 ();
    }
    else {
/***
printf ( "    test_eql_rul_prf branch2\n" );
***/
      test_eql_rul_prf4 ( FALSE );
    }
  }

test_eql_rul_prf1 ()
{
/***
printf ( "test_eql_rul_prf1  - %d %d/%d %d end_of_tac_prf %d\n", test_eql_rul_prf_r, test_eql_rul_prf_i, len ( test_eql_rul_prf_f ), test_eql_rul_prf_li, end_of_tac_prf );
print_seq_info ( "test_eql_rul_prf1" );
***/
  if ( test_eql_rul_prf_i <= len ( test_eql_rul_prf_f ) ) {
/***
printf ( "    test_eql_rul_prf1 branch1\n" );
***/
    test2_eql_rul_prf ( test_eql_rul_prf_r,
                        test_eql_rul_prf_p,
                        test_eql_rul_prf_n,
                        test_eql_rul_prf_la,
                        test_eql_rul_prf_f,
                        test_eql_rul_prf_i,
                        test_eql_rul_prf_c,
                        test_eql_rul_prf_lnod,
                        test_eql_rul_prf_li    );
  }
  else {
/***
printf ( "    test_eql_rul_prf1 branch2\n" );
***/
    test_eql_rul_prf3 ( FALSE );
  }
}

test_eql_rul_prf2 ( b ) /* from test2_eql_rul_prf */
{
/***
printf ( "test_eql_rul_prf2 ( %d ) end_of_tac_prf %d\n", b, end_of_tac_prf );
***/
  if ( b ) {
    test_eql_rul_prf3 ( TRUE );
  }
  else {
    test_eql_rul_prf_i++;
    test_eql_rul_prf1 ();
  } 
}

test_eql_rul_prf3 ( b )
int b;
{
/***
printf ( "test_eql_rul_prf3 ( %d ) end_of_tac_prf %d\n", b, end_of_tac_prf );
***/
  kil ( test_eql_rul_prf_li );
  test_rul_prf1 ( b );
}

test_eql_rul_prf4 ( b )
int b;
{
/***
printf ( "test_eql_rul_prf4 ( %d )\n", b );
***/
  test_rul_prf1 ( b );
}






                               
                
/*   EXTERNAL RULE HANDLING   */
            
            
  test_rul_prf_func(p,n,r,rr,frm)
  {register int c,op,test_rul_prf_res ;
/***
printf ( "KKKKK" );
print_seq_info ( "test_rul_prf_func" );
***/
/***
printf ( "test_rul_prf_func\n" );
***/
    if( (r!=rr) && (val_sts_rul(rr)==on_rul) ){
      c=cns_rul(rr);
      op=val_root_frm(c);
      clr_chk_frm;
      if( op==MAC_sym ){   /* rewrite rule */
        test_rul_prf_res=test_eql_rul_prf_func(p,n,rr,frm);
      } else if( chk_frm(c,frm)==TRUE ){
        test_rul_prf_res=test_nrm_rul_prf_func(p,n,rr, /* app_rule_flag = */ 0, /* prf_seq_breade = */ 0 );
      } else {
        test_rul_prf_res=FALSE;
      };
      kil_content_input_prf;
    } else {
      test_rul_prf_res=FALSE;
    }
    return test_rul_prf_res;
  }




  test_rul_prf(p,n,r,rr,frm,app_rule_flag)
  {register int c,op,test_rul_prf_res ;
/***
printf ( "test_rul_prf: app_rule_flag=%d\n", app_rule_flag );
***/
/***
printf ( " --- test_rul_prf\n --- " );
DAVE_print_rule_nl(r);
DAVE_print_rule_nl(rr);
DAVE_print_frm_sgl("test_rul_prf",frm);
***/
/***
printf ( "DDDDD\n" );
print_seq_info ( "test_rul_prf" );
***/
    if( (r!=rr) && (val_sts_rul(rr)==on_rul) ){
/***
printf ( "  test_rul_prf branch1\n" );
***/
      c=cns_rul(rr);
      op=val_root_frm(c);
      clr_chk_frm;
      if( op==MAC_sym ){   /* rewrite rule */
/***
printf ( "      test_rul_prf branch1a\n" );
***/
        test_eql_rul_prf (p,n,rr,frm);
      } else if( chk_frm(c,frm)==TRUE ){
/***
printf ( "      test_rul_prf branch1b\n" );
***/
        test_nrm_rul_prf (p,n,rr,app_rule_flag);
      } else {
/***
printf ( "      test_rul_prf branch1c\n" );
***/
        test_rul_prf1 ( FALSE );
      }
    }
    else {
/***
printf ( "  test_rul_prf branch2\n" );
***/
      itp_test_rul_prf2 ( FALSE );
    }
  }

test_rul_prf1 ( b )
int b;
{
/***
printf ( "test_rul_prf1 ( %d ) end_of_tac_prf %d\n", b, end_of_tac_prf );
***/
  kil_content_input_prf;
  itp_test_rul_prf2 ( b );
}




/*  HYP PROOF HANDLING  */
         
/*****************************************************************/

  ask_hyp_prf_func(hf)               /* called during loop until quota */
  {register int ask_hyp_prf_res ;
/***
printf ( "ask_hyp_prf_func(hf=%d) auto_prf=%d\n", hf, auto_prf ); 
***/
    ask_hyp_prf_res=TRUE;
    return ask_hyp_prf_res;
  }

  ask_hyp_prf(hf)                   /* called during single step & rebuild */
  {
/***
printf ( "ask_hyp_prf(hf=%d) auto_prf=%d\n", hf, auto_prf ); 
***/
    if( auto_prf==FALSE ){
      str_buf [ 0 ] = '\0';
/*
      strcpy ( str_buf, "HYPOTHESIS\n\n");
*/
      reset_res(/* 6 */ 0);
      write_frm_res(hf,/* 6 */ 0);
      strcpy ( buf, str_buf );

      str_buf [ 0 ] = '\0';

      query_box_flag = query_box_ask_hyp_prf;
      query_box_rule = (-hf);                     /* for cre_instant_hyp */
/***
printf ( "ask_hyp_prf - `query_box_rule = -hf' query_box_rule=%d\n", query_box_rule );
***/
      ApplyRuleBox ( -1, 0 );
    }
    else {  /* auto_prf==TRUE */
      switch ( ask_hyp_ret ) {
      case ask_hyp_test_hyp1 :
/***
printf ( "ask_hyp_test_hyp1\n" );
***/
        test_hyp_prf2 ( TRUE );
        break;
      case ask_hyp_test_hyp2 :
/***
printf ( "ask_hyp_test_hyp2\n" );
***/
        test_hyp_prf1 ( TRUE );
        break;
      case ask_hyp_test_imp_hyp1 :
/***
printf ( "ask_hyp_test_imp_hyp1\n" );
***/
        test_imp_hyp_prf1 ( TRUE );
        break;
      case ask_hyp_test_imp_hyp2 :
/***
printf ( "ask_hyp_test_imp_hyp2\n" );
***/
        test_imp_hyp_prf2 ( TRUE );
        break;
      }      
    }
  }

/*****************************************************************/

  ask_eql_hyp_prf_func(f,i,hf) 
  {
/***
printf ( "ask_eql_hyp_prf_func(%d,%d,%d)\n", f,i,hf ); 
***/
    return TRUE;
  }

  ask_eql_hyp_prf(f,i,hf) 
  {register int k;
/***
printf ( "ask_eql_hyp_prf(%d,%d,%d) - auto_prf %d\n", f,i,hf,auto_prf ); 
***/
    if( auto_prf==FALSE ){
      str_buf [ 0 ] = '\0';
      reset_res(/* 6 */ 0);
      write_frm_res(hf,/* 6 */ 0);
      strcpy ( buf, str_buf );

      str_buf [ 0 ] = '\0';
      k=cre_high_frm(f,i);
      reset_res(/* 6 */ 0);
      write_frm_res(k,/* 6 */ 0);
      kil(k);

      query_box_flag = query_box_ask_eql_hyp_prf;
      query_box_rule = (-hf);                     /* for cre_instant_hyp */
/***
printf ( "ask_eql_hyp_prf - `query_box_rule = -hf' query_box_rule=%d\n", query_box_rule );
***/
      ApplyRuleBox ( -1, 1 );
    }
    else {  /* auto_prf==TRUE */
      switch ( ask_eql_hyp_ret ) {
      case ask_eql_hyp_test2_eql :
        test2_eql_hyp_prf1 ( TRUE );
        break;
      case ask_eql_hyp_test3_eql1 :
        test3_eql_hyp_prf2 ( TRUE );
        break;
      case ask_eql_hyp_test3_eql2 :
        test3_eql_hyp_prf3 ( TRUE );
        break;
      case ask_eql_hyp_test3_unv :
        test3_unv_eql_hyp_prf2 ( TRUE );
        break;
      case ask_eql_hyp_test2_unv :
        test2_unv_eql_hyp_prf2 ( TRUE );
        break;
      }      
    }
  }

/*****************************************************************/

int mon2_hyp_prf_s;
int mon2_hyp_prf_i;
int mon2_hyp_prf_p;
int mon2_hyp_prf_n;
int mon2_hyp_prf_f;
int mon2_hyp_prf_t;
int mon2_hyp_prf_h;
int mon2_hyp_prf_g;


  test3_eql_hyp_prf_func(p,n,hf,lnod,rnod,f,i)
  {register int rp,ff,gl,gg,s,j,v,b,test3_eql_hyp_prf_res,lv ;
/***
printf ( "test3_eql_hyp_prf_func(%d,%d,%d,%d,%d,%d,%d)\n", p,n,hf,lnod,rnod,f,i );
***/
    if( eql_tree(hf,lnod,f,i)==TRUE ){
      if( ari_sym(val_tree(f,i))==0 ){
        b=father_is_idx_vrb_frm(f,i) 
/*  to avoid left of aaa$1 to match with aaa  */;
      } else {
        b=FALSE;
      };
      if( b==TRUE ){
        test3_eql_hyp_prf_res=FALSE;
      } else {
        rp=cre_cop_tree(hf,rnod);
        ff=cre_mod_tree(f,i,rp);
        kil(rp);
        
        lv=cre(5);
        get_asc_nod_vrb_frm(lv,f,i);
        if( rec_fre_prf(p,n,lv,hf,root_tree(hf)) ==TRUE ){
          kil(ff);
          test3_eql_hyp_prf_res=FALSE;
        } else if( already_frm_prf(p,n,ff)==TRUE ){
          kil(ff);
          test3_eql_hyp_prf_res=FALSE;
        } else {
          gg=left_frm(hf);
          if( val_root_frm(gg)==AND_sym ){
            s=dec_frm(gg,AND_sym);
            xst(s,j,v,already_frm_prf(p,n,v)==TRUE,b=FALSE,b=TRUE);
            if( b==TRUE ){
              b=ask_eql_hyp_prf_func(f,i,hf);
            }
            if( b==TRUE ){

/***
printf ( "\ntest3_eql_hyp_prf_func i=%d j=%d\n", i, j );
printf ( "i=%d mon2_hyp_prf_i=%d\n", i, mon2_hyp_prf_i );
printf ( "2 pssubrr [ %d ] = %d\n", n, (hyp_mod_val*mon2_hyp_prf_i)+i );
***/
              if ( i < hyp_mod_val ) 
                pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+i);
              else
                pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+0);

              itr(s,j,v,gl=cre_gol(v);cre_nod(gl,n));
              gl=cre_gol(ff);
              cre_nod(gl,n);
              test3_eql_hyp_prf_res=TRUE;
            } else {
              itr(s,j,v,kil(v));
              kil(ff);
              test3_eql_hyp_prf_res=FALSE;
            };
            kil(s);
            kil(gg);
          } else {
            if( already_frm_prf(p,n,gg)==TRUE ){
              test3_eql_hyp_prf_res=FALSE;
              kil(ff);
              kil(gg);
            } else if( ask_eql_hyp_prf_func(f,i,hf)==FALSE ){
              test3_eql_hyp_prf_res=FALSE;
              kil(ff);
              kil(gg);
            } else {

/***
printf ( "\ntest3_eql_hyp_prf_func i=%d j=%d\n", i, j );
printf ( "i=%d mon2_hyp_prf_i=%d\n", i, mon2_hyp_prf_i );
printf ( "3 pssubrr [ %d ] = %d\n", n, (hyp_mod_val*mon2_hyp_prf_i)+i );
***/
              if ( i < hyp_mod_val ) 
                pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+i);
              else
                pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+0);

              test3_eql_hyp_prf_res=TRUE;
              gl=cre_gol(gg);
              cre_nod(gl,n);
              gl=cre_gol(ff);
              cre_nod(gl,n);
            }
          }
        }
        kil(lv);
      }
    } else {
      test3_eql_hyp_prf_res=FALSE;
    }
    return test3_eql_hyp_prf_res;
  }

/*****************/

int test3_eql_hyp_prf_lv;
int test3_eql_hyp_prf_ff;
int test3_eql_hyp_prf_s;
int test3_eql_hyp_prf_gg;
int test3_eql_hyp_prf_n;

  test3_eql_hyp_prf(p,n,hf,lnod,rnod,f,i)
  {register int rp,j,v,b;
/***
printf ( "test3_eql_hyp_prf(%d,%d,%d,%d,%d,%d,%d)\n", p,n,hf,lnod,rnod,f,i );
***/
    test3_eql_hyp_prf_n = n;

    if( eql_tree(hf,lnod,f,i)==TRUE ){
      if( ari_sym(val_tree(f,i))==0 ){
        b=father_is_idx_vrb_frm(f,i) 
/*  to avoid left of aaa$1 to match with aaa  */;
      } else {
        b=FALSE;
      };
      if( b==TRUE ){
        /* test3_eql_hyp_prf1(FALSE); */ test_imp_hyp_prf4 ( FALSE );
      }
      else {
        rp=cre_cop_tree(hf,rnod);
        test3_eql_hyp_prf_ff=cre_mod_tree(f,i,rp);
        kil(rp);
        test3_eql_hyp_prf_lv=cre(5);
        get_asc_nod_vrb_frm(test3_eql_hyp_prf_lv,f,i);
        if( rec_fre_prf(p,n,test3_eql_hyp_prf_lv,hf,root_tree(hf)) ==TRUE ){
          kil(test3_eql_hyp_prf_ff);
          test3_eql_hyp_prf1(FALSE);
        } else if( already_frm_prf(p,n,test3_eql_hyp_prf_ff)==TRUE ){
          kil(test3_eql_hyp_prf_ff);
          test3_eql_hyp_prf1(FALSE);
        }
       else {
          test3_eql_hyp_prf_gg=left_frm(hf);
          if( val_root_frm(test3_eql_hyp_prf_gg)==AND_sym ){
            test3_eql_hyp_prf_s=dec_frm(test3_eql_hyp_prf_gg,AND_sym);
            xst(test3_eql_hyp_prf_s,j,v,already_frm_prf(p,n,v)==TRUE,b=FALSE,b=TRUE);
            if( b==TRUE ){
              ask_eql_hyp_ret = ask_eql_hyp_test3_eql1;
              ask_eql_hyp_prf(f,i,hf);
            } else {
              itr(test3_eql_hyp_prf_s,j,v,kil(v));
              kil(test3_eql_hyp_prf_ff);
              kil(test3_eql_hyp_prf_s);
              kil(test3_eql_hyp_prf_gg);
              test3_eql_hyp_prf1(FALSE);
            }
          }
          else {
            if( already_frm_prf(p,n,test3_eql_hyp_prf_gg)==TRUE ){
              kil(test3_eql_hyp_prf_ff);
              kil(test3_eql_hyp_prf_gg);
              test3_eql_hyp_prf1(FALSE);
            }
            else {
             ask_eql_hyp_ret = ask_eql_hyp_test3_eql2;
             ask_eql_hyp_prf(f,i,hf);
	    }
          }
        }
      }
    }
    else {
      /* test3_eql_hyp_prf1(FALSE); */ test_imp_hyp_prf4 ( FALSE );
    }
  }

test3_eql_hyp_prf1 ( b )
{
/***
printf ( "test3_eql_hyp_prf1(%d)\n", b );
***/
  kil(test3_eql_hyp_prf_lv);
  test_imp_hyp_prf4 ( b );
}

test3_eql_hyp_prf2 ( b ) /* from ask_eql_hyp_prf 1 */
{
  register int gl,j,v;
/***
printf ( "test3_eql_hyp_prf2(%d)\n", b );
***/
  if( b==TRUE ){
    itr(test3_eql_hyp_prf_s,j,v,gl=cre_gol(v);cre_nod(gl,test3_eql_hyp_prf_n));
    gl=cre_gol(test3_eql_hyp_prf_ff);
    cre_nod(gl,test3_eql_hyp_prf_n);
    kil(test3_eql_hyp_prf_s);
    kil(test3_eql_hyp_prf_gg);
    test3_eql_hyp_prf1(TRUE);
  } else {
    itr(test3_eql_hyp_prf_s,j,v,kil(v));
    kil(test3_eql_hyp_prf_ff);
    kil(test3_eql_hyp_prf_s);
    kil(test3_eql_hyp_prf_gg);
    test3_eql_hyp_prf1(FALSE);
  }
}

test3_eql_hyp_prf3 ( b ) /* from ask_eql_hyp_prf 2 */
{
  register int gl;
/***
printf ( "test3_eql_hyp_prf3(%d)\n", b );
***/
  if( b==FALSE ){
    kil(test3_eql_hyp_prf_ff);
    kil(test3_eql_hyp_prf_gg);
    test3_eql_hyp_prf1(FALSE);
  } else {
    gl=cre_gol(test3_eql_hyp_prf_gg);
    cre_nod(gl,test3_eql_hyp_prf_n);
    gl=cre_gol(test3_eql_hyp_prf_ff);
    cre_nod(gl,test3_eql_hyp_prf_n);
    test3_eql_hyp_prf1(TRUE);
  }
}

/************************************************************/

  test2_eql_hyp_prf_func(p,n,hf,lnod,f,i)
  {register int rp,ff,gl,test2_eql_hyp_prf_res,lv,b ;
/***
printf ( "test2_eql_hyp_prf_func(%d,%d,%d,%d,%d,%d)\n", p,n,hf,lnod,f,i );
***/
    if( eql_tree(hf,lnod,f,i)==TRUE ){
      if( ari_sym(val_tree(f,i))==0 ){
        b=father_is_idx_vrb_frm(f,i) 
/*  to avoid left of aaa$1 to match with aaa  */;
      }
      else {
        b=FALSE;
      }
      if( b==TRUE ){
        test2_eql_hyp_prf_res=FALSE;
      } else {
        rp=right_frm(hf);
        ff=cre_mod_tree(f,i,rp);
        kil(rp);
        lv=cre(5);
        get_asc_nod_vrb_frm(lv,f,i);
        if( rec_fre_prf(p,n,lv,hf,root_tree(hf)) ==TRUE ){
          kil(ff);
          test2_eql_hyp_prf_res=FALSE;
        }
        else if( ask_eql_hyp_prf_func(f,i,hf)==FALSE ){
          kil(ff);
          test2_eql_hyp_prf_res=FALSE;
        }
        else if( already_frm_prf(p,n,ff)==TRUE ){
          kil(ff);
          test2_eql_hyp_prf_res=FALSE;
        }
        else {

/***
printf ( "\n\test2_eql_hyp_prf_func i=%d j=%d\n", i, j );
printf ( "i=%d mon2_hyp_prf_i=%d\n", i, mon2_hyp_prf_i );
printf ( "4 pssubrr [ n=%d ] = %d\n", n, (hyp_mod_val*mon2_hyp_prf_i)+i );
***/
          if ( i < hyp_mod_val ) 
            pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+i);
          else
            pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+0);

          gl=cre_gol(ff);
          cre_nod(gl,n);
          test2_eql_hyp_prf_res=TRUE;
        }
        kil(lv);
      }
    }
    else {
      test2_eql_hyp_prf_res=FALSE;
    }
    return test2_eql_hyp_prf_res;
  }

/*****************/

int test2_eql_hyp_prf_ff;
int test2_eql_hyp_prf_lv;
int test2_eql_hyp_prf_p;
int test2_eql_hyp_prf_n;

  test2_eql_hyp_prf(p,n,hf,lnod,f,i)
  {register int rp,b ;
/***
printf ( "test2_eql_hyp_prf(%d,%d,%d,%d,%d,%d)\n", p,n,hf,lnod,f,i );
***/
    test2_eql_hyp_prf_p = p;
    test2_eql_hyp_prf_n = n;
    if( eql_tree(hf,lnod,f,i)==TRUE ){
      if( ari_sym(val_tree(f,i))==0 ){
        b=father_is_idx_vrb_frm(f,i) 
/*  to avoid left of aaa$1 to match with aaa  */;
      }
      else {
        b=FALSE;
      }
      if( b==TRUE ) {
        test_eql_hyp_prf2(FALSE);
      }
      else {
        rp=right_frm(hf);
        test2_eql_hyp_prf_ff=cre_mod_tree(f,i,rp);
        kil(rp);
        test2_eql_hyp_prf_lv=cre(5);
        get_asc_nod_vrb_frm(test2_eql_hyp_prf_lv,f,i);
        if( rec_fre_prf(p,n,test2_eql_hyp_prf_lv,hf,root_tree(hf)) ==TRUE ){
          kil(test2_eql_hyp_prf_ff);
          kil(test2_eql_hyp_prf_lv);
          test_eql_hyp_prf2(FALSE);
        }
        else {
          ask_eql_hyp_ret = ask_eql_hyp_test2_eql;
          ask_eql_hyp_prf(f,i,hf);
        }
      }
    }
    else {
      test_eql_hyp_prf2(FALSE);
    }
  }

  test2_eql_hyp_prf1 ( b ) /* from ask_eql_hyp_prf */
  {
    register int gl;
/***
printf ( "test2_eql_hyp_prf1(%d)\n", b );
***/
    if ( b == FALSE ) {
      kil(test2_eql_hyp_prf_ff);
      kil(test2_eql_hyp_prf_lv);
      test_eql_hyp_prf2 ( FALSE );
    }
    else if ( already_frm_prf(test2_eql_hyp_prf_p,test2_eql_hyp_prf_n,test2_eql_hyp_prf_ff)==TRUE ) {
      kil(test2_eql_hyp_prf_ff);
      kil(test2_eql_hyp_prf_lv);
      test_eql_hyp_prf2 ( FALSE );
    }
    else {
      gl=cre_gol(test2_eql_hyp_prf_ff);
      cre_nod(gl,test2_eql_hyp_prf_n);
      kil(test2_eql_hyp_prf_lv);
      test_eql_hyp_prf2 ( TRUE );
    }
  }


/************************************************************/

  test_eql_hyp_prf_func(p,n,hf,f)
  {register int i,v,op,lnod,test_eql_hyp_prf_res ;
/***
printf ( "test_eql_hyp_prf_func(%d,%d,%d,%d)\n", p,n,hf,f );
***/
    lnod=left_node_frm(hf);
    op=val_tree(hf,lnod);
    if( is_in_frm(f,op)==TRUE ){
      nxst_sub_frm(f,i,v,test2_eql_hyp_prf_func(p,n,hf,lnod,f,i)==TRUE,
                        test_eql_hyp_prf_res=TRUE,
                        test_eql_hyp_prf_res=FALSE);
    } else {
      test_eql_hyp_prf_res=FALSE;
    }
    return test_eql_hyp_prf_res;
  }

/*****************/

int test_eql_hyp_prf_i;
int test_eql_hyp_prf_f;
int test_eql_hyp_prf_p;
int test_eql_hyp_prf_n;
int test_eql_hyp_prf_hf;
int test_eql_hyp_prf_f;
int test_eql_hyp_prf_lnod;

  test_eql_hyp_prf(p,n,hf,f)
  {
    register int op;
/***
printf ( "test_eql_hyp(%d,%d,%d,%d)\n", p,n,hf,f );
***/
    test_eql_hyp_prf_p = p;
    test_eql_hyp_prf_n = n;
    test_eql_hyp_prf_hf = hf;
    test_eql_hyp_prf_f = f;
    test_eql_hyp_prf_lnod=left_node_frm(test_eql_hyp_prf_hf);
    op=val_tree(test_eql_hyp_prf_hf,test_eql_hyp_prf_lnod);
    if( is_in_frm(test_eql_hyp_prf_f,op)==TRUE ){
      test_eql_hyp_prf_i = 1;
      test_eql_hyp_prf1 ();
    }
    else {
      test_hyp_prf1 ( FALSE );
    }
  }

test_eql_hyp_prf1 ()
{
/***
printf ( "test_eql_hyp_prf1\n" );
***/
  if ( test_eql_hyp_prf_i <= len ( test_eql_hyp_prf_f ) ) {
    test2_eql_hyp_prf(test_eql_hyp_prf_p,test_eql_hyp_prf_n,test_eql_hyp_prf_hf,test_eql_hyp_prf_lnod,test_eql_hyp_prf_f,test_eql_hyp_prf_i);
  }
  else {
    test_hyp_prf1 ( FALSE );
  }
}

test_eql_hyp_prf2 ( b ) /* from test2_eql_hyp_prf */
{
/***
printf ( "test_eql_hyp_prf2(%d)\n", b );
printf ( "test_eql_hyp_prf_i %d    ",test_eql_hyp_prf_i  );
printf ( "b => test_eql_hyp_prf_i %d)\n\n", test_eql_hyp_prf_i+1 );
***/
  if ( b == TRUE ) {
    test_hyp_prf1 ( TRUE );
  }
  else {
    test_eql_hyp_prf_i++;
    test_eql_hyp_prf1 ();
  }
}

/************************************************************/

  test_imp_hyp_prf_func(p,n,hf,f)
  {register int ff,gl,s,i,v,b,rn,op,lrn,rrn,op2,test_imp_hyp_prf_res ;
/***
printf ( "test_imp_hyp_prf_func(%d,%d,%d,%d)\n", p,n,hf,f );
***/
    if( eql_tree(hf,right_node_frm(hf),f,root_tree(f))==TRUE ){
      ff=left_frm(hf);
      if( val_root_frm(ff)==AND_sym ){
        s=dec_frm(ff,AND_sym);
        xst(s,i,v,already_frm_prf(p,n,v)==TRUE,b=FALSE,b=TRUE);
        if( b==TRUE ){
          b=ask_hyp_prf_func(hf);
        }
        if( b==TRUE ){
          if ( i < hyp_mod_val ) 
            pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+i);  /* Oct98 */
          else
            pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+0);  /* Oct98 */
/***
printf ( "\ntest_imp_hyp_prf_func\n" );
printf ( "5 pssubrr [ n=%d ] mon2_hyp_prf_i=%d i=%d (Oct98)\n", n, mon2_hyp_prf_i, i );
***/
          itr(s,i,v,gl=cre_gol(v);cre_nod(gl,n));
          test_imp_hyp_prf_res=TRUE;   /*****/
        }
        else {
          test_imp_hyp_prf_res=FALSE;
          itr(s,i,v,kil(v));
        }
        kil(s);
        kil(ff);
      }
      else {
        if( ask_hyp_prf_func(hf)==FALSE ){
          test_imp_hyp_prf_res=FALSE;
          kil(ff);
        }
        else if( already_frm_prf(p,n,ff)==TRUE ){
          test_imp_hyp_prf_res=FALSE;
          kil(ff);
        }
        else {
          test_imp_hyp_prf_res=TRUE;
          if ( i < hyp_mod_val ) 
            pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+i);  /* Oct98 */
          else
            pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+0);  /* Oct98 */
/***
printf ( "\ntest_imp_hyp_prf_func i=%d\n", i );
printf ( "6 pssubrr [ n=%d ] mon2_hyp_prf_i=%d 0 (Oct98)\n", n, mon2_hyp_prf_i );
***/
          gl=cre_gol(ff);
          cre_nod(gl,n);       /*****/
        }
      } 
    }
    else {
      rn=right_node_frm(hf);
      op=val_tree(hf,rn);
      if( (op==EQL_sym) || (op==EQV_sym) ){
        lrn=left_node_tree(hf,rn);
        rrn=right_node_tree(hf,rn);
        op2=val_tree(hf,lrn);
        if( is_in_frm(f,op2)==TRUE ){
        nxst_sub_frm(f,i,v,test3_eql_hyp_prf_func(p,n,hf,lrn,rrn,f,i)==TRUE,
                            test_imp_hyp_prf_res=TRUE,
                            test_imp_hyp_prf_res=FALSE);
        }
        else {
          test_imp_hyp_prf_res=FALSE;
        }
      }
      else { 
        test_imp_hyp_prf_res=FALSE;
      }
    }
    return test_imp_hyp_prf_res;
  }

/*****************/

int test_imp_hyp_prf_ff;
int test_imp_hyp_prf_s;
int test_imp_hyp_prf_p;
int test_imp_hyp_prf_n;
int test_imp_hyp_prf_f;
int test_imp_hyp_prf_hf;
int test_imp_hyp_prf_lrn;
int test_imp_hyp_prf_rrn;
int test_imp_hyp_prf_i;

  test_imp_hyp_prf(p,n,hf,f)
  {register int i,v,b,rn,op,op2;
/***
printf ( "test_imp_hyp_prf(%d,%d,%d,%d)\n", p,n,hf,f );
***/
    test_imp_hyp_prf_f = f;
    test_imp_hyp_prf_p = p;
    test_imp_hyp_prf_n = n;
    test_imp_hyp_prf_hf = hf;

    test_imp_hyp_prf_ff = 0;
    test_imp_hyp_prf_s = 0;

    if( eql_tree(hf,right_node_frm(hf),f,root_tree(f))==TRUE ){
      test_imp_hyp_prf_ff=left_frm(hf);
      if( val_root_frm(test_imp_hyp_prf_ff)==AND_sym ){
        test_imp_hyp_prf_s=dec_frm(test_imp_hyp_prf_ff,AND_sym);
        xst(test_imp_hyp_prf_s,i,v,already_frm_prf(p,n,v)==TRUE,b=FALSE,b=TRUE);
        if( b==TRUE ){
          ask_hyp_ret = ask_hyp_test_imp_hyp1;
          ask_hyp_prf(hf);
        }
        else {
          kil(test_imp_hyp_prf_s);
          kil(test_imp_hyp_prf_ff);
          test_hyp_prf1 ( FALSE );
	}
      }
      else {
        ask_hyp_ret = ask_hyp_test_imp_hyp2;
        ask_hyp_prf(hf);
      } 
    }
    else {
      rn=right_node_frm(hf);
      op=val_tree(hf,rn);
      if( (op==EQL_sym) || (op==EQV_sym) ){
        test_imp_hyp_prf_lrn=left_node_tree(hf,rn);
        test_imp_hyp_prf_rrn=right_node_tree(hf,rn);
        op2=val_tree(hf,test_imp_hyp_prf_lrn);
        if( is_in_frm(f,op2)==TRUE ){
          test_imp_hyp_prf_i = 1;
          test_imp_hyp_prf3 ();
        }
        else {
          test_hyp_prf1 ( FALSE );
        }
      }
      else { 
        test_hyp_prf1 ( FALSE );
      }
    }
  }

test_imp_hyp_prf1 ( b ) /* from ask_hyp_prf ( 1 ) */
{
  register int i,v,gl;
/***
printf ( "test_imp_hyp_prf1(%d)\n", b );
***/
  if( b==TRUE ){
    itr(test_imp_hyp_prf_s,i,v,gl=cre_gol(v);cre_nod(gl,test_imp_hyp_prf_n));
    kil(test_imp_hyp_prf_s);
    kil(test_imp_hyp_prf_ff);
    test_hyp_prf1 ( TRUE );
  }
  else {
    itr(test_imp_hyp_prf_s,i,v,kil(v));
    kil(test_imp_hyp_prf_s);
    kil(test_imp_hyp_prf_ff);
    test_hyp_prf1 ( FALSE );
  }
}


test_imp_hyp_prf2 ( b ) /* from ask_hyp_prf ( 2 ) */
{
  register int gl;
/***
printf ( "test_imp_hyp_prf2(%d)\n", b );
***/
  if( b==FALSE ){
    kil(test_imp_hyp_prf_ff);
    test_hyp_prf1 ( FALSE );
  }
  else if( already_frm_prf(test_imp_hyp_prf_p,test_imp_hyp_prf_n,test_imp_hyp_prf_ff)==TRUE ){
    kil(test_imp_hyp_prf_ff);
    test_hyp_prf1 ( FALSE );
  }
  else {
    gl=cre_gol(test_imp_hyp_prf_ff);
    cre_nod(gl,test_imp_hyp_prf_n);
    test_hyp_prf1 ( TRUE );
  }
}

test_imp_hyp_prf3 ()
{
/***
printf ( "test_imp_hyp_prf3\n" );
***/
  if ( test_imp_hyp_prf_i <= len ( test_imp_hyp_prf_f ) ) {
    test3_eql_hyp_prf(test_imp_hyp_prf_p,test_imp_hyp_prf_n,test_imp_hyp_prf_hf,test_imp_hyp_prf_lrn,test_imp_hyp_prf_rrn,test_imp_hyp_prf_f,test_imp_hyp_prf_i);
  }
  else {
    test_hyp_prf1 ( FALSE );
  }
}

test_imp_hyp_prf4 ( b ) /* from test3_eql_hyp_prf */
{
/***
printf ( "test_imp_hyp_prf4(%d)\n", b );
***/
  if ( b ) {
    test_hyp_prf1 ( TRUE );
  }
  else {
    test_imp_hyp_prf_i++;
    test_imp_hyp_prf3 ();
  }
}

/************************************************************/

  test2_unv_eql_hyp_prf_func(p,n,hhf,hf,f,i,lv)
  {register int rf,rp,ff,gl,gf,rq,ln,ef,test2_unv_eql_hyp_prf_res,lvv,b ;
/***
printf ( "test2_unv_eql_hyp_prf_func(%d,%d,%d,%d,%d,%d,%d)\n", p,n,hhf,hf,f,i,lv );
***/
    gf=cre_encode_tree(hf,root_tree(hf));
    ln=left_node_frm(gf);
    ef=cre_encode_tree(f,i);
    lvv = cre(5);
    get_asc_nod_vrb_frm(lvv,f,i);
    if( len(lvv)!=0 ){
      test2_unv_eql_hyp_prf_res=FALSE;
    } else if( chk_set_tree(gf,ln,beg_tree(gf,ln),ef,root_tree(ef),1,lv)==TRUE ){
      if( ari_sym(val_tree(f,i))==0 ){
        b=father_is_idx_vrb_frm(f,i) 
/*  to avoid left of aaa$1 to match 
                                             with aaa  */;
      } else {
        b=FALSE;
      };
      if( b==TRUE ){
        test2_unv_eql_hyp_prf_res=FALSE;
      } else {
        rf=right_frm(gf);
        rq=prd_tree(rf);
        rp=cre_decode_tree(rq,root_tree(rq));
        kil(rf);
        kil(rq);
        ff=cre_mod_tree(f,i,rp);
        kil(rp);
        if( ask_eql_hyp_prf_func(f,i,hhf)==FALSE ){
          kil(ff);
          test2_unv_eql_hyp_prf_res=FALSE;
        } else if( already_frm_prf(p,n,ff)==TRUE ){
          kil(ff);
          test2_unv_eql_hyp_prf_res=FALSE;
        } else {

/***
printf ( "\n\test2_unv_eql_hyp_prf_func i=%d j=%d\n", i, j );
printf ( "i=%d mon2_hyp_prf_i=%d\n", i, mon2_hyp_prf_i );
printf ( "7 pssubrr [ %d ] = %d\n", n, (hyp_mod_val*mon2_hyp_prf_i)+i );
***/
          if ( i < hyp_mod_val ) 
            pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+i);
          else
            pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+0);

          gl=cre_gol(ff);
          cre_nod(gl,n);
          test2_unv_eql_hyp_prf_res=TRUE;
        };
      };
    } else {
      test2_unv_eql_hyp_prf_res=FALSE;
    };
    kil(lvv);
    kil(gf);
    kil(ef);
    
    if( test2_unv_eql_hyp_prf_res == FALSE ){
      clr_chk_frm;
    }
  ; return test2_unv_eql_hyp_prf_res;
  }

/*****************/

int test2_unv_eql_hyp_prf_lvv;
int test2_unv_eql_hyp_prf_gf;
int test2_unv_eql_hyp_prf_ef;
int test2_unv_eql_hyp_prf_ff;
int test2_unv_eql_hyp_prf_p;
int test2_unv_eql_hyp_prf_n;

 test2_unv_eql_hyp_prf(p,n,hhf,hf,f,i,lv)
  {register int rf,rp,gl,rq,ln,b ;
/***
printf ( "test2_unv_eql_hyp_prf(%d,%d,%d,%d,%d,%d,%d)\n", p,n,hhf,hf,f,i,lv );
***/
    test2_unv_eql_hyp_prf_p = p;
    test2_unv_eql_hyp_prf_n = n;

    test2_unv_eql_hyp_prf_gf=cre_encode_tree(hf,root_tree(hf));
    ln=left_node_frm(test2_unv_eql_hyp_prf_gf);
    test2_unv_eql_hyp_prf_ef=cre_encode_tree(f,i);
    test2_unv_eql_hyp_prf_lvv = cre(5);
    get_asc_nod_vrb_frm(test2_unv_eql_hyp_prf_lvv,f,i);
    if( len(test2_unv_eql_hyp_prf_lvv)!=0 ){
      test2_unv_eql_hyp_prf1(FALSE);
    }
    else if( chk_set_tree(test2_unv_eql_hyp_prf_gf,ln,beg_tree(test2_unv_eql_hyp_prf_gf,ln),test2_unv_eql_hyp_prf_ef,root_tree(test2_unv_eql_hyp_prf_ef),1,lv)==TRUE ){
      if( ari_sym(val_tree(f,i))==0 ){
        b=father_is_idx_vrb_frm(f,i) 
/*  to avoid left of aaa$1 to match with aaa  */;
      }
      else {
        b=FALSE;
      }
      if( b==TRUE ){
        test2_unv_eql_hyp_prf1(FALSE);
      }
      else {
        rf=right_frm(test2_unv_eql_hyp_prf_gf);
        rq=prd_tree(rf);
        rp=cre_decode_tree(rq,root_tree(rq));
        kil(rf);
        kil(rq);
        test2_unv_eql_hyp_prf_ff=cre_mod_tree(f,i,rp);
        kil(rp);
        ask_eql_hyp_prf(f,i,hhf);
      }
    }
    else {
      test2_unv_eql_hyp_prf1(FALSE);
    }
  }

test2_unv_eql_hyp_prf1 ( b )
{
/***
printf ( "test2_unv_eql_hyp_prf1(%d)\n", b );
***/
  kil(test2_unv_eql_hyp_prf_lvv);
  kil(test2_unv_eql_hyp_prf_gf);
  kil(test2_unv_eql_hyp_prf_ef);
  if( b == FALSE ){
    clr_chk_frm;
  }
  test_hyp_prf6 ( b );
}

test2_unv_eql_hyp_prf2 ( b ) /* from ask_eql_hyp_prf */
{
  register int gl;
/***
printf ( "test2_unv_eql_hyp_prf2(%d)\n", b );
***/
  if( b==FALSE ){
    kil(test2_unv_eql_hyp_prf_ff);
    test2_unv_eql_hyp_prf1 (FALSE);
  }
  else if( already_frm_prf(test2_unv_eql_hyp_prf_p,test2_unv_eql_hyp_prf_n,test2_unv_eql_hyp_prf_ff)==TRUE ){
    kil(test2_unv_eql_hyp_prf_ff);
    test2_unv_eql_hyp_prf1 (FALSE);
  }
  else {
    gl=cre_gol(test2_unv_eql_hyp_prf_ff);
    cre_nod(gl,test2_unv_eql_hyp_prf_n);
    test2_unv_eql_hyp_prf1 (TRUE);
  }
}

/************************************************************/

  test3_unv_eql_hyp_prf_func(p,n,hf,sgf,f,i,lv)
  {register int gf,ln,rf,rq,rp,ff,sf,sq,gg,gl,ef,test3_unv_eql_hyp_prf_res,lvv,b ;
/***
printf ( "test3_unv_eql_hyp_prf_func(p=%d,n=%d,hf=%d,sgf=%d,f=%d,i=%d,lv=%d)\n", p,n,hf,sgf,f,i,lv );
***/
    gf=right_frm(sgf);
    ln=left_node_frm(gf);
    ef=cre_encode_tree(f,i);
    lvv = cre(5);
    get_asc_nod_vrb_frm(lvv,f,i);
    if( len(lvv)!=0 ){
      test3_unv_eql_hyp_prf_res=FALSE;
    } else if( is_qtf_frm(lvv,f,i)==TRUE ){ 
/*  added Fri Jun 12 1992  */
      test3_unv_eql_hyp_prf_res=FALSE;
    } else if( chk_set_tree(gf,ln,beg_tree(gf,ln),ef,root_tree(ef),1,lv)==TRUE ){
      if( ari_sym(val_tree(f,i))==0 ){
        b=father_is_idx_vrb_frm(f,i) 
/*  to avoid left of aaa$1 to match 
                                             with aaa  */;
      } else {
        b=FALSE;
      };
      if( b==TRUE ){
        test3_unv_eql_hyp_prf_res=FALSE;
      } else {
        rf=right_frm(gf);
        rq=prd_tree(rf);
        rp=cre_decode_tree(rq,root_tree(rq));
        kil(rf);
        kil(rq);
        ff=cre_mod_tree(f,i,rp);
        kil(rp);
        if( already_frm_prf(p,n,ff)==TRUE ){
          kil(ff);
          test3_unv_eql_hyp_prf_res=FALSE;
        } else {
          sf=left_frm(sgf);
          sq=prd_tree(sf);
          gg=cre_decode_tree(sq,root_tree(sq));
          kil(sf);
          kil(sq);
          if( already_frm_prf(p,n,gg)==TRUE ){
            kil(ff);
            kil(gg);
            test3_unv_eql_hyp_prf_res=FALSE;
          } else if( ask_eql_hyp_prf_func(f,i,hf)==FALSE ){
            kil(ff);
            kil(gg);
            test3_unv_eql_hyp_prf_res=FALSE;
          } else {

/***
printf ( "\ntest3_unv_eql_hyp_prf_func i=%d j=%d\n", i, j );
printf ( "i=%d mon2_hyp_prf_i=%d\n", i, mon2_hyp_prf_i );
printf ( "8 pssubrr [ %d ] = %d\n", n, (hyp_mod_val*mon2_hyp_prf_i)+i );
***/
          if ( i < hyp_mod_val ) 
            pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+i);
          else
            pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+0);

            gl=cre_gol(gg);
            cre_nod(gl,n);
            gl=cre_gol(ff);
            cre_nod(gl,n);
            test3_unv_eql_hyp_prf_res=TRUE;
          };
        };
      };
    } else {
      test3_unv_eql_hyp_prf_res=FALSE;
    };
    kil(lvv);
    kil(gf);
    kil(ef);
    
    if( test3_unv_eql_hyp_prf_res == FALSE ){
      clr_chk_frm;
    }
  ; return test3_unv_eql_hyp_prf_res;
  }


/********/

int test3_unv_eql_hyp_prf_lvv;
int test3_unv_eql_hyp_prf_gf;
int test3_unv_eql_hyp_prf_ef;
int test3_unv_eql_hyp_prf_ff;
int test3_unv_eql_hyp_prf_gg;
int test3_unv_eql_hyp_prf_n;

  test3_unv_eql_hyp_prf(p,n,hf,sgf,f,i,lv)
  {register int ln,rf,rq,rp,sf,sq,gl,b ;

    test_eql_hyp_prf_i = i; /* added this - done only for eql_hup_prf (not unv)? */
    test3_unv_eql_hyp_prf_n = n;

/***
printf ( "test3_unv_eql_hyp_prf(%d,%d,%d,%d,%d,%d,%d)\n", p,n,hf,sgf,f,i,lv );
printf ( "  test_eql_hyp_prf_i %d\n", test_eql_hyp_prf_i );
***/

    test3_unv_eql_hyp_prf_gf=right_frm(sgf);
    ln=left_node_frm(test3_unv_eql_hyp_prf_gf);
    test3_unv_eql_hyp_prf_ef=cre_encode_tree(f,i);
    test3_unv_eql_hyp_prf_lvv = cre(5);
    get_asc_nod_vrb_frm(test3_unv_eql_hyp_prf_lvv,f,i);
    if( len(test3_unv_eql_hyp_prf_lvv)!=0 ){
      test3_unv_eql_hyp_prf1(FALSE);
    }
    else if( is_qtf_frm(test3_unv_eql_hyp_prf_lvv,f,i)==TRUE ){ 
/*  added Fri Jun 12 1992  */
      test3_unv_eql_hyp_prf1(FALSE);
    }
    else if( chk_set_tree(test3_unv_eql_hyp_prf_gf,ln,beg_tree(test3_unv_eql_hyp_prf_gf,ln),test3_unv_eql_hyp_prf_ef,root_tree(test3_unv_eql_hyp_prf_ef),1,lv)==TRUE ){
      if( ari_sym(val_tree(f,i))==0 ){
        b=father_is_idx_vrb_frm(f,i) 
/*  to avoid left of aaa$1 to match with aaa  */;
      }
      else {
        b=FALSE;
      }
      if( b==TRUE ){
        test3_unv_eql_hyp_prf1(FALSE);
      }
      else {
        rf=right_frm(test3_unv_eql_hyp_prf_gf);
        rq=prd_tree(rf);
        rp=cre_decode_tree(rq,root_tree(rq));
        kil(rf);
        kil(rq);
        test3_unv_eql_hyp_prf_ff=cre_mod_tree(f,i,rp);
        kil(rp);
        if( already_frm_prf(p,n,test3_unv_eql_hyp_prf_ff)==TRUE ){
          kil(test3_unv_eql_hyp_prf_ff);
          test3_unv_eql_hyp_prf1(FALSE);
        }
        else {
          sf=left_frm(sgf);
          sq=prd_tree(sf);
          test3_unv_eql_hyp_prf_gg=cre_decode_tree(sq,root_tree(sq));
          kil(sf);
          kil(sq);
          if( already_frm_prf(p,n,test3_unv_eql_hyp_prf_gg)==TRUE ){
              kil(test3_unv_eql_hyp_prf_ff);
              kil(test3_unv_eql_hyp_prf_gg);
            test3_unv_eql_hyp_prf1(FALSE);
          }
          else {
            ask_eql_hyp_ret = ask_eql_hyp_test3_unv;
            ask_eql_hyp_prf(f,i,hf);
          }
        }
      }
    }
    else {
      test3_unv_eql_hyp_prf1(FALSE);
    }
  }

test3_unv_eql_hyp_prf1 ( b )
{
/***
printf ( "test3_unv_eql_hyp_prf1(%d)\n", b );
***/
  kil(test3_unv_eql_hyp_prf_lvv);
  kil(test3_unv_eql_hyp_prf_gf);
  kil(test3_unv_eql_hyp_prf_ef);
  if( b == FALSE ){
    clr_chk_frm;
  }
  test_hyp_prf4 ( b );
}

test3_unv_eql_hyp_prf2 ( b ) /* from ask_eql_hyp_prf */
{
  register int gl;
/***
printf ( "test3_unv_eql_hyp_prf2(%d)\n", b );
***/
  if( b==FALSE ) {
    kil(test3_unv_eql_hyp_prf_ff);
    kil(test3_unv_eql_hyp_prf_gg);
    test3_unv_eql_hyp_prf1(FALSE);
  }
  else {
/***
printf ( "test3_unv_eql_hyp_prf_gg %d\n", test3_unv_eql_hyp_prf_gg );
printf ( "test3_unv_eql_hyp_prf_n %d\n", test3_unv_eql_hyp_prf_n );
printf ( "test3_unv_eql_hyp_prf_ff %d\n", test3_unv_eql_hyp_prf_ff );
***/
    gl=cre_gol(test3_unv_eql_hyp_prf_gg);
    cre_nod(gl,test3_unv_eql_hyp_prf_n);
    gl=cre_gol(test3_unv_eql_hyp_prf_ff);
    cre_nod(gl,test3_unv_eql_hyp_prf_n);
    test3_unv_eql_hyp_prf1(TRUE);
  }
}

/********************************************************************/

  test_hyp_prf_func(p,n,hf,frm,sub_i)
  {register int op,lv,rhf,lhf,ff,gl,s,i,v,lnod,gf,fq,rn,lrn,op2,ef,test_hyp_prf_res ;
/***
printf ( "test_hyp_prf_func(p=%d,n=%d,hf=%d,frm=%d,sub_i=%d)\n", p,n,hf,frm,sub_i );
***/
    op=val_root_frm(hf);
    if( (op==EQL_sym) || (op==EQV_sym) ){
      test_hyp_prf_res=test_eql_hyp_prf_func(p,n,hf,frm);
    }
    else if ( op==IMP_sym ){
      test_hyp_prf_res=test_imp_hyp_prf_func(p,n,hf,frm);
    }
    else {  /* op!=EQL_sym && op!=EQV_sym && op!=IMP_sym */
      lv=cre(4);
      if( is_unv_frm_prf(p,n,lv,hf,root_tree(hf))==TRUE ){
        clr_chk_frm;
        rhf=right_frm(hf);
        if( val_root_frm(rhf)==IMP_sym ){
/***
printf ( "  test_hyp_prf_func - IMP_sym\n" );
***/
          gf=cre_encode_tree(rhf,root_tree(rhf));
          rn=right_node_frm(gf);
          ef=cre_encode_tree(frm,root_tree(frm));
          if( chk_set_tree(gf,rn,beg_tree(gf,rn),ef,root_tree(ef),1,lv)==TRUE ) {
/***
printf ( "  test_hyp_prf_func - chk_set_tree = TRUE\n" );
***/
            if( ask_hyp_prf_func(hf)==FALSE ) { /* never - always returns TRUE */
              test_hyp_prf_res=FALSE;
            }
            else {  /* ask_hyp_prf_func(hf)==TRUE */
              lhf=left_frm(gf);
              fq=prd_tree(lhf);
              ff=cre_decode_tree(fq,root_tree(fq));
              kil(lhf);
              kil(fq);
              if( val_root_frm(ff)==AND_sym ){
                s=dec_frm(ff,AND_sym);
              if ( i < hyp_mod_val ) 
                pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+i);  /* Oct98 */
              else
                pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+0);  /* Oct98 */
/***
printf ( "\ntest_hyp_prf_func\n" );
printf ( "9 pssubrr [ n=%d ] mon2_hyp_prf_i=%d i=%d (Oct98)\n", n, mon2_hyp_prf_i, i );
***/
                itr(s,i,v,gl=cre_gol(v);cre_nod(gl,n));
                kil(s);
                kil(ff);
              }
              else {  /* val_root_frm(ff)!=AND_sym */
              if ( i < hyp_mod_val ) 
                pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+i);  /* Oct98 */
              else
                pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+0);  /* Oct98 */
/***
printf ( "\ntest_hyp_prf_func\n" );
printf ( "10 pssubrr [ n=%d ] mon2_hyp_prf_i=%d i=%d (Oct98)\n", n, mon2_hyp_prf_i, i );
***/
                gl=cre_gol(ff);
                cre_nod(gl,n);
              }
              test_hyp_prf_res=TRUE;  /*****/
            }
          }
          else {  /* chk_set_tree(.. == FALSE */
/***
printf ( "  test_hyp_prf_func - chk_set_tree = FALSE (so unv_eql!)\n" );
***/
            rn=right_node_frm(gf);
            op=val_tree(gf,rn);
            if( (op==EQL_sym) || (op==EQV_sym) ){
              lrn=left_node_tree(gf,rn);
              op2=val_tree(gf,lrn);
              if ( sub_i == 0 ) {
                nxst_sub_frm(frm,i,v,
                              test3_unv_eql_hyp_prf_func(p,n,hf,gf,frm,i,lv)==TRUE,
                              test_hyp_prf_res=TRUE,
                              test_hyp_prf_res=FALSE)
              }
              else {
                test_hyp_prf_res=test3_unv_eql_hyp_prf_func(p,n,hf,gf,frm,sub_i,lv);
              }
            }
            else {  /* op!=EQL_sym) &&  op!=EQV_sym */
              test_hyp_prf_res=FALSE;
            }
          }
          kil(gf);
          kil(ef);
        }
        else if ( (val_root_frm(rhf)==EQL_sym) || (val_root_frm(rhf)==EQV_sym)  ){
          lnod=left_node_frm(rhf);
          op=val_tree(rhf,lnod);
          nxst_sub_frm(frm,i,v,
                        test2_unv_eql_hyp_prf_func(p,n,hf,rhf,frm,i,lv)==TRUE,
                        test_hyp_prf_res=TRUE,
                        test_hyp_prf_res=FALSE)
	    }
        else { /* val_root_frm(rhf) != IMP_sym && != EQL_sym && != EQV_sym */
          if( chk_set_frm(rhf,frm,lv)==TRUE ){
            if( ask_hyp_prf_func(hf)==FALSE ){
              test_hyp_prf_res=FALSE;
            }
            else { /* ask_hyp_prf_func(hf)==TRUE */
              if ( i < hyp_mod_val ) 
                pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+i);  /* Oct98 */
              else
                pssubrr [ n ] = ((hyp_mod_val*mon2_hyp_prf_i)+0);  /* Oct98 */
/***
printf ( "\nest_hyp_prf_func\n" );
printf ( "11 pssubrr [ n=%d ] mon2_hyp_prf_i=%d i=%d (Oct98)\n", n, mon2_hyp_prf_i, i );
***/
              test_hyp_prf_res=TRUE;
            }
          }
          else { /* chk_set_frm(rhf,frm,lv)==FALSE */
            test_hyp_prf_res=FALSE;
          }
        }
        kil(rhf);
      }
      else { /* is_unv_frm_prf(p,n,lv,hf,root_tree(hf))==FALSE */
        test_hyp_prf_res=FALSE;
      }
      kil(lv);
    }
    return test_hyp_prf_res;
  }

/*****************/

int test_hyp_prf_gf;
int test_hyp_prf_ef;
int test_hyp_prf_rhf;
int test_hyp_prf_lv;
int test_hyp_prf_p;
int test_hyp_prf_n;
int test_hyp_prf_hf;
int test_hyp_prf_frm;
int test_hyp_prf_i;

  test_hyp_prf(p,n,hf,frm)
  {register int op,i,lnod,rn,v,lrn,op2,        test_hyp_prf_res;
/***
printf ( "test_hyp_prf(%d,%d,%d,%d)\n", p,n,hf,frm );
***/
    test_hyp_prf_p = p;
    test_hyp_prf_n = n;
    test_hyp_prf_hf = hf;
    test_hyp_prf_frm = frm;

    test_hyp_prf_gf = 0;
    test_hyp_prf_ef = 0;
    test_hyp_prf_rhf = 0;
    test_hyp_prf_lv = 0;

    op=val_root_frm(hf);
    if( (op==EQL_sym) || (op==EQV_sym) ){
      test_eql_hyp_prf(p,n,hf,frm);
    }
    else if ( op==IMP_sym ){
      test_imp_hyp_prf(p,n,hf,frm);
    }
    else {  /* op!=EQL_sym && op!=EQV_sym && op!=IMP_sym */
      test_hyp_prf_lv=cre(4);
      if( is_unv_frm_prf(p,n,test_hyp_prf_lv,hf,root_tree(hf))==TRUE ){
        clr_chk_frm;
        test_hyp_prf_rhf=right_frm(hf);
        if( val_root_frm(test_hyp_prf_rhf)==IMP_sym ){
          test_hyp_prf_gf=cre_encode_tree(test_hyp_prf_rhf,root_tree(test_hyp_prf_rhf));
          rn=right_node_frm(test_hyp_prf_gf);
          test_hyp_prf_ef=cre_encode_tree(frm,root_tree(frm));
          if( chk_set_tree(test_hyp_prf_gf,rn,beg_tree(test_hyp_prf_gf,rn),test_hyp_prf_ef,root_tree(test_hyp_prf_ef),1,test_hyp_prf_lv)==TRUE ) {

            ask_hyp_ret = ask_hyp_test_hyp1;
            ask_hyp_prf(hf);

          }
          else {
            rn=right_node_frm(test_hyp_prf_gf);
            op=val_tree(test_hyp_prf_gf,rn);
            if( (op==EQL_sym) || (op==EQV_sym) ){
              lrn=left_node_tree(test_hyp_prf_gf,rn);
              op2=val_tree(test_hyp_prf_gf,lrn);
              test_hyp_prf_i = 1;
              test_hyp_prf3 ();
            }
            else {
              test_hyp_prf1(FALSE);
            }
          }
        }
        else if ( (val_root_frm(test_hyp_prf_rhf)==EQL_sym) || (val_root_frm(test_hyp_prf_rhf)==EQV_sym)  ){
          lnod=left_node_frm(test_hyp_prf_rhf);
          op=val_tree(test_hyp_prf_rhf,lnod);
          test_hyp_prf_i = 1;
          test_hyp_prf5 ();
	}
        else {
          if( chk_set_frm(test_hyp_prf_rhf,frm,test_hyp_prf_lv)==TRUE ){
            ask_hyp_ret = ask_hyp_test_hyp2;
            ask_hyp_prf(hf);
          }
          else {
            test_hyp_prf1(FALSE);
          }
        }
      }
      else {
        test_hyp_prf1(FALSE);
      }
    }
  }

test_hyp_prf1 ( b ) /* from ask_hyp_prf 2 test_eql_hyp_prf test_imp_hyp_prf */
{
/***
printf ( "test_hyp_prf1(%d)\n", b );
***/
  if ( test_hyp_prf_gf )  { kil ( test_hyp_prf_gf ); }
  if ( test_hyp_prf_ef )  { kil ( test_hyp_prf_ef ); }
  if ( test_hyp_prf_rhf ) { kil ( test_hyp_prf_rhf ); }
  if ( test_hyp_prf_lv )  { kil ( test_hyp_prf_lv ); }
  mon2_hyp_prf3 ( b );
}

test_hyp_prf2 ( b ) /* from ask_hyp_prf ( 1 ) */
{
  register int lhf,fq,ff,s,gl,i,v;
/***
printf ( "test_hyp_prf2(%d)\n", b );
***/
  if( b==FALSE ) {
    test_hyp_prf1 ( FALSE );
  }
  else {
    lhf=left_frm(test_hyp_prf_gf);
    fq=prd_tree(lhf);
    ff=cre_decode_tree(fq,root_tree(fq));
    kil(lhf);
    kil(fq);
    if( val_root_frm(ff)==AND_sym ){
      s=dec_frm(ff,AND_sym);
      itr(s,i,v,gl=cre_gol(v);cre_nod(gl,test_hyp_prf_n));
      kil(s);
      kil(ff);
    }
    else {
      gl=cre_gol(ff);
      cre_nod(gl,test_hyp_prf_n);
    }
    test_hyp_prf1 ( TRUE );
  }
}

test_hyp_prf3 ()
{
/***
printf ( "test_hyp_prf3\n" );
***/
  if ( test_hyp_prf_i <= len ( test_hyp_prf_frm ) ) { 
    test3_unv_eql_hyp_prf(test_hyp_prf_p,test_hyp_prf_n,test_hyp_prf_hf,test_hyp_prf_gf,test_hyp_prf_frm,test_hyp_prf_i,test_hyp_prf_lv);
  }
  else {
    test_hyp_prf1 ( FALSE );
  }
}

test_hyp_prf4 ( b ) /* from test3_unv_eql_hyp_prf */
{
/***
printf ( "test_hyp_prf4(%d)\n", b );
***/
  if ( b == TRUE ) {
    test_hyp_prf1 ( TRUE );
  }
  else {
    test_hyp_prf_i++;
    test_hyp_prf3 ();
  }
}

test_hyp_prf5 ()
{
/***
printf ( "test_hyp_prf5\n" );
***/
  if ( test_hyp_prf_i <= len ( test_hyp_prf_frm ) ) { 
    test2_unv_eql_hyp_prf(test_hyp_prf_p,test_hyp_prf_n,test_hyp_prf_hf,test_hyp_prf_rhf,test_hyp_prf_frm,test_hyp_prf_i,test_hyp_prf_lv);
  }
  else {
    test_hyp_prf1 ( FALSE );
  }
}

test_hyp_prf6 ( b ) /* from test2_unv_eql_hyp_prf */
{
/***
printf ( "test_hyp_prf6(%d)\n", b );
***/
  if ( b == TRUE ) {
    test_hyp_prf1 ( TRUE );
  }
  else {
    test_hyp_prf_i++;
    test_hyp_prf5 ();
  }
}


/********************************************************************/

/*  NOT USED                 >>>>>>>>>>>>>> nxst rather than xst <<<<<<<<<<<<
  mon_hyp_prf(p,n,g,f)
  {register int s,i,h,mon_hyp_prf_res ;
/???/
printf ( "mon_hyp_prf\n" );
/???/
    s=cre(50);
    lst_hyp_prf(p,n,s);
    nxst(s,i,h,test_hyp_prf_func(p,n,frm_hyp(h),f)==TRUE,
               mod_uti_hyp(h);
               mod_spe_gol(g,HYP_gol);
               mod_hyp_gol(g,h);            /? <<<<<<<<<<<<<<<< ?/
               mon_hyp_prf_res=TRUE,
               mon_hyp_prf_res=FALSE);
    kil(s);
    return mon_hyp_prf_res;
  }
*/

/* hyp implication and equality */
  mon2_hyp_prf_func(p,n,g,f)
  {register int s,h,mon2_hyp_prf_res ;
/***
printf ( "mon2_hyp_prf_func (%d,%d,%d,%d)\n",p,n,g,f );
***/
    s=cre(50);
    lst_hyp_prf(p,n,s);
    xst(s,mon2_hyp_prf_i,h,test_hyp_prf_func(p,n,frm_hyp(h),f,0)==TRUE,
               mod_uti_hyp(h);
               mod_spe_gol(g,HYP_gol);
               mod_hyp_gol(g,h);            /* <<<<<<<<<<<<<<<< */
               mon2_hyp_prf_res=TRUE,
               mon2_hyp_prf_res=FALSE);
    kil(s);
    return mon2_hyp_prf_res;
  }


/* hyp implication and equality */
  mon2_hyp_prf(t,p,n,g,f)
  {
/***
printf ( "mon2_hyp_prf\n" );
***/
    mon2_hyp_prf_t = t;
    mon2_hyp_prf_p = p;
    mon2_hyp_prf_n = n;
    mon2_hyp_prf_f = f;
    mon2_hyp_prf_g = g;
    mon2_hyp_prf_s=cre(50);
    lst_hyp_prf(mon2_hyp_prf_p,mon2_hyp_prf_n,mon2_hyp_prf_s);
    mon2_hyp_prf_i = len ( mon2_hyp_prf_s );
    test_eql_hyp_prf_i = 0;
    mon2_hyp_prf1 ();
  }

  mon2_hyp_prf1()
  {
    if ( mon2_hyp_prf_i > 0 ) {
/***
printf ( " -- mon2_hyp_prf_i %d\n", mon2_hyp_prf_i );
***/
      mon2_hyp_prf_h = val( mon2_hyp_prf_s ,mon2_hyp_prf_i );

/***
reset_res(0);
str_buf [ 0 ] = '\0';
write_frm_res(frm_hyp(mon2_hyp_prf_h),0);
printf ( "\n\n  Current hypothesis (mon2_hyp_prf_h %d)\n        %s\n\n\n", mon2_hyp_prf_h, str_buf );
***/
      test_hyp_prf(mon2_hyp_prf_p,mon2_hyp_prf_n,frm_hyp(mon2_hyp_prf_h),mon2_hyp_prf_f);
    }
    else {
     mon2_hyp_prf2 ( FALSE );
    }
  }

  mon2_hyp_prf2 ( b )
  {
/***
printf ( "THIS IS THE PROBLEM - mon2_hyp_prf2 (%d)\n", b );
***/
    if ( b == TRUE ) {
/***
printf ( "mon2_hyp_prf_h %d\n", mon2_hyp_prf_h );
printf ( "mon2_hyp_prf_g %d\n", mon2_hyp_prf_g );
***/
      mod_uti_hyp(mon2_hyp_prf_h);
      mod_spe_gol(mon2_hyp_prf_g,HYP_gol);
      mod_hyp_gol(mon2_hyp_prf_g,mon2_hyp_prf_h);    /* <<<<<<<<<<<<<<<< */
    }
    kil(mon2_hyp_prf_s);
    run_man_prf_success=b;
    mod_res_tac(mon2_hyp_prf_t,b);
    run_man_prf_run_man_prf_res=run_man_prf_i;
    if ( b == TRUE ) {
      pssubrr [ run_man_prf_i ] = ((hyp_mod_val*mon2_hyp_prf_i)+test_eql_hyp_prf_i);
/************* mon2_hyp_prf_i is the hyp number !!!!! *************/
/***
printf ( "\nmon2_hyp_prf2 PPP mon2_hyp_prf_i=%d\n                  test_eql_hyp_prf_i=%d\n", mon2_hyp_prf_i, test_eql_hyp_prf_i );
printf ( "  --->>> pssubrr [ run_man_prf_i=%d ] = %d\n", run_man_prf_i, ((hyp_mod_val*mon2_hyp_prf_i)+test_eql_hyp_prf_i) );
***/
    }
    Proof_CB_continued ( FALSE, proof_step_flag_YES );  /* run_Proof_CB */
  }

  mon2_hyp_prf3 ( b ) /* from test_hyp_prf */
  {
/***
printf ( "mon2_hyp_prf3 (%d)\n", b );
***/
    if ( b == TRUE ) {
      mon2_hyp_prf2 ( TRUE );
    }
    else {
      mon2_hyp_prf_i--;
      mon2_hyp_prf1();
    }
  }

/********************************************************************/

                       
/*  GEN BUILT-; RULE  */
/*
  ask_gen_prffunc()
#define ask_gen_prf ask_gen_prffunc()
  {register int ask_gen_prf_res ;
    ask_gen_prf_res=TRUE;
    if( auto_prf==FALSE ){
      fprintf ( bstdout, "\n");
      fprintf ( bstdout, "      GEN   YES? ");
      if( motif_yes_no==NO ){
        ask_gen_prf_res=FALSE;
      };
    }
  ; return ask_gen_prf_res;
  }
*/

  gen_prf(p,n,g,f)
  {register int lv,w,gl,s,b,newlv,newlvp,nbr,i,h,gen_prf_res ;
    lv=cre(4);
    if( is_unv_frm_prf(p,n,lv,f,root_tree(f))==TRUE ){
      if( /* ask_gen_prf== */ TRUE ){
        s=cre(50);
        lst_hyp_prf(p,n,s);
        newlv=cre(len(lv));
        newlvp=cre(len(lv));
        cop(lv,newlv);
        b=TRUE;
        nbr=0;
        while( b==TRUE ){
          xst(s,i,h,rec_fre_prf(p,n,newlv,frm_hyp(h),
                  root_tree(frm_hyp(h)))==TRUE,
                  nbr=nbr+1;
                  clr(newlvp);
                  inc_lst_vrb_frm(newlv,newlvp);
                  cop(newlvp,newlv),
                  b=FALSE)
     ;
        };
        if( nbr>0 ){
          w=cre(len(f)+4*len(lv)+4);
          psh(w,GHO_sym);                          
/*  [t=t$i]f  */
          rec_vrb_frm(w,lv);
          rec_vrb_frm(w,newlv);
          psh(w,CEQ_sym);
          psh(w,LSB_sym);
          cnc_tree(w,f,right_node_frm(f));
          psh(w,SPE_sym);
          mod_spe_gol(g,GEN_gol);
          gl=cre_gol(w);
          cre_nod(gl,n);
} else {
          mod_spe_gol(g,GEN_gol);
          w=right_frm(f);
          gl=cre_gol(w);
          cre_nod(gl,n);
        };
        kil(s);
        kil(newlv);
        kil(newlvp);
        gen_prf_res=TRUE;
      } else {
        gen_prf_res=FALSE;
      };
    } else {
      gen_prf_res=FALSE;
    };
    kil(lv)
  ; return gen_prf_res;
  }

                         
/*  SUBSTITUTION BUILT-; RULE  */
                         
                       
  free_in_lst_prf(p,n,lv,lf)
  {register int g,free_in_lst_prf_res ; 
    g=rec_frm(lf,COM_sym);
    free_in_lst_prf_res=rec_fre_prf(p,n,lv,g,root_tree(g));
    kil(g)
  ; return free_in_lst_prf_res;
  }

  sub_jok_prf(p,n,lv,le,f,i,g,s)
  {register int lq,nlq,j,v,lef,newlv,newle ;
    lq=cre(1);
    nlq=cre(len(lv));
        
    itr(lv,j,v,clr(lq);
               psh(lq,v);
               if( chk_vrb_prf(p,n,val(le,j))==TRUE ){
                 if( v==code_vrb_frm(val(le,j)) ){    
                   psh(nlq,v)
                 ;} else if( rec_fre_prf(p,n,lq,f,i)==FALSE ){
                   psh(nlq,v)
                 ;}
               ;} else if( rec_fre_prf(p,n,lq,f,i)==FALSE ){
                 psh(nlq,v);
              });
    if( len(nlq)==len(lv) ){              
                              
/*  if x\P then [y,x,z=F,E,G]P <=> [y,z=F,G]P  */
      if( is_idx_vrb_frm(f,i)==TRUE ){
        cnc_tree(g,f,i);
      } else {
        psh(g,s);
      };
    } else if( len(nlq)==0 ){     
      psh(g,GHO_sym);
      rec_vrb_frm(g,lv);
      lef=rec_frm(le,COM_sym);
      cnc_frm(g,lef);
      kil(lef);
      psh(g,CEQ_sym);
      psh(g,LSB_sym);
      if( is_idx_vrb_frm(f,i)==TRUE ){
        cnc_tree(g,f,i);
      } else {
        psh(g,s);
      };
      psh(g,SPE_sym);
    } else {
      newlv=cre(4);
      newle=cre(4);
          
      anti_restr_fnc(lv,le,nlq,newlv,newle);
      psh(g,GHO_sym);
      rec_vrb_frm(g,newlv);
      lef=rec_frm(newle,COM_sym);
      cnc_frm(g,lef);
      kil(lef);
      psh(g,CEQ_sym);
      psh(g,LSB_sym);
      if( is_idx_vrb_frm(f,i)==TRUE ){
        cnc_tree(g,f,i);
      } else {
        psh(g,s);
      };
      psh(g,SPE_sym);
          
      kil(newlv);
      kil(newle);
    }

    kil(lq);
    kil(nlq);
  }

  
/* procedure rec_sub_prf(p,n,lv,le,f,i,g,v); */
  rec_sub_prf(p,n,lv,le,f,i,g,v)
  {register int s,k,newlv,newlvp,newle,lq,lef,lee,rs,b ;
    s=val_tree(f,i);
    if( ari_sym(s)==0 ){
      if( is_vrb_spe_sym(s)==TRUE ){
        k=idx(lv,s);
        if( k==0 ){
          exist_set(lv,v,letter_sym(v)==TRUE,b=FALSE,b=TRUE);
          if( b == TRUE ){
            psh(g,s);
          } else {
            sub_jok_prf(p,n,lv,le,f,i,g,s);
          };
        } else {
          cnc(g,val(le,k));
        };
      } else if( (letter_sym(s)==TRUE) && (v==TRUE) ){
        if( is_letter_vrb_prf(p,n,s)==TRUE ){
          k=idx(lv,s);
          if( k==0 ){
            if( exec_prf==TRUE ){
              psh(g,s);
            } else if( is_in_frm(frm_gol(info_nod(p)),s)==FALSE ){
              psh(g,s);
            } else {
              sub_jok_prf(p,n,lv,le,f,i,g,s);
            };
          } else {
            cnc(g,val(le,k));
          };
        } else {
          sub_jok_prf(p,n,lv,le,f,i,g,s);
        };
      } else {
        psh(g,s);
      };
    } else {
      lq=cre(4);
      lee=cre(4);
      if( is_idx_vrb_frm(f,i)==TRUE ){
        k=idx(lv,code_idx_vrb_frm(f,i));
        if( k==0 ){
          exist_set(lv,v,letter_sym(v)==TRUE,b=FALSE,b=TRUE);
          if( b == TRUE ){
            cnc_tree(g,f,i);
          } else {
            sub_jok_prf(p,n,lv,le,f,i,g,code_idx_vrb_frm(f,i));
          };
        } else {
          cnc(g,val(le,k));
        };
      } else if( (s==UNDERSCORE_sym) || (s==ANTI_SLASH_sym) || (s==BVRB_sym) 
/* || (s==VRB_sym) */
 ){
        cnc_tree(g,f,i);
      } else if( is_qtf_frm_prf(p,n,lq,f,i)==TRUE ){
        newlv=cre(4);
        newlvp=cre(len(lv));
        newle=cre(4);
        
        anti_restr_fnc(lv,le,lq,newlv,newle);
        if( len(newlv)!=0 ){
          if( free_in_lst_prf(p,n,lq,newle)==FALSE ){
            cnc_tree(g,f,left_node_tree(f,i));
            rec_sub_prf(p,n,newlv,newle,f,right_node_tree(f,i),g,v);
            psh(g,DOT_sym);
          } else {
            clr(newlv);                      
/*  alpha conversion  */
            inc_lst_vrb_frm(lq,newlv);
            while( rec_fre_prf(p,n,newlv,f,right_node_tree(f,i))==TRUE ){
              
/* fprintf ( bstdout, "dodo3"); */
              clr(newlvp);
              inc_lst_vrb_frm(newlv,newlvp);
              cop(newlvp,newlv);
            };
            psh(g,GHO_sym);
            rec_vrb_frm(g,lv);
            lef=rec_frm(le,COM_sym);
            cnc_frm(g,lef);
            kil(lef);
            psh(g,CEQ_sym);
            psh(g,LSB_sym);
            
            psh(g,GHO_sym);            
            rec_vrb_frm(g,newlv);
            psh(g,val_tree(f,left_node_tree(f,i)));
            psh(g,GHO_sym);
            rec_vrb_frm(g,lq);
            rec_vrb_frm(g,newlv);
            psh(g,CEQ_sym);
            psh(g,LSB_sym);
            cnc_tree(g,f,right_node_tree(f,i));
            psh(g,SPE_sym);
            psh(g,DOT_sym);
            
            psh(g,SPE_sym)
            ;
          };
        } else {
          cnc_tree(g,f,i);
        };
        kil(newlv);
        kil(newlvp);
        kil(newle);
      } else if( is_set_frm_prf(p,n,lq,f,i)==TRUE ){
        newlv=cre(4);
        newlvp=cre(len(lv));
        newle=cre(4);
        
        anti_restr_fnc(lv,le,lq,newlv,newle);
        if( len(newlv)!=0 ){
          if( free_in_lst_prf(p,n,lq,newle)==FALSE ){
            psh(g,GHO_sym);
            rs=right_node_tree(f,i);
            cnc_tree(g,f,left_node_tree(f,rs));
            rec_sub_prf(p,n,newlv,newle,f,right_node_tree(f,rs),g,v);
            psh(g,BAR_sym);
            psh(g,LCB_sym);
          } else {
            clr(newlv);                      
/*  alpha conversion  */
            rs=right_node_tree(f,i);
            inc_lst_vrb_frm(lq,newlv);
            while( rec_fre_prf(p,n,newlv,f,right_node_tree(f,rs))==TRUE ){
              clr(newlvp);
              inc_lst_vrb_frm(newlv,newlvp);
              cop(newlvp,newlv);
            };
            psh(g,GHO_sym);
            rec_vrb_frm(g,lv);
            lef=rec_frm(le,COM_sym);
            cnc_frm(g,lef);
            kil(lef);
            psh(g,CEQ_sym);
            psh(g,LSB_sym);
            
            psh(g,GHO_sym);
            rec_vrb_frm(g,newlv);
            psh(g,GHO_sym);
            rec_vrb_frm(g,lq);
            rec_vrb_frm(g,newlv);
            psh(g,CEQ_sym);
            psh(g,LSB_sym);
            cnc_tree(g,f,right_node_tree(f,rs));
            psh(g,SPE_sym);
            psh(g,BAR_sym);
            psh(g,LCB_sym);
            
            psh(g,SPE_sym)
            ;
          };
        } else {
          cnc_tree(g,f,i);
        };
        kil(newlv);
        kil(newlvp);
        kil(newle);
      } else if( val_tree(f,i)==SPE_sym ){
        psh(g,GHO_sym);
        rec_vrb_frm(g,lv);
        lef=rec_frm(le,COM_sym);
        cnc_frm(g,lef);
        kil(lef);
        psh(g,CEQ_sym);
        psh(g,LSB_sym);
        
        cnc_tree(g,f,i);
        
        psh(g,SPE_sym)
        ;
      } else {
        rec_sub_prf(p,n,lv,le,f,left_node_tree(f,i),g,v);
        rec_sub_prf(p,n,lv,le,f,right_node_tree(f,i),g,v);
        psh(g,s);
      };
      kil(lq);
      kil(lee);
    };
  }

/*
  ask_sub_prf_func(f,i)
  {register int k,ask_sub_prf_res ;
    ask_sub_prf_res=TRUE;
    if( auto_prf==FALSE ){
      if( /? (len(f)<200) || (sho_big_gol_prf==TRUE) ?/ TRUE ){
        strcpy ( str_buf, " " );
        k=cre_high_frm(f,i);
        reset_res(/? 6 ?/ 0);
        write_frm_res(k,/? 6 ?/ 0);
        kil(k);
      }
      {
        int slen = strlen ( str_buf );
        if ( slen < 5 ) {
          strcat ( str_buf, "\n\n\nApply SUB to italicized expression?");
        }
        else if ( str_buf [ slen - 1 ] != '?' ||
                  str_buf [ slen - 2 ] != 'n' ||
                  str_buf [ slen - 3 ] != 'o' ||
                  str_buf [ slen - 4 ] != 'i'    ) {
          strcat ( str_buf, "\n\n\nApply SUB to italicized expression?");
        }
      }
      if( motif_yes_no==NO ){
        ask_sub_prf_res=FALSE;
      }
    }
    return ask_sub_prf_res;
  }
*/


  sub_prf_func(p,i,g,f)
  {register int n,v,lv,le,fff,ff,gl,j,sub_prf_res ;
    lv=cre(4);
    le=cre(4);
    nxst_sub_frm(f,n,v,is_dis_sub_frm_prf(p,i,lv,le,f,n)==TRUE,
                 fff=cre(4);
                 rec_sub_prf(p,i,lv,le,f,right_node_tree(f,n),fff,TRUE);
                 if( eql_tree(f,n,fff,root_tree(fff))==FALSE ){
                   if( /* ask_sub_prf_func(f,n)== */ TRUE ){
                     ff=cre_mod_tree(f,n,fff);
                     kil(fff);
                     gl=cre_gol(ff);
                     cre_nod(gl,i);
                     mod_spe_gol(g,SUB_gol);
                     sub_prf_res=TRUE
                   ;} else {
                     kil(fff);
                     sub_prf_res=FALSE
                   ;}
                 ;} else {
                   kil(fff);
                   sub_prf_res=FALSE
                 ;},
                 sub_prf_res=FALSE
    );
    kil(lv);
    itr(le,j,v,kil(v));
    kil(le)
  ; return sub_prf_res;
  }

                    
/*  "bcall" built-in rule  */
                   
 
  cal_prf(p,n,g,f)
  {register int ss,ff,b,tac,gol,i,gg,gl,j,v,tt,ftac,cal_prf_res,ta,taf ;
/***
printf ( "\n --- cal_prf(p=%d,n=%d,g=%d,f=%d) - ", p,n,g,f ); 
***/
    if( val_root_frm(f)==CAL_sym ){
      ss=dec_tree(f,right_node_frm(f),BAR_sym);
      xst(ss,j,v,val_root_frm(v)!=COL_sym,b=FALSE,b=TRUE);     
      if( (b==TRUE) && (val_alt_gol(g)==0) ){
        ff=fst(ss);
        tt=left_frm(ff);
        if( val_root_frm(tt)==COM_sym ){
          tac=left_frm(tt);
          ftac=right_frm(tt);
        } else {
          ftac=0;
          tac=left_frm(ff);
        };
        kil(tt);
        gol=right_frm(ff);
        i=next_nod(p,n);
        if( i!=0 ){
          gg=info_nod(i);
          if( def_tac_gol(gg)==FALSE ){
            mod_tac_gol(gg,tac_prf,tac_ptr_prf,fwd_tac_prf,fwd_tac_ptr_prf);
};
        };
        ta=func_build_tac_prf(tac);
        kil(tac);
        if( ftac!=0 ){
          taf=func_build_fwd_tac_prf2(ftac);
          kil(ftac);
        } else {
          taf=0;
          fwd_tac_prf=0;
          fwd_tac_ptr_prf=0;
        }

/* new_tac_prf=TRUE; */
        new_tac_prf=FALSE;
        gl=cre_gol(gol);
        mod_tcl_gol(gl,ta);
        if( taf!=0 ){
          mod_fcl_gol(gl,taf);
        };
        cre_nod(gl,n);
        mod_spe_gol(g,CAL_gol);
        ini_alt_gol(g);
        cal_prf_res=TRUE;
      } else {
        cal_prf_res=FALSE;
      };
      itr(ss,j,v,kil(v));
      kil(ss);
    } else {
      cal_prf_res=FALSE;
    }
/***
printf ( "returning %d\n", cal_prf_res );
***/
    return cal_prf_res;
  }

  recal_prf(n,g)
  {register int ss,c,tac,gol,gl,j,v,f,ff,tt,ftac,recal_prf_res,ta,taf ;
    f=frm_gol(g);
    ss=dec_tree(f,right_node_frm(f),BAR_sym);
    c=val_alt_gol(g)+1;
    if( c<=len(ss) ){
      ff=val(ss,c);
      tt=left_frm(ff);
      if( val_root_frm(tt)==COM_sym ){
        tac=left_frm(tt);
        ftac=right_frm(tt);
      } else {
        ftac=0;
        tac=left_frm(ff);
      };
      kil(tt);
      gol=right_frm(ff);
      ta=func_build_tac_prf(tac);
      kil(tac);
      if( ftac!=0 ){
        taf=func_build_fwd_tac_prf2(ftac);
        kil(ftac);
      } else {
        taf=0;
        fwd_tac_prf=0;
        fwd_tac_ptr_prf=0;
      };
      new_tac_prf=FALSE;
      gl=cre_gol(gol);
      mod_tcl_gol(gl,ta);
      if( taf!=0 ){
        mod_fcl_gol(gl,taf);
      };
      cre_nod(gl,n);
      inc_alt_gol(g);
      recal_prf_res=TRUE;
    } else {
      recal_prf_res=FALSE;
    };
    itr(ss,j,v,kil(v));
    kil(ss);
    return recal_prf_res;
  }

             
  non_destructive_recal_prf(n,g)
  {register int f,ss,c,j,v,non_destructive_recal_prf_res;
    f=frm_gol(g);
    ss=dec_tree(f,right_node_frm(f),BAR_sym);
    c=val_alt_gol(g)+1;
    if( c<=len(ss) ){
      non_destructive_recal_prf_res=TRUE;
    } else {
      non_destructive_recal_prf_res=FALSE;
    };
    itr(ss,j,v,kil(v));
    kil(ss);
    return non_destructive_recal_prf_res;
  }

             
/*  TACTIC INTERPRETER FOR NORMAL PROOF  */
             
itp_tac_prf_func(r,p,i,gl,f)
  {register int t,j,rr,th,st,itp_tac_prf_res ;
/***
printf ( "itp_tac_prf_func\n" );
print_seq_info ( "itp_tac_prf_func" );
***/
    seq_sub_rr_i = 0;
    t=info_nod(tac_ptr_prf);
    itp_tac_prf_res=FALSE;
    if( def_the_tac(t)==TRUE ){
      th=the_tac(t);
      xst(rul_the(th),j,rr,
          test_rul_prf_func(p,i,r,rr,f)==TRUE,
          mod_rul_gol(gl,rr);
/*          pssubrr [ gl ] = seq_sub_rr_i; this overwrites with zero!!! */
/***
printf ( "  2 NOT storing seq_sub_rr_i %d in %d\n", seq_sub_rr_i, gl );
printf ( "  currently: pssubrr [ %d ] = %d\n", gl, pssubrr [ gl ] );
***/
          mod_res_tac(t,TRUE);
          itp_tac_prf_res=TRUE,
          mod_res_tac(t,FALSE);
          itp_tac_prf_res=FALSE);
    } else if( def_spe_tac(t)==TRUE ){
      st=spe_tac(t);
      if( st==DED_tac ){                       
        if( ded_prf(r,p,i,gl,f)==TRUE ){
/*  DED  */
          mod_res_tac(t,TRUE);
          itp_tac_prf_res=TRUE;
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_res=FALSE;
        }
      } else if( st==GEN_tac ){
/*  GEN  */
        if( gen_prf(p,i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_res=TRUE;
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_res=FALSE;
        };
      } else if( st==HYP_tac ){                    
/*  HYP  */
        if( mon2_hyp_prf_func(p,i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_res=TRUE;
          {
            char buf_str [ 250 ];
            strcpy ( buf_str, "    HYP");
            strcat ( buf_str, "\n" );
	  }
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_res=FALSE;
        };
      } else if( st==SUB_tac ){                    
/*  SUB  */
        if( sub_prf_func(p,i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_res=TRUE;
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_res=FALSE;
        }
/*************************
 ;} else if( st==HYPD_tac ){                    
        if( mon_hyp_prf(p,i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_res=TRUE;
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_res=FALSE;
        } 
*************************/
      } else if( st==ARI_tac ){                    
/*  ARI  */
        if( ari_prf_func(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_res=TRUE;
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_res=FALSE;
        };
      } else if( st==REV_tac ){                    
/*  REV  */
        if( rev_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_res=TRUE;
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_res=FALSE;
        };
      } else if( st==FLAT_tac ){                   
/*  FLAT  */
        if( flat_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_res=TRUE;
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_res=FALSE;
        };
      } else if( st==MAP_tac ){                   
/*  MAP  */
        if( smap_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_res=TRUE;
        } else if( nmap_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_res=TRUE;
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_res=FALSE;
        };
      } else if( st==MODR_tac ){                   
/*  MODR  */
        if( bmodr_prf(f)==TRUE ){
          mod_res_tac(t,TRUE);
          mod_is_frm_gol ( gl, 1 );
          itp_tac_prf_res=TRUE;
        } else if( bmark_proved_prf(f)==TRUE ){
          mod_res_tac(t,TRUE);
          mod_is_frm_gol ( gl, 1 );
          itp_tac_prf_res=TRUE;
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_res=FALSE;
        };
      } else if( st==SHELL_tac ){                  
/*  SHELL  */
        if( bshell_prf(f)==TRUE ){
          mod_res_tac(t,TRUE);
          mod_is_frm_gol ( gl, 1 );
          itp_tac_prf_res=TRUE;
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_res=FALSE;
        };
      } else if( st==WRITE_tac ){                  
/*  WRITE  */
        if( bwritef_prf(f)==TRUE ){
          mod_res_tac(t,TRUE);
          mod_is_frm_gol ( gl, 1 );
          itp_tac_prf_res=TRUE;
        
/* ;} else if( bcopf_prf(f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_res=TRUE
*/;
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_res=FALSE;
        };
      } else if( st==RULE_tac ){                  
/*  RULE  */
        if( badd_rul_prf(p,i,r,f)==TRUE ){
          mod_res_tac(t,TRUE);
          mod_is_frm_gol ( gl, 1 );
          itp_tac_prf_res=TRUE;
        } else if( badd_lirul_prf(r,f)==TRUE ){
          mod_res_tac(t,TRUE);
          mod_is_frm_gol ( gl, 1 );
          itp_tac_prf_res=TRUE;
        } else if( bpopt_prf(r,f)==TRUE ){
          mod_res_tac(t,TRUE);
          mod_is_frm_gol ( gl, 1 );
          itp_tac_prf_res=TRUE;
        } else if( bcleant_prf(r,f)==TRUE ){
          mod_res_tac(t,TRUE);
          mod_is_frm_gol ( gl, 1 );
          itp_tac_prf_res=TRUE;
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_res=FALSE;
        };
      } else if( st==TAC_tac ){                  
/*  TACTICS  */
        if( badd_tac_prf(f)==TRUE ){
          mod_is_frm_gol ( gl, 1 );
          mod_res_tac(t,TRUE);
          itp_tac_prf_res=TRUE;
       } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_res=FALSE;
        };
      } else if( st==CATL_tac ){                  
/*  BCATL  */
        if( bcatl_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_res=TRUE;
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_res=FALSE;
        };
      } else if( st==NEWV_tac ){                  
/*  BNEWV BLOW  */
        if( bnewv_vrb_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_res=TRUE;
        } else if( low_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_res=TRUE;
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_res=FALSE;
        };
      } else if( st==LMAP_tac ){                   
/*  LMAP  */
        if( slmap_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_res=TRUE;
        } else if( nlmap_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_res=TRUE;
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_res=FALSE;
        };
      } else {
        mod_res_tac(t,FALSE);
        itp_tac_prf_res=FALSE;
      }
    }
    if( new_tac_prf==FALSE ){
      tac_ptr_prf=nxt_tac_prf(tac_prf,tac_ptr_prf);
    } else {
      new_tac_prf=FALSE;
    }
  ; return itp_tac_prf_res;
  }


int itp_test_rul_t;
int itp_test_rul_th;

itp_test_rul_prf ( t, th )
int t, th;
{
/***
printf ( "itp_test_rul_prf ( %d %d )\n", t, th );
***/
  itp_test_rul_t = t;
  itp_test_rul_th = th;
  yes_no_n = len ( rul_the ( itp_test_rul_th ) );
  itp_test_rul_prf1 ();
}

itp_test_rul_prf1 ()
{
  register int rr;
/***
printf ( "itp_test_rul_prf1 () from_applicable_rr %d yes_no_n %d \n", from_applicable_rr, yes_no_n );
***/
  if ( from_applicable_rr ) {
    /***
    the applicable rule has been clicked
    ***/
/***
printf ( " ### itp_test_rul_prf1 - the applicable rule has been clicked\n" );
***/
    test_rul_prf (run_man_prf_p,run_man_prf_i,run_man_prf_r,from_applicable_rr,run_man_prf_f, /* app_rule_flag = */ 0);
  }
  else if ( yes_no_n ) {
    /***
    from single step - inviting a click
    ***/
/***
printf ( " ### itp_test_rul_prf1 - from single step\n    if app_rule_flag=0, breade happens first\n    if app_rule_flag=1, no breade and rule is displayed\n    (with instantiate button)\n" );
***/
    rr = val ( rul_the ( itp_test_rul_th ), yes_no_n );
    test_rul_prf (run_man_prf_p,run_man_prf_i,run_man_prf_r,rr,run_man_prf_f,/* app_rule_flag = */ 0);
  }
  else {
    mod_res_tac ( itp_test_rul_t, FALSE );
    itp_tac_prf_1 ( FALSE );
  }

}

itp_test_rul_prf2 ( b ) /* from test_rul_prf */
{
/***
printf ( "itp_test_rul_prf2 ( %d ) from_applicable_rr %d end_of_tac_prf %d\n", b, from_applicable_rr, end_of_tac_prf  );
***/
  if ( b ) {
    if ( from_applicable_rr ) {
      mod_rul_gol (run_man_prf_g, from_applicable_rr );
    }
    else {
      mod_rul_gol (run_man_prf_g, val ( rul_the ( itp_test_rul_th ), yes_no_n ) );
    }
    pssubrr [ run_man_prf_i ] = seq_sub_rr_i;
/***
printf ( "\n  1 storing seq_sub_rr_i %d in %d\n", seq_sub_rr_i, run_man_prf_i );
***/
    mod_res_tac ( itp_test_rul_t, TRUE );
    itp_tac_prf_1 ( TRUE );
  }
  else {
    if ( from_applicable_rr ) {
      mod_res_tac ( itp_test_rul_t, FALSE );
      itp_tac_prf_1 ( FALSE );
    }
    else {
      yes_no_n--;
      itp_test_rul_prf1 ();
    }
  }
}

             
itp_tac_prf(r,p,i,gl,f)
  {register int t,j,rr,th,st;
/***
printf ( " -------->>>>>>>----- itp_tac_prf end_of_tac_prf %d from_applicable_rr %d\n", end_of_tac_prf, from_applicable_rr );
***/
    seq_sub_rr_i = 0;
    t=info_nod(tac_ptr_prf);
    if( from_applicable_rr ) {
      th=the_tac(t);
      itp_test_rul_prf ( t, th );
    }
    else if( def_the_tac(t)==TRUE ){
      th=the_tac(t);
      itp_test_rul_prf ( t, th );
    }
    else if( def_spe_tac(t)==TRUE ){
      st=spe_tac(t);
      if( st==DED_tac ){                       
        if( ded_prf(r,p,i,gl,f)==TRUE ){
/*  DED  */
          mod_res_tac(t,TRUE);
          itp_tac_prf_1 ( TRUE );
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_1 ( FALSE );
        }
      } else if( st==GEN_tac ){
/*  GEN  */
        if( gen_prf(p,i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_1 ( TRUE );
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_1 ( FALSE );
        };
      } else if( st==HYP_tac ){                    
/*  HYP  */
/*
        if( mon2_hyp_prf_func(p,i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_1 ( TRUE );
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_1 ( FALSE );
        };
*/
        mon2_hyp_prf(t,p,i,gl,f);
      } else if( st==SUB_tac ){                    
/*  SUB  */
        if( sub_prf_func(p,i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_1 ( TRUE );
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_1 ( FALSE );
        }
/**************************
 ;} else if( st==HYPD_tac ){                    
        if( mon_hyp_prf(p,i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_1 ( TRUE );
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_1 ( FALSE );
        } 
***************************/
      } else if( st==ARI_tac ){                    
/*  ARI  */
/*
        if( ari_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_1 ( TRUE );
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_1 ( FALSE );
        };
*/
        ari_prf ( t );
      } else if( st==REV_tac ){                    
/*  REV  */
        if( rev_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_1 ( TRUE );
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_1 ( FALSE );
        };
      } else if( st==FLAT_tac ){                   
/*  FLAT  */
        if( flat_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_1 ( TRUE );
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_1 ( FALSE );
        };
      } else if( st==MAP_tac ){                   
/*  MAP  */
        if( smap_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_1 ( TRUE );
        } else if( nmap_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_1 ( TRUE );
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_1 ( FALSE );
        };
      } else if( st==MODR_tac ){                   
/*  MODR  */
        if( bmodr_prf(f)==TRUE ){
          mod_res_tac(t,TRUE);
          mod_is_frm_gol ( gl, 1 );
          itp_tac_prf_1 ( TRUE );
        } else if( bmark_proved_prf(f)==TRUE ){
          mod_res_tac(t,TRUE);
          mod_is_frm_gol ( gl, 1 );
          itp_tac_prf_1 ( TRUE );
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_1 ( FALSE );
        };
      } else if( st==SHELL_tac ){                  
/*  SHELL  */
        if( bshell_prf(f)==TRUE ){
          mod_res_tac(t,TRUE);
          mod_is_frm_gol ( gl, 1 );
          itp_tac_prf_1 ( TRUE );
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_1 ( FALSE );
        };
      } else if( st==WRITE_tac ){                  
/*  WRITE  */
        if( bwritef_prf(f)==TRUE ){
          mod_res_tac(t,TRUE);
          mod_is_frm_gol ( gl, 1 );
          itp_tac_prf_1 ( TRUE );
        
/* ;} else if( bcopf_prf(f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_1 ( TRUE )
*/;
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_1 ( FALSE );
        };
      } else if( st==RULE_tac ){                  
/*  RULE  */
        if( badd_rul_prf(p,i,r,f)==TRUE ){
          mod_res_tac(t,TRUE);
          mod_is_frm_gol ( gl, 1 );
          itp_tac_prf_1 ( TRUE );
        } else if( badd_lirul_prf(r,f)==TRUE ){
          mod_res_tac(t,TRUE);
          mod_is_frm_gol ( gl, 1 );
          itp_tac_prf_1 ( TRUE );
        } else if( bpopt_prf(r,f)==TRUE ){
          mod_res_tac(t,TRUE);
          mod_is_frm_gol ( gl, 1 );
          itp_tac_prf_1 ( TRUE );
        } else if( bcleant_prf(r,f)==TRUE ){
          mod_res_tac(t,TRUE);
          mod_is_frm_gol ( gl, 1 );
          itp_tac_prf_1 ( TRUE );
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_1 ( FALSE );
        };
      } else if( st==TAC_tac ){                  
/*  TACTICS  */
        if( badd_tac_prf(f)==TRUE ){
          mod_res_tac(t,TRUE);
          mod_is_frm_gol ( gl, 1 );
          itp_tac_prf_1 ( TRUE );
       } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_1 ( FALSE );
        };
      } else if( st==CATL_tac ){                  
/*  BCATL  */
        if( bcatl_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_1 ( TRUE );
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_1 ( FALSE );
        };
      } else if( st==NEWV_tac ){                  
/*  BNEWV BLOW  */
        if( bnewv_vrb_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_1 ( TRUE );
        } else if( low_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_1 ( TRUE );
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_1 ( FALSE );
        };
      } else if( st==LMAP_tac ){                   
/*  LMAP  */
        if( slmap_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_1 ( TRUE );
        } else if( nlmap_prf(i,gl,f)==TRUE ){
          mod_res_tac(t,TRUE);
          itp_tac_prf_1 ( TRUE );
        } else {
          mod_res_tac(t,FALSE);
          itp_tac_prf_1 ( FALSE );
        };
      } else {
        mod_res_tac(t,FALSE);
        itp_tac_prf_1 ( FALSE );
      }
    }
    else {
      Proof_CB_continued ( TRUE, proof_step_flag_YES );
    }
  }

             
itp_tac_prf_1 ( itp_tac_prf_res )
int itp_tac_prf_res;
{
/***
printf ( " AAAAA itp_tac_prf_1 ( %d ) - new_tac_prf %d from_applicable_rr %d end_of_tac_prf %d\n", itp_tac_prf_res, new_tac_prf, from_applicable_rr,end_of_tac_prf );
***/
/***
print_tac_info("itp_tac_prf_1 - 1");
***/
  if ( ! from_applicable_rr ) {
    if( new_tac_prf==FALSE ){
      tac_ptr_prf=nxt_tac_prf(tac_prf,tac_ptr_prf);
    } else {
      new_tac_prf=FALSE;
    }
  }


  if ( ( ! itp_tac_prf_res ) && ( from_applicable_rr ) ) {
/***
printf ( "\n\n               HERE - itp_tac_prf_1\n\n" );
***/
     end_of_tac_prf = 1; /* to prevent looping - reset in one_step_of_prf3 */
  }




/***
print_tac_info("itp_tac_prf_1 - 2");
***/
  step_prf_1 ( itp_tac_prf_res );
}









/*  TACTIC INTERPRETER FOR LOAD PROOF  */
                      
  itp_tac_lod_prf(r,i,gl,f)
  {register int t,j,a,w,rr,la,g,th,itp_tac_lod_prf_res ;
    t=info_nod(tac_ptr_prf);
    itp_tac_lod_prf_res=FALSE;
    if( def_the_tac(t)==TRUE ){
      th=the_tac(t);
      rr=match_rul_the(r,th,f);
      if( rr!=0 ){
        la=ant_rul(rr);
        itr(la,j,a,w=prd_tree(a);
                   g=cre_gol(w);
                   cre_nod(g,i));
        mod_rul_gol(gl,rr);
        mod_res_tac(t,TRUE);
        itp_tac_lod_prf_res=TRUE;
      } else {
        mod_res_tac(t,FALSE);
        itp_tac_lod_prf_res=FALSE;
      }
    }
    tac_ptr_prf=nxt_tac_prf(tac_prf,tac_ptr_prf);
    return itp_tac_lod_prf_res;
  }

   
                  
/*   KILLING PROOF   */
        
                
              
  kil_prf(p)
  {register int i,g ;
    itr_nod(p,i,g,kil_gol(g),{},{});
    kil_nod(p);
  }

  kil_prf_from_backtrack(p)
  {register int i,g,gg ;
/***
printf ( "kil_prf_from_backtrack(p=%d) ", p ); fflush ( stdout );
***/

#ifdef BTOOLKIT_FLAG

  gg = info_nod(p);
  if( def_rul_gol(gg) ) {
    if ( the_rul ( rul_gol ( gg ) ) == last_btl_thy_to_display ) {
      rem_BToolLemma_from_backtrack ( rul_gol ( gg ),
                                           val_rul_the ( curr_thy, curr_rule ) );
    }
  }

#endif

    itr_nod(p,i,g,kil_gol(g),{},{});
    kil_nod(p);
  }

                   
/*   CREATING PROOF   */
               
    
  cre_prf(r)
  {register int f,g,n;
    f=cre_rec_rul(r);
    g=cre_gol(f);
    n = cre_root_nod(g);
    return n;
  }

                    
/*  PROOF STEP FOR EXEC PROOF  */
  
  step_exec_prf(r,p,i,g)
  {register int f,step_exec_prf_res ;
/***
printf ( "step_exec_prf(%d,%d,%d,%d)\n", r,p,i,g );
***/   
    f=frm_gol(g);
    if( and_prf(i,g,f)==TRUE ){                /* AND */
      step_exec_prf_res=TRUE;
    } else if( cal_prf(p,i,g,f)==TRUE ){       /* BCALL */
      step_exec_prf_res=TRUE;
    } else if( eql_prf(g,f)==TRUE ){           /* EQL */
      step_exec_prf_res=TRUE;
    } else if( hlt_prf(r,g,f)==TRUE ){         /* BHALT */
      step_exec_prf_res=TRUE;
    } else if( hyp_prf(p,i,g,f)==TRUE ){       /* INHYP/BFALSE */
      step_exec_prf_res=TRUE;
      /*
      if ( spe_gol(g) == INHYP_gol ) DisplayCurrWinText ( "    INHYP\n");
      else                           DisplayCurrWinText ( "    CONTRA\n");
      */
    } else if( clo_prf(f)==TRUE ){             /* BCLOSE */
      mod_is_frm_gol ( g, 1 );
      step_exec_prf_res=TRUE;
    } else if( stat_prf(f)==TRUE ){            /* BSTATISTICS */
      mod_is_frm_gol ( g, 1 );
      step_exec_prf_res=TRUE;
    } else if( susp_prf(f)==TRUE ){            /* BSUSPEND */
      step_exec_prf_res=TRUE;
    } else if( recompact_prf(f)==TRUE ){       /* BRECOMPACT */
      mod_is_frm_gol ( g, 1 );
      step_exec_prf_res=TRUE;
    } else if( itp_tac_prf_func(r,p,i,g,f)==TRUE ){ /* tactic driven */
      step_exec_prf_res=TRUE;
    } else {
      step_exec_prf_res=FALSE;
      if ( binhyp_count && pog_flag ) {
        binhyp_count = 0;
      }
    };
    return step_exec_prf_res;
  }

  
                   
/*  PROOF STEP FOR NORMAL PROOF  */
                   
  
  step_prf_func(r,p,i,g)
  {register int f,success,op ;    
    f=frm_gol(g);
    mod_tac_gol(g,tac_prf,tac_ptr_prf,fwd_tac_prf,fwd_tac_ptr_prf);
    if( and_prf(i,g,f)==TRUE ){                /* AND */
      success=TRUE;
    } else if( cal_prf(p,i,g,f)==TRUE ){       /* BCALL */
      success=TRUE;
    } else if( eql_prf(g,f)==TRUE ){           /* EQL */
      success=TRUE;
    } else if( hlt_prf(r,g,f)==TRUE ){         /* BHALT */
      success=TRUE;
    } else if( hyp_prf(p,i,g,f)==TRUE ){       /* INHYP/BFALSE */
      success=TRUE;
    } else if( clo_prf(f)==TRUE ){             /* BCLOSE */
      mod_is_frm_gol ( g, 1 );
      success=TRUE;
    } else if( stat_prf(f)==TRUE ){            /* BSTATISTICS */
      mod_is_frm_gol ( g, 1 );
      success=TRUE;
    } else if( susp_prf(f)==TRUE ){            /* BSUSPEND */
      success=TRUE;
    } else if( recompact_prf(f)==TRUE ){       /* BRECOMPACT */
      mod_is_frm_gol ( g, 1 );
      success=TRUE;
    } else if( itp_tac_prf_func(r,p,i,g,f)==TRUE ){ /* tactic driven */
      success=TRUE;
    } else {
      success=FALSE;
      if ( binhyp_count && pog_flag ) {
        binhyp_count = 0;
      }
    }
    if( (success==TRUE) && (auto_prf==FALSE) ){
      if ( ( def_rul_gol(g)==TRUE ) && ( def_spe_gol(g)==FALSE ) ) {
        {};
      } else if( def_spe_gol(g)==TRUE ){
        if( (spe_gol(g)==DED_gol) || (spe_gol(g)==GEN_gol) || (spe_gol(g)==ARI_gol) || (spe_gol(g)==SUB_gol) || (spe_gol(g)==HYP_gol) ){
          {};
        } else {
          write_spe_gol(spe_gol(g));
        }
      } else if( def_hyp_gol(g)==TRUE ){
        if( val_root_frm(frm_hyp(hyp_gol(g)))==FAL_sym ){
          DisplayCurrWinText ( "    CONTRA\n");
        } else {
          DisplayCurrWinText ( "    INHYP\n");
        };
      } else {
        op=val_root_frm(frm_gol(g));
        if( (op==BCRER_sym) ){
          DisplayCurrWinText ( "    RULE\n");
        } else if( (op==BCREL_sym) ){
          DisplayCurrWinText ( "    RULE\n");
        } else if( op==BPOP_sym ){
          DisplayCurrWinText ( "    RULE\n");
        } else if( op==BCLEAN_sym ){
          DisplayCurrWinText ( "    RULE\n");
        } else if( op==CLO_sym ){
          DisplayCurrWinText ( "    CLOSE\n");
        } else if( op==BCRELR_sym ){
          DisplayCurrWinText ( "    RULE\n");
        } else if( op==MODR_sym ){
          DisplayCurrWinText ( "    MODR\n");
        } else if( op==MARK_sym ){
          DisplayCurrWinText ( "    RULE\n");
        } else if( op==SHL_sym ){
          DisplayCurrWinText ( "    SHELL\n");
        } else if( op==WRIF_sym ){
          DisplayCurrWinText ( "    WRITE\n");
        } else if( op==WRIM_sym ){
          DisplayCurrWinText ( "    WRITE\n");
        } else if( op==PRIF_sym ){
          DisplayCurrWinText ( "    WRITE\n");
        } else if( op==BTAC_sym ){
          DisplayCurrWinText ( "    TACTIC\n");
        } else if( op==FTAC_sym ){
          DisplayCurrWinText ( "    TACTIC\n");
        } else if( op==BRECOMPACT_sym ){
          DisplayCurrWinText ( "    RECOMPACT\n");
        } else if( op==BSTATISTICS_sym ){
          DisplayCurrWinText ( "    STATISTICS\n");
        } else {
          DisplayCurrWinText ( "    BACKTRACK\n");
        }
      }
    }
    return success;
  }

      


               
  step_prf ()
  {
/***
printf ( " KKKKKKKKKKKKKKKKKKKKKKKK step_prf () from_applicable_rr %d\n", from_applicable_rr );
***/
/***
print_tac_info("step_prf");
***/
    mod_tac_gol(run_man_prf_g,tac_prf,tac_ptr_prf,fwd_tac_prf,fwd_tac_ptr_prf);
    if ( from_applicable_rr ) {
      itp_tac_prf(run_man_prf_r,run_man_prf_p,run_man_prf_i,run_man_prf_g,run_man_prf_f);
    } else if( and_prf(run_man_prf_i,run_man_prf_g,run_man_prf_f)==TRUE ){
      step_prf_1 ( TRUE );
    } else if( cal_prf(run_man_prf_p,run_man_prf_i,run_man_prf_g,run_man_prf_f)==TRUE ){
      step_prf_1 ( TRUE );
    } else if( eql_prf(run_man_prf_g,run_man_prf_f)==TRUE ){
      step_prf_1 ( TRUE );
    } else if( hlt_prf(run_man_prf_r,run_man_prf_g,run_man_prf_f)==TRUE ){
      step_prf_1 ( TRUE );
    } else if( hyp_prf(run_man_prf_p,run_man_prf_i,run_man_prf_g,run_man_prf_f)==TRUE ){
      step_prf_1 ( TRUE );
    } else if( clo_prf(run_man_prf_f)==TRUE ){
      mod_is_frm_gol ( run_man_prf_g, 1 );
      step_prf_1 ( TRUE );
    } else if( stat_prf(run_man_prf_f)==TRUE ){
      mod_is_frm_gol ( run_man_prf_g, 1 );
      step_prf_1 ( TRUE );
    } else if( susp_prf(run_man_prf_f)==TRUE ){
      step_prf_1 ( TRUE );
    } else if( recompact_prf(run_man_prf_f)==TRUE ){
      mod_is_frm_gol ( run_man_prf_g, 1 );
      step_prf_1 ( TRUE );
    } else { itp_tac_prf(run_man_prf_r,run_man_prf_p,run_man_prf_i,run_man_prf_g,run_man_prf_f);
    }
  }

step_prf_1 ( b )
int b;
{
/***
printf ( "step_prf_1 ( %d ) from_applicable_rr %d end_of_tac_prf %d\n", b, from_applicable_rr, end_of_tac_prf );
***/
  if ( binhyp_count && pog_flag ) {
    binhyp_count = 0;
  }
  one_step_of_prf2 ( b );
}



                     
/*  PROOF STEP FOR 'LOAD' PROOF  */
  
  
  step_lod_prf(r,i,g)
  {register int f ;
    f=frm_gol(g);
    if( and_prf(i,g,f)==TRUE ){
      {};
    } else if( lod_rul_prf(f)==TRUE ){
      {};
    } else if( lod_add_tac_prf(f)==TRUE ){
      {};
    } else if( bwrite_prf(f)==TRUE ){
      {};
    } else if( itp_tac_lod_prf(r,i,g,f)==TRUE ){
      {};
    };
  }

  
                         
/*  PROOF I/O  */
                       
/*  GOAL PARAGRAPH  */
   
  write_gol_prf(g)
  {
    if( (len(frm_gol(g))<200) || (sho_big_gol_prf==TRUE) ){
      reset_res(/* 6 */ 0);
      write_frm_res(frm_gol(g),/* 6 */ 0);
      strcat ( str_buf, "\n\n" );
    } else {
      strcat ( str_buf, "      Goal is big\n\n" );
    };
  }

  write_gol_prf_no_nl(g)
  {
    save_MAX_COL_RES;
    mod_MAX_COL_RES(999999);
    reset_res(/* 6 */ 0);
    write_frm_res(frm_gol(g),/* 6 */ 0);
    restore_MAX_COL_RES;
  }

  write_spe_gol_prf(g)
  {register int f,a,c,i,v ;
    if( (len(frm_gol(g))<200) || (sho_big_gol_prf==TRUE) ){
      f=frm_gol(g);
      if( val_root_frm(f)==IMP_sym ){
        a=dec_tree(f,left_node_tree(f,root_tree(f)),AND_sym);
        c=cre_cop_tree(f,right_node_tree(f,root_tree(f)));
        itr(a,i,v,reset_res(/* 6 */ 0);
                  write_frm_res(v,/* 6 */ 0);
                  strcat ( str_buf, "\n" ));
        reset_res(/* 6 */ 0);
        write_chr_res(ord('='));
        write_chr_res(ord('>'));
        strcat ( str_buf, "\n" );
        reset_res(/* 6 */ 0);
        write_frm_res(c,/* 6 */ 0);
        strcat ( str_buf, "\n\n" );
        itr(a,i,v,kil(v));
        kil(a);
        kil(c);
      } else {
        reset_res(/* 6 */ 0);
        write_frm_res(f,/* 6 */ 0);
        strcat ( str_buf, "\n\n" );
      };
    } else {
      DisplayCurrWinText ( "      Goal is big\n");
    };
  }

  writeln_lst_gol_prf(p,n)
  {register int g,m,c ;
    XmString xstr;
    Widget text;

/*
    xstr = XmStringCreateLtoR ( "GOALS", charset );
    XtVaCreateManagedWidget ( "Label", 
      xmLabelWidgetClass,             TopWin_rc,
      XmNlabelString,                 xstr,
      XmNmarginWidth,                 5,
      XmNmarginHeight,                5,
      NULL );
    XmStringFree ( xstr );

    str_buf [ 0 ] = '\0';
    c=0;
    itr_next_nod(p,n,m,g,c=c+1;
                         if( c==1 ){
                           write_spe_gol_prf(g);
                         } else if( c==2 ){
                           if( sho_gol_prf==FALSE ){
                             strcat ( str_buf, "  ...\n\n" );
                           } else {
                             write_gol_prf(g);
                           };
                         } else if( sho_gol_prf==TRUE ){
                           write_gol_prf(g);
                        });
*/

/*
    xstr = XmStringCreateLtoR ( str_buf, charset );
    XtVaCreateManagedWidget ( "SelDialog", 
      xmLabelWidgetClass,             TopWin_rc,
      XmNlabelString,                 xstr,
      XmNmarginWidth,                 20,
      XmNmarginHeight,                5,
      NULL );
    XmStringFree ( xstr );
*/
    text = XtVaCreateManagedWidget ( "SelDialog", 
        xmTextWidgetClass,              TopWin_rc,
        XmNcursorPositionVisible,       False,
        XmNeditable,                    False,
        XmNeditMode,                    XmMULTI_LINE_EDIT,
        XmNresizeHeight,                True,
        XmNresizeWidth,                 True,
        XmNmarginWidth,                 20,
        XmNmarginHeight,                5,
        XmNborderWidth,                 0,
        XmNshadowThickness,             0,
        NULL );
    XmTextSetString ( text, str_buf );
    XmTextShowPosition ( text, 0 );

  }

  
  writeln_lst_gol_prf_ABORTED(p,n)
  {register int g,m,c ;
   static int already_printed = 0;
    if ( ! already_printed ) {
      already_printed = 1;
      c=0;
      itr_next_nod(p,n,m,g,c=c+1;
                         if( c==1 ){
                           write_spe_gol_prf(g);
                         } else {
                           write_gol_prf(g);
                        });
      }
   }

  
                        
/*  PROOF PARAGRAPH  */
  
  write_ext_prf4(n,g,i,dec,t,nn)
  {register int s,j,m,gl ;
    s=cre(len(sons_nod(i)));
    itr(sons_nod(i),j,m,gl=info_nod(m);
                        if( is_not_printed_gol(gl)==FALSE ){
                            psh(s,niv_gol(gl))
                         ;});
    if( niv_gol(g)==1 ){
      strcat ( str_buf, "proof_script(");
      write_nam_the(curr_thy);
      strcat ( str_buf, ".");
      write_nat(num_rul(curr_rule));
      strcat ( str_buf, ":\n");
    };
    write_ext_gol(s,g,(dec / 2));
    if( niv_gol(g)!=n ){
      strcat ( str_buf, ";");
    } else {
      strcat ( str_buf, ";");
      write_nam_the(t);
      strcat ( str_buf, ".");
      write_nat(nn);
      strcat ( str_buf, ")");
    };
    strcat ( str_buf, "\n");
    kil(s);
  }



  write_ext_prf(p,t,nn)
  {register int i,ii,g,h,n,dec ;
    n=0;
    itr_nod(p,i,g,if( def_hso_gol(g)==TRUE ){
                    itr(hso_gol(g),ii,h,if( 
                      (uti_hyp(h)==TRUE) || (isa_der_hyp(h)==FALSE) ){
                      n=n+1;
                      mod_niv_hyp(h,n)
                   ;});
                  },
                  {},
                  if( (is_not_printed_gol(g)==FALSE) ){
                    n=n+1;
                    mod_niv_gol(g,n)
                 ;});
    dec=0;
    itr_nod(p,i,g,
    if( def_hso_gol(g)==TRUE ){
      itr(hso_gol(g),ii,h,
      if( (uti_hyp(h)==TRUE) || (isa_der_hyp(h)==FALSE) ){
        if( niv_hyp(h)==1 ){
          strcat ( str_buf, "proof_script(");
          write_nam_the(curr_thy);
          strcat ( str_buf, ".");
          write_nat(num_rul(curr_rule));
          strcat ( str_buf, ":\n");
        };
        write_ext_hyp(h,(dec / 2));
        if( niv_hyp(h)!=n ){
          strcat ( str_buf, ";");
        } else {
          strcat ( str_buf, ";");
          write_nam_the(t);
          strcat ( str_buf, ".");
          write_nat(nn);
          strcat ( str_buf, ")");
        };
        strcat ( str_buf, "\n")
     ;});
      dec=dec+2;
    },
    {},
    if(  (is_not_printed_gol(g)==FALSE) ){
      write_ext_prf4(n,g,i,dec,t,nn);
    };
    if( def_hso_gol(g)==TRUE ){
    dec=dec-2
   ;});
  }


  write_prf4(g,i,dec)
  {register int s,j,m,gl ;
/***
printf ( "        -----    write_prf4(%d,%d,%d)\n", g,i,dec );
***/
    s=cre(len(sons_nod(i)));
    itr(sons_nod(i),j,m,gl=info_nod(m);
                        if( is_not_printed_gol(gl)==FALSE ){
                            psh(s,niv_gol(gl))
                         ;});
    write_gol(s,g,dec);
    strcat ( str_buf, "\n");
    kil(s);
  }



  write_prf(p,ppf_flag)
/*
ppf_flag = 1 => proof printer
ppf_flag = 0 => building (internal) proof for display in BTool
ppf_flag = 2 => proved_fwd_btl_rr required
*/
  {register int i,ii,g,h,n,dec,kk,proved_rule;
    proved_rule = val_rul_the ( curr_thy, curr_rule );
/***
printf ( "write_prf(%d,%d) rule %d \n", p, ppf_flag, proved_rule );
***/
    n=0;
    save_MAX_COL_RES;
    mod_MAX_COL_RES(50);
    strcat ( str_buf, "\nPROOF of ");
    write_nam_the(curr_thy);
    strcat ( str_buf, ".");
    write_nat(num_rul(curr_rule));
    strcat ( str_buf, "\n\n");

#ifdef BTOOLKIT_FLAG

    if ( ppf_flag == 2 ) {
    /*** find the proved_rr [ kk ] containing curr_thy.curr_rule ***/
      kk = 1;
      while ( ( kk < max_proved_rr ) && ( proved_rr [ kk ] != proved_rule ) ) { kk++; }
      if ( kk == max_proved_rr ) {
        Popup_Error ( "  Proof memory full - create another Proof Level!  " );
        return ( 0 );
      }
/***
printf ( "proved_rr [ %d ] contains ... (%d)\n", kk, proved_rule );
***/
      proved_fwd_btl_rr [ kk ] = cre(5);
/***
printf("    proved_fwd_btl_rr [ %d ]  = %d (cre)\n", kk, proved_fwd_btl_rr [ kk ] );
***/
    }

#endif


#ifdef BTOOLKIT_FLAG

    itr_nod(p,i,g,if( def_hso_gol(g)==TRUE ){
                    itr(hso_gol(g),ii,h,
                      if( (uti_hyp(h)==TRUE) || (isa_der_hyp(h)==FALSE) ){
                      n=n+1;
if ( ( ppf_flag == 2 ) && ( def_rul_hyp ( h ) ) ) {
  if ( the_rul ( rul_hyp ( h ) ) == fwd_btl_users_thy ) {
    psh ( proved_fwd_btl_rr [ kk ], rul_hyp ( h ) );
/***
printf ( "+-+-+ pushed %d onto proved_fwd_btl_rr [ %d ]\n", rul_hyp ( h ), kk );
***/
/***
printf ( ">>> fwd_btl_users_thy: %d\n", rul_hyp ( h ) );
***/
  }
}
                      mod_niv_hyp(h,n)
                   ;});
                  },
                  {},
                  if( is_not_printed_gol(g)==FALSE ){
                    n=n+1;
                    mod_niv_gol(g,n)
                 ;});

#else

    itr_nod(p,i,g,if( def_hso_gol(g)==TRUE ){
                    itr(hso_gol(g),ii,h,
                      if( (uti_hyp(h)==TRUE) || (isa_der_hyp(h)==FALSE) ){
                      n=n+1;
                      mod_niv_hyp(h,n)
                   ;});
                  },
                  {},
                  if( is_not_printed_gol(g)==FALSE ){
                    n=n+1;
                    mod_niv_gol(g,n)
                 ;});


#endif

    dec=0;
    itr_nod(p,i,g,
        if( def_hso_gol(g)==TRUE ){
        itr(hso_gol(g),ii,h,
            if( (uti_hyp(h)==TRUE) || (isa_der_hyp(h)==FALSE) ){
             write_hyp(h,dec);
             strcat ( str_buf, "\n")
           ;});
        dec=dec+2;
        },
        {},
        if( is_not_printed_gol(g)==FALSE ){
          write_prf4(g,i,dec);
        };
        if( def_hso_gol(g)==TRUE ){
        dec=dec-2;
       ;};);
    strcat ( str_buf, "\nEND OF PROOF\n");
    restore_MAX_COL_RES;
    return ( kk );
  }

 
                     
/*  BACKWARD TACTIC PARAGRAPH  */
 
 
  write_tac_prf1(p,i,t)
  {register int l,f ;
    l=len(sons_nod(i));
    if( l>1 ){
      if( spe_tac(info_nod(i))==TIL_tac ){
        write_chr_res(ord(')'));
        write_chr_res(ord('~'));
      };
    } else if( l==1 ){
      if( spe_tac(info_nod(i))==TIL_tac ){
        write_chr_res(ord('~'));
      };
    } else {
      f=frm_tac(t);
      if( i==p ){
        write_srv_res;
        write_frm_res(f,/* 6 */ 0);
        write_erv_res;
      } else {
        write_frm_res(f,/* 6 */ 0);
      };
    };
  }

                
  
  writeln_tac_prf(p)
  {register int i,j, t;
    char c;
    XmString xstr;
    Widget tac_form, tac1, tac2, tac3;

/*
    xstr = XmStringCreateLtoR ( "NORMAL TACTIC", charset );
    XtVaCreateManagedWidget ( "Label", 
      xmLabelWidgetClass,             TopWin_rc,
      XmNlabelString,                 xstr,
      XmNmarginWidth,                 20,
      XmNmarginHeight,                0,
      NULL );
    XmStringFree ( xstr );
*/

    str_buf [ 0 ] = '\0';

    strcpy ( str_buf, "  TACTIC: " );
    reset_res(/* 6 */ 0);
    itr_nod(p,i,t,if( len(sons_nod(i))>1 ){
                    if( spe_tac(info_nod(i))==TIL_tac ){
                      write_chr_res(ord('('));
                    };
                  },
                  write_chr_res(ord(';')),
                  write_tac_prf1(tac_ptr_prf,i,t));

/***
printf ( "str_buf: |" );
i = 0;
while ( str_buf [ i ] != '\0' ) {
  if   ( str_buf [ i ] == rv_char ) printf ( "!!!!!" );
  else                              printf ( "%c", str_buf [ i ] );
  i++;
}
printf ( "|\n" );
***/

    tac_form = XtVaCreateWidget ( "SelDialog", 
      xmFormWidgetClass,              TopWin_rc,
      XmNmarginWidth,                 0,
      XmNmarginHeight,                0,
      NULL );
    i = 0;
    while ( ( str_buf [ i ] != rv_char ) && ( str_buf [ i ] != '\0' ) ) {
      i++;
    }
    c = str_buf [ i ];
    str_buf [ i ] = '\0';
/***
printf ( "tac1: |%s|\n", str_buf );
***/
    xstr = XmStringCreateLtoR ( str_buf, charset );
    tac1 = XtVaCreateManagedWidget ( "Label",
          xmLabelWidgetClass,        tac_form,
          XmNleftAttachment,         XmATTACH_FORM,
          XmNleftOffset,             0,
          XmNlabelString,            xstr,
          XmNfontList,               fontlist,
          XmNmarginWidth,            0,
          XmNmarginHeight,           0,
          NULL );
    XmStringFree ( xstr );
    str_buf [ i ] = c;
    if ( str_buf [ i ] != '\0' ) i++;
    j = 0;
    while ( str_buf [ i ] != '\0' ) {
      str_buf [ j++ ] = str_buf [ i++ ];
    }
    str_buf [ j ] = '\0';
    i = 0;
    while ( ( str_buf [ i ] != rv_char ) && ( str_buf [ i ] != '\0' ) ) {
      i++;
    }
    c = str_buf [ i ];
    str_buf [ i ] = '\0';
/***
printf ( "tac2: |%s|\n", str_buf );
***/
    xstr = XmStringCreateLtoR ( str_buf, charset );
    tac2 = XtVaCreateManagedWidget ( "Highlight",
          xmLabelWidgetClass,        tac_form,
          XmNleftAttachment,         XmATTACH_WIDGET,
          XmNleftWidget,             tac1,
          XmNleftOffset,             0,
          XmNlabelString,            xstr,
          XmNfontList,               fontlist,
          XmNmarginWidth,            0,
          XmNmarginHeight,           0,
          NULL );
    XmStringFree ( xstr );
    str_buf [ i ] = c;
    if ( str_buf [ i ] != '\0' ) i++;
    j = 0;
    while ( str_buf [ i ] != '\0' ) {
      str_buf [ j++ ] = str_buf [ i++ ];
    }
    str_buf [ j ] = '\0';
/***
printf ( "tac3: |%s|\n", str_buf );
***/
    xstr = XmStringCreateLtoR ( str_buf, charset );
    tac3 = XtVaCreateManagedWidget ( "Label",
          xmLabelWidgetClass,        tac_form,
          XmNleftAttachment,         XmATTACH_WIDGET,
          XmNleftWidget,             tac2,
          XmNleftOffset,             0,
          XmNlabelString,            xstr,
          XmNfontList,               fontlist,
          XmNmarginWidth,            0,
          XmNmarginHeight,           0,
          NULL );
    XtManageChild ( tac_form );
  }

                 
/*  FORWARD TACTIC PARAGRAPH  */
                 
  
  writeln_fwd_tac_prf(p)
  {register int i,t ;
    XmString xstr;

/*
    xstr = XmStringCreateLtoR ( "FORWARD TACTIC", charset );
    XtVaCreateManagedWidget ( "Label", 
      xmLabelWidgetClass,             TopWin_rc,
      XmNlabelString,                 xstr,
      XmNmarginWidth,                 20,
      XmNmarginHeight,                5,
      NULL );
    XmStringFree ( xstr );

    str_buf [ 0 ] = '\0';
*/
    strcpy ( str_buf, "  FORWARD TACTIC: " );
    reset_res(/* 6 */ 0);
    itr_nod(p,i,t,if( len(sons_nod(i))>1 ){
                    if( spe_tac(info_nod(i))==TIL_tac ){
                      write_chr_res(ord('('));
                    };
                  },
                  write_chr_res(ord(';')),
                  write_tac_prf1(fwd_tac_ptr_prf,i,t));
    xstr = XmStringCreateLtoR ( str_buf, charset );
    XtVaCreateManagedWidget ( "Label", 
      xmLabelWidgetClass,             TopWin_rc,
      XmNlabelString,                 xstr,
      XmNfontList,                    fontlist,
      XmNmarginWidth,                 0,
      XmNmarginHeight,                0,
      NULL );
    XmStringFree ( xstr );
  }

                         
/*  HYPOTHESES PARAGRAPH  */
  
  
/*
  writeln_lst_hyp_prf(p,n)
  {register int s,i,h,dec,b,v,nsc ;


    XmString xstr;
    s=cre(50);
    lst_hyp_prf(p,n,s);
    rev(s);
    nsc=0;
    xst(s,i,h,(
/? (val_root_frm(frm_hyp(h))==VRB_sym) || ?/
    (val_root_frm(frm_hyp(h))==BVRB_sym) || (val_root_frm(frm_hyp(h))==ANTI_SLASH_sym)),b=TRUE,b=FALSE);
    if( b==TRUE ){
      XmString xstr = XmStringCreateLtoR ( "CURRENT SIDE CONDITIONS", charset );
      XtVaCreateManagedWidget ( "Label", 
        xmLabelWidgetClass,             TopWin_rc,
        XmNlabelString,                 xstr,
        XmNmarginWidth,                 20,
        XmNmarginHeight,                5,
        NULL );
      XmStringFree ( xstr );
      str_buf [ 0 ] = '\0';
      itr(s,i,h,{
            v=val_root_frm(frm_hyp(h));
            if( /? (v==VRB_sym) || ?/ (v==ANTI_SLASH_sym) || (v==BVRB_sym) ){
              dec=/? 6 ?/ 0;
              reset_res(dec);
              write_frm_res(frm_hyp(h),dec);
              nsc=nsc+1;
            }
         ;});
      strcat ( str_buf, "\n" );
      xstr = XmStringCreateLtoR ( str_buf, charset );
      XtVaCreateManagedWidget ( "SelDialog", 
        xmLabelWidgetClass,             TopWin_rc,
        XmNlabelString,                 xstr,
        XmNmarginWidth,                 20,
        XmNmarginHeight,                5,
        NULL );
      XmStringFree ( xstr );
    }  /? if( b==TRUE ) ?/
    if( len(s)>nsc ){
      XmString xstr = XmStringCreateLtoR ( "CURRENT HYPOTHESES", charset );
/?
{
int I;
printf ( " >>>>>>>>>>>> len(s) %d nsc %d\n", len(s), nsc );
for ( I = 1 ; I <= len(s) ; I++ ) { DAVE_print_seq ( frm_hyp ( val(s,I) ) ); }
for ( I = 1 ; I <= len(s) ; I++ ) { DAVE_print_hyp ( val(s,I) ); }
}
?/
      XtVaCreateManagedWidget ( "Label", 
        xmLabelWidgetClass,             TopWin_rc,
        XmNlabelString,                 xstr,
        XmNmarginWidth,                 20,
        XmNmarginHeight,                5,
        NULL );
      XmStringFree ( xstr );
      str_buf [ 0 ] = '\0';
      b=TRUE;
      itr(s,i,h,{
        v=val_root_frm(frm_hyp(h));
        if( (v==ANTI_SLASH_sym) || (v==BVRB_sym) ){
          {};
        } else if( (isa_der_hyp(h)==TRUE) && (sho_der_hyp_prf==TRUE) ){
          dec=8;
          reset_res(dec);
          write_frm_res(frm_hyp(h),dec);
          strcat ( str_buf, "\n" );
        } else {
          if( isa_der_hyp(h)==TRUE ){
            if( b==TRUE ){
              b=FALSE;
              strcat ( str_buf, "  ...\n" );
            }
          } else {
            b=TRUE;
            dec=/? 6 ?/ 0;
            reset_res(dec);
            write_frm_res(frm_hyp(h),dec);
            strcat ( str_buf, "\n" );
          };
        }
     ;});
      strcat ( str_buf, "\n" );
      xstr = XmStringCreateLtoR ( str_buf, charset );
      XtVaCreateManagedWidget ( "SelDialog", 
        xmLabelWidgetClass,             TopWin_rc,
        XmNlabelString,                 xstr,
        XmNmarginWidth,                 20,
        XmNmarginHeight,                5,
        NULL );
      XmStringFree ( xstr );
    }
    kil(s);

  }
*/


  writeln_head_prf(p,i)
  {
    write_top_clear_res;
/*
    writeln_lst_hyp_prf(p,i);
*/
/*
    writeln_lst_gol_prf(p,i);
*/

#ifndef BTOOLKIT_FLAG

    writeln_tac_prf(tac_prf);

#endif

    if( fwd_tac_prf!=0 ){
      writeln_fwd_tac_prf(fwd_tac_prf);
    }

  }

  
                        
/*  BACKTRACKING */
                      
                      
#ifdef BTOOLKIT_FLAG 

undo_backtrack_prf(p,i,r)
{
  register int j,ii,k,g,op,rr,node,done ;
  
/*****
printf ( " --------------------------- undo ------------------------\n" );
*****/
  node = i;
/*****
printf ( "*** undostarting at %d\n", node );
*****/
  if ( node != p ) { 
    done = 0;
    while ( ! done ) {   
      j = fath_nod ( node );
/*****
printf ( "      current undo: %d -> %d\n", node, j );
*****/
      itr ( sons_nod ( j ), ii, k, kil_prf_from_backtrack ( k ) );
      clr ( sons_nod ( j ) );
      g = info_nod ( j );
      if ( def_rul_gol ( g ) == FALSE ) {
        op = val_root_frm ( frm_gol ( g ) );
        if ( ( op == PLS_sym )   || ( op == MUL_sym )   ||
             ( op == BCREL_sym ) || ( op == BCRER_sym )    ) {
          if ( def_lsb_rul ( r ) == TRUE ) {
            rr=  lst ( lsb_rul ( r ) );
            rem_rul_the (the_rul ( rr ), num_rul ( rr ) );
            pop ( lsb_rul ( r ) );
	  }
        }
      }
      clean_gol ( g );
      if ( ( node_to_undo_to )      &&
           ( j != node_to_undo_to )    ) {
/*****
printf ( "   ... but node_to_undo_to = %d ... \n", node_to_undo_to );
*****/
        node = j;
      }
      else {
        done = 1;
      }
    } /* while */
  } /* if ( node != p )
  else {
    j = node;
  }
/*****
printf ( "*** undo complete at %d\n", j );
printf ( " --------------------------- undo ------------------------\n" );
*****/
  return j;
}

#endif /* BTOOLKIT_FLAG */

                     
   backtrack_prf(p,i,r)
   {register int j,ii,k,g,op,rr ;
/*****
printf ( " ----->>>>>> backtrack_prf(p=%d i=%d r=%d) ", p, i, r );
fflush ( stdout );
*****/   
/* j=prev_nod(p,i); */
     if( i!=p ){ 
       j=fath_nod(i);
/*****
printf ( "fath_nod=%d ", j ); fflush ( stdout );
*****/   
       itr(sons_nod(j),ii,k,kil_prf_from_backtrack(k));
       clr(sons_nod(j));
       g=info_nod(j);
       if( def_rul_gol(g)==FALSE ){
         op=val_root_frm(frm_gol(g));
         if( (op==PLS_sym) || (op==MUL_sym) || (op==BCREL_sym) || (op==BCRER_sym) ){
           if( def_lsb_rul(r)==TRUE ){
             rr=lst(lsb_rul(r));
             rem_rul_the(the_rul(rr),num_rul(rr));
             pop(lsb_rul(r));
           }
         }
       }
       clean_gol(g);
     } else {
       j=i;
     }
/*****
printf ( "returning %d\n", j );
*****/
     return j;
   }

                     
   non_destructive_backtrack_prf(p,i,r)
   {register int j;
/* j=prev_nod(p,i); */
/*****
printf ( " !!!!!!! non_destructive_backtrack_prf(p=%d,i=%d,r=%d)\n", p,i,r );
*****/
     if   ( i!=p ) return fath_nod(i);
     else          return i;
   }

                     
/*  EXEC PROOF  */
                      
  run_exec_prf(r,p,i,g)
  {register int success,ii,gg,b,j,run_exec_prf_res ;
/*****
printf ( "  -->> run_exec_prf(%d,%d,%d,%d)\n", r,p,i,g );
*****/
    success=FALSE;
    end_of_tac_prf=FALSE;
    while( (success==FALSE) && (end_of_tac_prf==FALSE) ){
      success=step_exec_prf(r,p,i,g);
    };
    if( (success==FALSE) && (end_of_tac_prf==TRUE) ){
      xst_asc_nod(p,fath_nod(i),ii,gg,is_cal_gol(gg)==TRUE,
                                   b=TRUE,b=FALSE);
      j=i;
      while( (success==FALSE) && (b==TRUE) ){
/***
printf ( " !!!!!!!!!!!!!! calling backtrack_prf: 1\n" );
***/
        j=backtrack_prf(p,j,r);
        while( is_cal_gol(info_nod(j))==FALSE ){
          j=backtrack_prf(p,j,r);
};
        success=recal_prf(j,info_nod(j));
        if( success==FALSE ){
          xst_asc_nod(p,fath_nod(j),ii,gg,is_cal_gol(gg)==TRUE,
                                             b=TRUE,b=FALSE);
        };
      };
      if( success==TRUE ){
        run_exec_prf_res=j;
      } else {
        run_exec_prf_res=(-j);
      };
    } else {
      run_exec_prf_res=i;
    }
  ; return run_exec_prf_res;
  }

                      
/*  PROOF  */
        

test_for_backtrack( p, j, r )
{
  register int b;
  int j_copy = j;
  j_copy=non_destructive_backtrack_prf(p,j_copy,r);
  while( ( is_cal_gol(info_nod(j_copy))==FALSE ) && ( p != j_copy ) ) {
    j_copy=non_destructive_backtrack_prf(p,j_copy,r);
  }
/*****
printf ( " test_for_backtrack : >>>>>>>>>>->>>>>> j_copy: %d\n", j_copy );
*****/
  if ( p == j_copy ) b = FALSE;
  else               b = non_destructive_recal_prf( j_copy, info_nod ( j_copy ) );
  return b;
}
     

          
  
  one_step_of_prf_func(r,p,i,g)

  /***
  called from loop_do_prf_A (loop until quota)
  ***/

  {register int success,ii,gg,b,j,nn,one_step_of_prf_res ;
/*****
printf ( " ** ** one_step_of_prf_func(r=%d,p=%d,i=%d,g=%d) end_of_tac_prf=%d\n",r,p,i,g,end_of_tac_prf); 
*****/
    end_of_tac_prf=FALSE;
    success=FALSE;
    while( (success==FALSE) && (end_of_tac_prf==FALSE) ){
      success=step_prf_func(r,p,i,g);
      if( (success==TRUE) && (auto_prf==TRUE) ){
        if( exec_prf==FALSE ){
          ctr_prf=ctr_prf-1;
          if( ctr_prf<=0  ){
            nn=next_nod(p,i);
            if( nn!=0 ){
              Popup_Info ( "Normal proof quota reached" );
              auto_prf=FALSE;
            }
          }
        }
      }
    }  /* while */

    if( (success==FALSE) && (end_of_tac_prf==TRUE) ){
      xst_asc_nod(p,fath_nod(i),ii,gg,is_cal_gol(gg)==TRUE,
                                   b=TRUE,b=FALSE);
      j=i;

      while( (success==FALSE) && (b==TRUE) ){

        b = test_for_backtrack ( p, j, r );
/*****
printf ( " >>>>>>>>>>->>>>>>  test_for_backtrack: %d ", b );
*****/
        b = 0;
/*****
printf ( "but setting to 0\n" );
*****/
        if ( b ) {
/***
printf ( " !!!!!!!!!!!!!! calling backtrack_prf: 2\n" );
***/
          j=backtrack_prf(p,j,r);
          while( is_cal_gol(info_nod(j))==FALSE ){
            j=backtrack_prf(p,j,r);
          }
/*  j is node, info_nod(j) is a goal  */
          success=recal_prf(j,info_nod(j));
          if( success==FALSE ){
            xst_asc_nod(p,fath_nod(j),ii,gg,is_cal_gol(gg)==TRUE,
                                             b=TRUE,b=FALSE);
          } else if ( auto_prf==FALSE ) {
            Popup_Info ( " Backtracking  ");
          }
        }
      }

      if( success==TRUE ){
        one_step_of_prf_res=j;
      } else {
        one_step_of_prf_res=(-j);
      }
    }   /* success || ! end_of_tac_prf  */
    else {
      one_step_of_prf_res=i;
    }
    return one_step_of_prf_res;
  }






one_step_of_prf ()
{
/***
printf ( "one_step_of_prf:\n    " );
printf ( "run_man_prf_r %d run_man_prf_p %d run_man_prf_i %d run_man_prf_g %d from_applicable_rr %d\n", run_man_prf_r, run_man_prf_p, run_man_prf_i, run_man_prf_g, from_applicable_rr );
***/

#ifdef BTOOLKIT_FLAG

  backtrack_attempted = 0;
  backtrack_succeeded = 0;

#endif /* BTOOLKIT_FLAG */

  end_of_tac_prf=FALSE;
  one_step_of_prf1 ( FALSE );
}


one_step_of_prf1 ( bbb )
{
  register int  success,ii,gg,b,nn,one_step_of_prf_res;

/*****
printf ( "\n** ** one_step_of_prf1(%d)(backtrack): end_of_tac_prf %d (run_man_prf_p %d)\n",
                                              bbb, end_of_tac_prf, run_man_prf_p );
printf ( " run_man_prf_i %d run_man_prf_g %d from_applicable_rr %d\n",
                                run_man_prf_i, run_man_prf_g, from_applicable_rr );
*****/

  success = bbb;

  if ( (success==FALSE) && (end_of_tac_prf==FALSE) ) {
/*****
printf ( "    (success==FALSE) && (end_of_tac_prf==FALSE) - so step_prf ();\n" );
*****/
    step_prf ();
  }
  else {
    if( (success==FALSE) && (end_of_tac_prf==TRUE) ){
/*****
printf ( "    (success==FALSE) && (end_of_tac_prf==TRUE) - try backtrack\n" );
*****/

#ifdef BTOOLKIT_FLAG
      backtrack_attempted = 1;
#endif /* BTOOLKIT_FLAG */

      /***
      see if we can backtrack
      ***/
      xst_asc_nod(run_man_prf_p,fath_nod(run_man_prf_i),ii,gg,
                                           is_cal_gol(gg)==TRUE,b=TRUE,b=FALSE);
      run_man_prf_j=run_man_prf_i;
      while( (success==FALSE) && (b==TRUE) ){
/***
printf ( " !!!!!!!!!!!!!! calling backtrack_prf: 3\n" );
***/
        run_man_prf_j=backtrack_prf(run_man_prf_p,run_man_prf_j,run_man_prf_r);
        while( is_cal_gol(info_nod(run_man_prf_j))==FALSE ){
          run_man_prf_j=backtrack_prf(run_man_prf_p,run_man_prf_j,run_man_prf_r);
        }
        success=recal_prf(run_man_prf_j,info_nod(run_man_prf_j));
        if( success==FALSE){
          xst_asc_nod(run_man_prf_p,fath_nod(run_man_prf_j),ii,gg,
                                           is_cal_gol(gg)==TRUE,b=TRUE,b=FALSE);
        }
/*
        else if ( auto_prf = =FALSE ) {
        }
*/
      }
      if ( success == TRUE ) {

/*
        Popup_Info ( "  Backtracking  ");
*/

#ifdef BTOOLKIT_FLAG

        backtrack_succeeded = 1;
/*****
printf ( "        backtrack worked\n" );
*****/

#endif /* BTOOLKIT_FLAG */

        one_step_of_prf_res=run_man_prf_j;
      } else {
        one_step_of_prf_res=(-run_man_prf_j);
#ifdef BTOOLKIT_FLAG
        backtrack_succeeded = 0;
#ifdef BTOOL_PROVER_NEW
        Popup_Info ( " No (further) backtracking avaliable ");
#else
        Popup_Info ( " Cannot apply - previous goal! ");
#endif /* BTOOL_PROVER_NEW */
#endif /* BTOOLKIT_FLAG */
/*****
printf ( "        backtrack didn't work\n" );
*****/
      }
    }
    else { /* (success==TRUE) */
/*****
printf ( "    (success==TRUE) one_step_of_prf3 one_step_of_prf3 ( %d )\n", one_step_of_prf_res );
*****/
      one_step_of_prf_res=run_man_prf_i;
    }
    one_step_of_prf3 ( one_step_of_prf_res );
  }
}


one_step_of_prf2 ( success ) /* from step_prf */
int success;
{
  register int nn;
/***
printf ( "one_step_of_prf2 ( %d ): auto_prf %d end_of_tac_prf %d\n    ", success, auto_prf, end_of_tac_prf );
printf ( "run_man_prf_r %d run_man_prf_p %d run_man_prf_i %d run_man_prf_g %d from_applicable_rr %d\n", run_man_prf_r, run_man_prf_p, run_man_prf_i, run_man_prf_g, from_applicable_rr );
***/
  if( (success==TRUE) && (auto_prf==TRUE) ){
    if( exec_prf==FALSE ){
      ctr_prf=ctr_prf-1;
      if( ctr_prf<=0  ){
        nn=next_nod(run_man_prf_p,run_man_prf_i);
        if( nn!=0 ){
          Popup_Info ( "Normal proof quota reached" );
          auto_prf=FALSE;
        }
      }
    }
  }
  one_step_of_prf1 ( success );
}

one_step_of_prf3 ( b )
int b;
{
/***
printf ( "one_step_of_prf3 - b %d\n", b );
***/
/***
printf ( "one_step_of_prf3 ( %d ):\n    ", b );
printf ( "run_man_prf_r %d run_man_prf_p %d run_man_prf_i %d run_man_prf_g %d from_applicable_rr %d\n", run_man_prf_r, run_man_prf_p, run_man_prf_i, run_man_prf_g, from_applicable_rr );
***/

  if ( ( from_applicable_rr ) && ( end_of_tac_prf ) ) {
/***
printf ( "\n\n               AND HERE - one_step_of_prf3\n\n" );
***/
    end_of_tac_prf = 0; /* was set in itp_tac_prf_1 to prevent looping */
  }


  if( b>0 ) {
    run_man_prf_run_man_prf_res=b;
    run_man_prf_success=TRUE;
  }
  else {
    auto_prf=FALSE;
    run_man_prf_i=(-b);
    run_man_prf_g=info_nod(run_man_prf_i);
    if( def_tac_gol(run_man_prf_g)==TRUE ) {
      tac_prf=tac_gol(run_man_prf_g);
      tac_ptr_prf=tpt_gol(run_man_prf_g);
      fwd_tac_prf=ftac_gol(run_man_prf_g);
      fwd_tac_ptr_prf=ftpt_gol(run_man_prf_g);
      end_of_tac_prf=FALSE;
    }
  }
  Proof_CB_continued ( TRUE, proof_step_flag_NO );
}

  Normal_quota_prffunc()
#define Normal_quota_prf Normal_quota_prffunc()
  {
    str_buf [ 0 ] = '\0';
    write_nat(max_ctr_prf);
    string_box_flag = string_box_nml_quota_from_proof;
    StringBox ( " New Normal proof quota: ", str_buf );
  }

  Normal_quota_prffunc_contd ( n )
  {
    max_ctr_prf = n;
    sprintf ( buf, "New Normal proof quota: %d", max_ctr_prf );
    Popup_Info ( buf );
    Proof_CB_continued ( TRUE, proof_step_flag_NO );
  }

  Forward_quota_prffunc()
#define Forward_quota_prf Forward_quota_prffunc()
  {
    str_buf [ 0 ] = '\0';
    write_nat(max_fwd_ctr_prf);
    string_box_flag = string_box_fwd_quota_from_proof;
    StringBox ( " New Forward proof quota: ", str_buf );
  }

  Forward_quota_prffunc_contd ( n )
  {
    max_fwd_ctr_prf = n;
    sprintf ( buf, "New Forward proof quota: %d", max_fwd_ctr_prf );
    Popup_Info ( buf );
    Proof_CB_continued ( TRUE, proof_step_flag_NO );
  }

  switch_aster_prffunc()
#define switch_aster_prf switch_aster_prffunc()
  {
    aster_prf=((aster_prf==FALSE)!=0);
  }

#define val_aster_prf  aster_prf

run_man_prf(r,p,iii,gg)
  {
/***
printf ( "run_man_prf(%d,%d,%d,%d) from_applicable_rr %d  tac_the(%d) %d\n", r,p,iii,gg, from_applicable_rr, curr_thy, tac_the(curr_thy));
***/
    run_man_prf_r=r;
    run_man_prf_p=p;
    run_man_prf_i=iii;
    run_man_prf_g=gg;
    run_man_prf_success=FALSE;
    run_man_prf_menu=FALSE;
/***
printf ( "  )))))))))) 8  RedrawProofTree(%d %d) - prfmch.c.motif - run_man_prf\n",
                                                  run_man_prf_p, run_man_prf_i  );
***/
    RedrawProofTree ( run_man_prf_p, run_man_prf_i );
    run_man_prf_A ();
  }

run_man_prf_A ()        /* while( run_man_prf_success==FALSE ) */
  {
    extern int undo_was_last_button;
/***
printf ( "run_man_prf_A:\n    run_man_prf_p %d run_man_prf_i %d run_man_prf_g %d from_applicable_rr %d tac_the(%d) %d\n", run_man_prf_p, run_man_prf_i, run_man_prf_g, from_applicable_rr, curr_thy, tac_the(curr_thy)  );
***/
    ClearTopWin ();
    XtManageChild ( TopWin_rc );

    if ( run_man_prf_menu == FALSE ) {
      str_buf [ 0 ] = '\0';
      writeln_head_prf(run_man_prf_p,run_man_prf_i);
/***
print_hyp_len ( "run_man_prf_A", run_man_prf_i );
***/
    }
    else {
      run_man_prf_menu = FALSE;
    }



#ifdef BTOOLKIT_FLAG

    if ( another_backtrack_required ) {
      register int ii,gg,run_man_prf_j,success,b;
      backtrack_succeeded = 1;
/*****
printf ( "\nrun_man_prf_A:\n" );
printf ( "    backtrack_attempted = %d\n", backtrack_attempted );
printf ( "    backtrack_succeeded = %d\n", backtrack_succeeded );
printf ( "     ........... run_button_pressed = %d sleep ( 5 ) ",
                                                            run_button_pressed );
fflush ( stdout );

printf ( " ...........\n\n\n" );     
*****/
      /***
      copy of code from one_step_of_prf1 - see if we can backtrack
      ***/
      backtrack_attempted = 1;
      success = FALSE;
      xst_asc_nod(run_man_prf_p,fath_nod(run_man_prf_i),ii,gg,
                                            is_cal_gol(gg)==TRUE,b=TRUE,b=FALSE);
      run_man_prf_j=run_man_prf_i;
      while ( ( success == FALSE ) && ( b == TRUE ) ) {
/***
printf ( " !!!!!!!!!!!!!! calling backtrack_prf: 9\n" );
***/
        run_man_prf_j=backtrack_prf(run_man_prf_p,run_man_prf_j,run_man_prf_r);
        while( is_cal_gol(info_nod(run_man_prf_j))==FALSE ){
          run_man_prf_j=backtrack_prf(run_man_prf_p,run_man_prf_j,run_man_prf_r);
        }
        success=recal_prf(run_man_prf_j,info_nod(run_man_prf_j));
        if( success == FALSE ) {
          xst_asc_nod(run_man_prf_p,fath_nod(run_man_prf_j),ii,gg,
                                           is_cal_gol(gg)==TRUE,b=TRUE,b=FALSE);
        }
      } /* while */
/*****
printf ( "     ........... success = %d\n\n", success );
*****/
      if ( success == TRUE ) {
        run_man_prf_i = run_man_prf_j;
        run_man_prf_run_man_prf_res = run_man_prf_i;
        backtrack_succeeded = 1;
        run_man_prf_success = TRUE;
        Proof_CB_continued ( FALSE, proof_step_flag_NO );
      }      
      else {
        ProveRuleMenu ( 1, 0 );
      }
    } /* if ( another_backtrack_required ) */

/***
printf ( "undo_was_last_button=%d (2)\n", undo_was_last_button );
***/
    else if ( undo_was_last_button ) {
       undo_was_last_button = 0;
       ProveRuleMenu ( 1, 0 );
    }

#endif /* BTOOLKIT_FLAG */


/*
    /???
    Automatically execute BINHYP EQL AND
    ???/

    /???
    MOST AGREE WITH motif.c NextProofStepWillBeAutoDischarged
    ???/

    if( hyp_prf(run_man_prf_p,run_man_prf_i,
                                     run_man_prf_g,frm_gol( run_man_prf_g ) ) ) {
      run_man_prf_success=TRUE;
      run_man_prf_run_man_prf_res=run_man_prf_i;
      Proof_CB_continued ( FALSE, proof_step_flag_NO );
    }

    else if ( and_prf(run_man_prf_i,run_man_prf_g,frm_gol( run_man_prf_g ) ) ) {
      run_man_prf_success=TRUE;
      run_man_prf_run_man_prf_res=run_man_prf_i;
      Proof_CB_continued ( FALSE, proof_step_flag_NO );
    }

    else if ( eql_prf(run_man_prf_g,frm_gol( run_man_prf_g ) ) ) {
      run_man_prf_success=TRUE;
      run_man_prf_run_man_prf_res=run_man_prf_i;
      Proof_CB_continued ( FALSE, proof_step_flag_NO );
    }

    else {
      ProveRuleMenu ( 1, 0 );
    }
*/

    ProveRuleMenu ( 1, 0 );

  }

                        
/*  NORMAL PROOF MONITOR  */
                        

  prelude_prf(t,a)
  {
/***
printf ( " ---------------------------------------- prelude_prf ( %d, %d )\n", t, a );
***/
/*
now in bmotif.c
    sho_big_gol_prf=FALSE;
    sho_gol_prf=FALSE;
    sho_der_hyp_prf=FALSE;
*/
    reset_fic;
    reset_out(0);
    end_of_tac_prf=FALSE;
    abt_prf=FALSE;
    halt_prf=FALSE;
    auto_prf=a;
    the_prf=t;
    new_tac_prf=FALSE;
    ctr_prf=max_ctr_prf;
    lst_tac_prf=cre(3);
    lst_fwd_tac_prf=cre(3);
    lst_input_prf=cre(5);  
    build_tac_prf(tac_the(t));
    if( has_fwd_tac_the(t)==TRUE ){
      build_fwd_tac_prf2(fwd_tac_the(t));
    } else {
      fwd_tac_prf=0;
      fwd_tac_ptr_prf=0;
    }
/***
printf ( " ---------------------------------------- %d %d %d %d tac_the(%d): %d\n", tac_prf, tac_ptr_prf, fwd_tac_prf, fwd_tac_ptr_prf, t, tac_the(t) );
***/
}

  write_res_prffunc()
#define write_res_prf write_res_prffunc()
  {
    flush_all_fic;
  }

  postlude_prf(p/* ,t */)
  {
/***
printf ( " ---------------------------------------- postlude_prf( %d )\n", p );
***/
/***
print_live_nodes ( "pre postlude_prf" );
***/
    kil_prf(p);
/***
print_live_nodes ( "postlude_prf 1" );
***/
    kil_tac_prf;
/***
print_live_nodes ( "postlude_prf 2" );
***/
    kil_fwd_tac_prf2;
/***
print_live_nodes ( "postlude_prf 3" );
***/
    kil_input_prf;
/***
print_live_nodes ( "postlude_prf 4" );
***/
    close_all_fic;

/* if( has_fwd_tac_the(t)==TRUE ){
      kil_fwd_tac_prf;
    }
*/
/***
  print_live_nodes ( "post postlude_prf" );
***/
  }

  
/* 
  procedure do_prf(t,n,a:integer);forward;
*/
  
/*
  mon_lem_prf(l,bbuf)
  {register int mon_lem_prf_res ;
    mon_lem_prf_res=TRUE;
    if( (typ_rul(l)==lem_rul) && (pvd_rul(l)!=now_rul) ){
      strcpy ( str_buf, "      Theory: " );
      write_nam_the(the_rul(l));
      strcat ( str_buf, "\n\n" );
      write_old_ver_rul(l);
      strcat ( str_buf, "\n\n      Prove this lemma?\n");
      if( motif_yes_no==YES ){
        do_prf(the_rul(l),num_rul(l),FALSE);
        if( val_ret_sys==TRUE ){
          mon_lem_prf_res=FALSE;
        }
      }
    }
    return mon_lem_prf_res;
  }
*/



do_prf(t,n,a) /* curr_thy, curr_rule, TRUE */
  {
/***
printf ( "do_prf ( %d.%d %d) from_applicable_rr %d\n", t, n, a, from_applicable_rr );
***/
    do_prf_t = t;
    do_prf_n = n;
    do_prf_a = a;

    abt_prf=TRUE;
    halt_prf=TRUE;
    do_prf_ini ();
  }

do_prf_ini ()         /* while( (abt_prf==TRUE) && (halt_prf==TRUE) */
  {
/***
printf ( "do_prf_ini: do_prf_a %d from_applicable_rr %d\n", do_prf_a, from_applicable_rr );
***/
    exec_prf=FALSE;
    prelude_prf(do_prf_t,FALSE);
    loop_do_prf_r=val_rul_the(do_prf_t,do_prf_n);
    mod_rul_sys(num_rul(loop_do_prf_r));
    mod_theo_sys(num_the(the_rul(loop_do_prf_r)));
    loop_do_prf_p=cre_prf(loop_do_prf_r);
    loop_do_prf_i=loop_do_prf_p;
    if ( loop_do_prf_i != 0 ) {
      loop_do_prf_A ();
    }
    else {
      do_prf_p = loop_do_prf_p;
      do_prf_fini ();
    }
  }

  loop_do_prf_A ()     /* while( loop_do_prf_i!=0 ) */
  {
/***
printf ( "loop_do_prf_A: r %d p %d i %d g %d j %d abt_prf %d halt_prf %d auto_prf %d from_applicable_rr %d tac_the(%d) %d\n", loop_do_prf_r, loop_do_prf_p, loop_do_prf_i, loop_do_prf_g, loop_do_prf_j, abt_prf, halt_prf, auto_prf, from_applicable_rr, curr_thy, tac_the(curr_thy)  );
***/

      loop_do_prf_g=info_nod(loop_do_prf_i); /* the goal g */

      if( def_tac_gol(loop_do_prf_g)==TRUE ){
        tac_prf=tac_gol(loop_do_prf_g);
        tac_ptr_prf=tpt_gol(loop_do_prf_g);
        fwd_tac_prf=ftac_gol(loop_do_prf_g);
        fwd_tac_ptr_prf=ftpt_gol(loop_do_prf_g);
        end_of_tac_prf=FALSE;
      }

      if( abt_prf==TRUE ){
        loop_do_prf_j=loop_do_prf_i;
        loop_do_prf_B ();
      }
      else if( halt_prf==TRUE ){
        loop_do_prf_j=loop_do_prf_i;
        loop_do_prf_B ();
      }
      else if( auto_prf==FALSE ){
/***
strcpy ( str_buf, "SINGLE STEP\n     TAC: " );
write_frm_res( tac_the ( curr_thy ), 0 );
strcat ( str_buf, "\n    FTAC: " );
write_frm_res( fwd_tac_the ( curr_thy ), 0 );
printf ( "%s\n", str_buf );
***/
        run_man_prf(loop_do_prf_r,loop_do_prf_p,loop_do_prf_i,loop_do_prf_g);
      }
      else {
/***
strcpy ( str_buf, "LOOP UNTIL QUOTA\n     TAC: " );
write_frm_res( tac_the ( curr_thy ), 0 );
strcat ( str_buf, "\n    FTAC: " );
write_frm_res( fwd_tac_the ( curr_thy ), 0 );
printf ( "%s\n", str_buf );
***/
        loop_do_prf_j=one_step_of_prf_func(loop_do_prf_r,loop_do_prf_p,loop_do_prf_i,loop_do_prf_g);
/***
printf ( "loop_do_prf_j: %d from_applicable_rr %d\n", loop_do_prf_j, from_applicable_rr );
***/
        if( loop_do_prf_j<0 ){
          loop_do_prf_g=info_nod(-loop_do_prf_j);
          if( def_tac_gol(loop_do_prf_g)==TRUE ){
            tac_prf=tac_gol(loop_do_prf_g);
            tac_ptr_prf=tpt_gol(loop_do_prf_g);
            fwd_tac_prf=ftac_gol(loop_do_prf_g);
            fwd_tac_ptr_prf=ftpt_gol(loop_do_prf_g);
            end_of_tac_prf=FALSE;
          };
          auto_prf=FALSE;
          run_man_prf(loop_do_prf_r,loop_do_prf_p,-loop_do_prf_j,loop_do_prf_g);
        }
        else {
          loop_do_prf_B ();
        }
      }
  }



  loop_do_prf_B ()
  {
/*****
printf ( " ** ** loop_do_prf_B: r %d p %d i %d g %d j %d abt_prf %d halt_prf %d auto_prf %d from_applicable_rr %d tac_the(%d) %d\n", loop_do_prf_r, loop_do_prf_p, loop_do_prf_i, loop_do_prf_g, loop_do_prf_j, abt_prf, halt_prf, auto_prf, from_applicable_rr, curr_thy, tac_the(curr_thy)  );
*****/
      if( loop_do_prf_j>0 ){
        loop_do_prf_i=nextp_nod(loop_do_prf_p,loop_do_prf_j);
      }
      else {
/***
printf ( " !!!!!!!!!!!!!! calling backtrack_prf: 4\n" );
printf ( " !!!!!!!!!!!!!! this really is undo - not backtrack\n" );
***/

#ifdef BTOOLKIT_FLAG

        loop_do_prf_i=undo_backtrack_prf(loop_do_prf_p,-loop_do_prf_j,loop_do_prf_r);

#else

        loop_do_prf_i=backtrack_prf(loop_do_prf_p,-loop_do_prf_j,loop_do_prf_r);

#endif /* BTOOLKIT_FLAG */

        clean_spe_gol(info_nod(loop_do_prf_i));
/***
printf ( "    loop_do_prf_i = %d\n", loop_do_prf_i );
printf ( "        info_nod(loop_do_prf_i) = %d\n", info_nod(loop_do_prf_i) );
printf ( "            gbreade[info_nod(loop_do_prf_i)] = %d\n", gbreade[info_nod(loop_do_prf_i)] );
***/
        if ( gbreade[info_nod(loop_do_prf_i)] != 0 ) {
          int ll = len ( gbreade[info_nod(loop_do_prf_i)] );
          while ( ll ) {
/***
printf ( "killing val ( gbreade[info_nod(loop_do_prf_i)], %d ) = %d ->", ll, val ( gbreade[info_nod(loop_do_prf_i)], ll ) ); fflush ( stdout );
str_buf [ 0 ] = '\0';
write_frm_res ( val ( gbreade[info_nod(loop_do_prf_i)], ll ), 0 );
strcat ( str_buf, "<-\n" );
printf ( str_buf ); fflush ( stdout );
***/
            kil ( val ( gbreade[info_nod(loop_do_prf_i)], ll ) );
            ll--;
            
          }
/***
printf ( "killing gbreade[info_nod(loop_do_prf_i) = %d\n", gbreade[info_nod(loop_do_prf_i)] ); fflush ( stdout );
***/
          gbreade[info_nod(loop_do_prf_i)] = 0;
        }


	/*
        if ( loop_do_prf_j != -(loop_do_prf_i) )
          DisplayCurrWinText ( "      Undo\n" );
        else
          Popup_Info ( "      Nothing to undo!      " );
	*/
        if ( loop_do_prf_j == -(loop_do_prf_i) )
          Popup_Info ( "      Nothing to undo!      " );
      }

      if ( loop_do_prf_i != 0 ) {
        loop_do_prf_A ();
      }
      else {
        do_prf_p = loop_do_prf_p;
        do_prf_fini ();
      }
  }


do_prf_fini () /* proof aborted or complete */
  {
      void CreProofTreeDialog ();
      void RestoreBottomForm ();

/*****
printf ( "\ndo_prf_fini: abt_prf %d halt_prf %d do_prf_a %d from_applicable_rr %d\n", abt_prf, halt_prf, do_prf_a, from_applicable_rr );
*****/
      if ( abt_prf==TRUE ) {
        DisplayCurrWinText ( " - aborted\n" );
        CreProofTreeDialog ( 0 );
      }
      if ( abt_prf==FALSE ) {
        DisplayCurrWinText ( " - complete\n" );
/***
print_live_nodes ( "do_prf_fini ini" );
***/
        RecordProof ();

        /***
        instead of "ReconstructProofAndPrint" below
        ***/
        run_man_prf_i = nextp_nod ( run_man_prf_p, run_man_prf_i );
/*****
printf ( "  ))))))))))  RedrawProofTree(%d %d) - prfmch.c.motif - do_prf_fini\n",
                                          run_man_prf_p, 0 /? run_man_prf_i ?/ );
*****/
        RedrawProofTree ( run_man_prf_p, 0 /* run_man_prf_i */ );
      }

      if ( (abt_prf==FALSE)                                      && 
           ( (do_prf_a==TRUE) || (val_print_ext_prf_the==TRUE) )    ) {
        write_res_prf;
/***
print_live_nodes ( "do_prf_fini fini" );
***/
      }
      postlude_prf(do_prf_p);
      do_prf_r=val_rul_the(do_prf_t,do_prf_n);
      if( abt_prf==FALSE ){
        mod_pvd_rul(do_prf_r,now_rul);

        if( (def_lsb_rul(do_prf_r)==TRUE) && (val_ret_sys==FALSE)  ){
          xst(lsb_rul(do_prf_r),do_prf_i,do_prf_l,(typ_rul(do_prf_l)==lem_rul) && (pvd_rul(do_prf_l)!=now_rul),do_prf_b=TRUE,do_prf_b=FALSE);

/*
          if( do_prf_b==TRUE ){
            strcpy ( str_buf, "           Prove lemmas?          " );
            if( motif_yes_no==YES ){
              do_prf_bbuf=cre(1);
              itr(lsb_rul(do_prf_r),do_prf_i,do_prf_l,if( do_prf_b==TRUE ){
                                     do_prf_b=mon_lem_prf(do_prf_l,do_prf_bbuf)
                                  ;});
              kil(do_prf_bbuf);
            }
          }
*/
        }
      }
      else {  /* if( abt_prf==FALSE ) ie. proof aborted! */
        rem_sub_rul_the(do_prf_t,do_prf_n);
      }

      if ( (abt_prf==TRUE) && (halt_prf==TRUE) ) {
        do_prf_ini ();
      }
      else {
        DisplayARuleTopWin ( curr_rule );
        if ( browse_theories_is_up ) {
          BrowseTheories ( 0, 0 );
          BrowseTheories ( 1, 0 );
        }
        else if ( curr_thy == browse_a_theory_is_up ) {
          int browse_a_theory_is_up_save;
          browse_a_theory_is_up_save = browse_a_theory_is_up;
          BrowseATheory ( 0, 0 );
          browse_a_theory_is_up = browse_a_theory_is_up_save;
          BrowseATheory ( browse_a_theory_is_up, 0 );
        }
      }

/***
print_live_nodes ( "do_prf_fini pre ReconstructProofAndPrint" );
***/
      if ( abt_prf==FALSE ) {
        Popup_Info ( "  Proof complete - recording  " );
        /*** print tree, not autoproof ***/

/***
  PROOF IS FINISHED HERE - WHY REDO IT???
  the last step & "complete" not printed yet ...
        ReconstructProofAndPrint ( run_man_prf_r, 1, 1, 0, 0 );
***/

        DisplayARuleMenu ( 1, 0 );
        RestoreBottomForm ( bmotif_bottom_form_proof_tree_length );
      }
      else {
        DisplayARuleMenu ( 1, 0 );
      }
/***
print_live_nodes ( "do_prf_fini post ReconstructProofAndPrint" );
***/

  }


/******************************************************************/

/*
 from Prove lemmas ?  - NOT USED!!!

  itr_lem_prf(r)       
  {register int i,l,b;
    b=TRUE;
    itr(lsb_rul(r),i,l,if( b==TRUE ){
                         b=mon_lem_prf(l,bbuf);
                      })
  }
*/

/*
   for ( i=1 ; i<=len(lsb_rul(r)) ; i++ ) {
      l=val(lsb_rul(r),i); if( b==TRUE ) b=mon_lem_prf(l,bbuf);
    }
*/


/* was from from motif.c ATheory  - NOT USED!!! now dave_prove_lemmas
  itr_lem_the_prf(t)
  {register int i,l,b;
    b=TRUE;
    itr(rul_the(t),i,l,if( b==TRUE ){
                         b=mon_lem_prf(l,bbuf);
                      })
  }
*/

/******************************************************************/


DAVE_prove_lemmas ( t )
int t;
{
  int lemma_found, lemma_proved, lemma_rejected, i, l;

  void CreProofTreeDialog ();
  lemma_found = 0;
  lemma_proved = 0;
  lemma_rejected = 0;
  i = 1;
  while ( ! lemma_found && i <= len ( rul_the ( t ) ) ) {
    l = val ( rul_the ( t ), i );
    strcpy ( str_buf, "\n" );
    write_hor_short_rul ( val_rul_the ( t, i ) );
    printf ( str_buf );
    if ( typ_rul ( l ) == lem_rul ) {
      if (  pvd_rul ( l ) != now_rul ) {
        str_buf [ 0 ] = '\0';
        write_nam_the(the_rul(l));
        strcat ( str_buf, ".");
        write_nat(num_rul(l));
        strcat ( str_buf, "\n\n");
        write_old_ver_rul(l);
        strcat ( str_buf, "\n\nProve this lemma?");
/*
        if ( motif_yes_no==YES ) {
          lemma_found = 1;
	}
        else {
          lemma_rejected = 1;
	}
*/
lemma_found = 1;
      }
      else {
        printf ( "\n  a lemma and proved\n" );
        lemma_proved = 1;
      }
    }
    else {
      printf ( "\n  not a lemma\n" );
    }
    if ( ! lemma_found ) i++;
  };
  if ( lemma_found ) {
    Dimension top_level_w;
    ClearTopWin ();
    XtVaGetValues ( top_level, XmNwidth, &top_level_w, NULL );
    CreProofTreeDialog ( 1 );
    ProveRuleMenu ( 1, 0 );
    str_buf [ 0 ] = '\0';
    write_nam_the( curr_thy );
    strcat ( str_buf, "." );
    write_nat ( i );
    DisplayCurrWinText ( "\n  Proving lemma " );
    DisplayCurrWinText ( str_buf );
    DisplayCurrWinText ( "\n" );
    do_prf ( t, i, TRUE );
  }
  else if ( ! lemma_rejected ) {
    if ( lemma_proved ) {
      strcpy ( str_buf, "   All lemmas of " );
      write_nam_the ( t );
      strcat ( str_buf, " proved!   " );
      Popup_Info ( str_buf );
    }
    else {
      strcpy ( str_buf, "   " );
      write_nam_the ( t );
      strcat ( str_buf, " contains no lemmas   " );
      Popup_Info ( str_buf );
    }
  }
}


  
                     
/*  EXEC 'PROOF' MONITOR  */
                     
  loop_exec_prf(r,f)
  {register int p,i,g,j,ii,k,aborted_i;
/***
printf ( "loop_exec_prf(%d,%d)\n", r, f );
***/
    g=cre_gol(f);
    p=cre_root_nod(g);
    i=p;
/* fprintf ( bstdout, "init: i %d\n",i); */
    while( i!=0 ){
/* fprintf ( bstdout, "loop: i %d\n",i); */
      g=info_nod(i);
      if( def_tac_gol(g)==TRUE ){
        tac_prf=tac_gol(g);
        tac_ptr_prf=tpt_gol(g);
        fwd_tac_prf=ftac_gol(g);
        fwd_tac_ptr_prf=ftpt_gol(g);
        end_of_tac_prf=FALSE;
      };
      if( snbr_nod(i)>1 ){
        j=val(sons_nod(fath_nod(i)),snbr_nod(i)-1);
        itr(sons_nod(j),ii,k,kil_prf(k));
        clr(sons_nod(j));
      };
      if( abt_prf==TRUE ){

/* fprintf ( bstdout, "p %d i %d aborted_i %d\n",p,i,aborted_i); */
/* writeln_lst_gol_prf_ABORTED(p,i); */
/* writeln_lst_gol_prf_ABORTED(p,aborted_i); */

        j=i;
      } else if( halt_prf==TRUE ){
        j=i;
      } else { 
        j=run_exec_prf(r,p,i,g);
      };
      if( j<0 ){
        aborted_i=i;
        i=next_nod(p,-j);
        abt_prf=TRUE;
      } else {
        i=next_nod(p,j);
      };
    };
    itr(sons_nod(p),ii,k,kil_prf(k));
    clr(sons_nod(p))
  ; return p;
  }

                      
/*  FILE EXEC 'PROOF'  */
                          
                          
  exec_file_prf(t)
  {register int f,g,p,s,ff,r,i,b,l,bb ; 
/***
printf ( "exec_file_prf(%d)\n", t );
***/
    if( val_batch_sys == FALSE ){
      bb=mod_read_name_fil(t);
    } else {
      bb=TRUE;
    };
/*    while( (bb==TRUE) && (val_ret_sys==FALSE) ){ */
      f=read_file_frm;
      if( f!=0 ){
        s=cre_sym_fil;
        ff=cre_frm(s);
        r=add_rul_the(ff,t,nrm_rul);
        abt_prf=TRUE;
        halt_prf=TRUE;
        while( (abt_prf==TRUE) && (halt_prf==TRUE) ){
          exec_prf=TRUE;
          prelude_prf(t,TRUE);
          if( val_batch_sys==FALSE ) {
            DisplayCurrWinText ( "\n  Executing file input");
            DisplayCurrWinText ( name_fil );
            DisplayCurrWinText ( "\n");
          }
          g=cre(10);
          cop(f,g);
          p=loop_exec_prf(r,g/* f */);
/***
printf ( "DAVE val_batch_sys %d abt_prf %d halt_prf %d\n", val_batch_sys, abt_prf, halt_prf );
***/
          if ( abt_prf==FALSE )  {
            write_res_prf;
            if( val_batch_sys == FALSE )
              DisplayCurrWinText ( "  Execution complete\n");
            else
              printf ( "  Execution complete\n");
          }
          else if ( halt_prf==TRUE ) {
            ;
          }
          else if( val_batch_sys == FALSE )
           DisplayCurrWinText ( "\n  Execution aborted\n");
          else
            printf ( "\n  Execution aborted\n"); 
          postlude_prf(p);
          if( (abt_prf==FALSE) && (val_batch_sys==FALSE) ){
            mod_pvd_rul(r,now_rul);
            if( def_lsb_rul(r)==TRUE ){
              xst(lsb_rul(r),i,l,(typ_rul(l)==lem_rul) && (pvd_rul(l)!=now_rul),b=TRUE,b=FALSE);

/*
              if( b==TRUE ){
                fprintf(stderr,"\n      Prove lemmas? ");
                if( motif_yes_no==YES ){
                  itr_lem_prf(r);
                };
              }
*/

            };
          };
        };
        kil(f);
      }
      else {
        strcpy ( str_buf, "         Can't open file " );
        strcat ( str_buf, name_fil );
        strcat ( str_buf, "      " );
        if   ( val_batch_sys == FALSE ) Popup_Info ( str_buf );
        else                            printf ( "\n%s\n", str_buf );
        
      }
      if( val_batch_sys == FALSE ){
        if( val_ret_sys==FALSE ){
          if( nbr_rul_the(t)>0 ){
            lst_short_rul_the(t);
          };
        };
        bb=mod_read_name_fil(t);
      } else {
        bb=FALSE;
      };
/*    }; WHILE ... */
  }

                        
/*  DIRECT EXEC 'PROOF'  */
                      
                      
  exec_dir_prf(t,f)
    {register int g,p,r,ff,i,b,l ;
      ff=cre_frm(TTY_sym);
      r=add_rul_the(ff,t,nrm_rul);
      abt_prf=TRUE;
      halt_prf=TRUE;
      while( (abt_prf==TRUE) && (halt_prf==TRUE) ){
        exec_prf=TRUE;
        prelude_prf(t,TRUE);
        DisplayCurrWinText ( "\n  Executing direct input\n");
        g=cre(10);
        cop(f,g);
        p=loop_exec_prf(r,g
/* f */
);
        if      ( abt_prf==FALSE )  { write_res_prf; DisplayCurrWinText ( "  Execution complete\n"); }
        else if ( halt_prf==TRUE )  ;
        else                        DisplayCurrWinText ( "  Execution aborted\n");

        postlude_prf(p
/* ,t */
);
        if( abt_prf==FALSE ){
          mod_pvd_rul(r,now_rul);
          if( def_lsb_rul(r)==TRUE ){
            xst(lsb_rul(r),i,l,(typ_rul(l)==lem_rul) && (pvd_rul(l)!=now_rul),b=TRUE,b=FALSE);

          }
        }
      }
      if ( val_ret_sys == TRUE ) DisplayCurrWinText ( "\n  Done\n" );
      DisplayATheoryTopWin ( curr_thy );
      kil(f);
    }

                            
/*  LOAD 'PROOF' MONITOR  */
  
  lod_prffunc()
#define lod_prf lod_prffunc()
  {register int p,i,g,f,t ;
/***
fprintf ( bstdout, "lod_prffunc\n" );
***/
    reset_fic;
    f=read_load_file_frm;
    if( f!=0 ){
      t=cre_the(BOT_sym);
      lst_tac_prf=cre(1);
      build_tac_prf(tac_the(t));
      g=cre_gol(f);
      p=cre_root_nod(g); 
      itr_next_nod(p,p,i,g,step_lod_prf(0,i,g));
      kil_prf(p);
      kil_tac_prf;
    }
    close_all_fic;
  }

  relod_prffunc()
#define relod_prf relod_prffunc()
  {register int p,i,g,f,t ;
    reset_fic;
    f=read_load_file_frm;
    if( f!=0 ){
      t=cre_the(BOT_sym);
      lst_tac_prf=cre(1);
      build_tac_prf(tac_the(t));
      g=cre_gol(f);
      p=cre_root_nod(g); 
      itr_next_nod(p,p,i,g,step_lod_prf(0,i,g));
      kil_prf(p);
      kil_tac_prf;
    }
    close_all_fic;
  }

