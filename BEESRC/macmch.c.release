/* Copyright (c) 1985-2012, B-Core (UK) Ltd
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following
conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT 
NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
get_line_nbr_macfunc()
#define get_line_nbr_mac get_line_nbr_macfunc()
{register int n,c ;
  c=get_input_fil;
  c=get_input_fil;
  n=0;
  while( c!=' ' ){
    n=n*10+(c-'0');
    c=get_input_fil;
  }
; return n;
}

get_file_macfunc()
#define get_file_mac get_file_macfunc()
{register int fic,c ;
  c=get_input_fil;
  c=get_input_fil;
  fic=cre_fic_err;
  while( c!='"' ){
    psh_fic_err(fic,c);
    c=get_input_fil;
  }
; return fic;
}

macTRUE_read_fifo ( ss )
char * ss;
{
  register int line, fic, state, ii;
  state = 1;
  ii = 0;
  line = 1;
  fic = 0;
  mod_lin_lex ( fic, line );
  while( ( ss [ ii ] != '\0' ) && ( val_too_many_err == FALSE ) ){
    ana_lex ( ss [ ii ] );
    state = 0;
    ii++;
  }
  if( val_too_many_err == FALSE ){
    ana_lex ( ord (' ') );
    ana_lex ( BLK_sym );
    ana_lex ( EOT_sym );
  }
}

macTRUEfunc()
#define macTRUE macTRUEfunc()
{register int line,c,fic,state ;
  state=1;
  c=get_input_fil;
  line=1;
  fic=0;
  mod_lin_lex(fic,line);
  while( (c!=EOF) && (val_too_many_err==FALSE) ){
    if( c=='\n' ){
      ana_lex(ord(' '));
      line=line+1;
      mod_lin_lex(fic,line);
      state=1;
    } else if( c == '`' ){
      if( state == 1 ){
        ini_name_cod;
        c=get_input_fil;
        while( c!='\n' ){
          enter_name_cod(c);
          c=get_input_fil;
        };
        term_name_cod;
        ana_lex(ord(' '));
        line=line+1;
        mod_lin_lex(fic,line);
      } else {
        ana_lex(c);
      };
    } else if( c=='#' ){
      if( state == 1 ){
        line=get_line_nbr_mac;
        fic=get_file_mac;
        c=get_input_fil;
        while( c!='\n' ){
          c=get_input_fil;
        };
        mod_lin_lex(fic,line);
      } else {
        ana_lex(c);
      };
    } else if( c=='\t' ){
      ana_lex(ord(' '));
      state=0;
    } else if( (c>=32) && (c<=126) ){
      ana_lex(c);
      state=0;
    };
    if( c!=EOF ){ c=get_input_fil ;};
  };
  if( val_too_many_err==FALSE ){
    ana_lex(ord(' '));
    ana_lex(BLK_sym);
    ana_lex(EOT_sym);
  };
}

macTRUEspefunc()
#define macTRUEspe macTRUEspefunc()
{register int line,c,fic,state ;
  state=1;
  c=get_input_fil;
  line=1;
  fic=0;
  mod_lin_lex(fic,line);
  while( (c!=EOF) && (val_too_many_err==FALSE) ){
    if( c=='\n' ){
      ana_lex(ord(' '));
      line=line+1;
      mod_lin_lex(fic,line);
      state=1;
    } else if( c=='\t' ){
      ana_lex(ord(' '));
      state=0;
    } else if( (c>=32) && (c<=126) ){
      ana_lex(c);
      state=0;
    };
    if( c!=EOF ){ c=get_input_fil ;};
  };
  if( val_too_many_err==FALSE ){
    ana_lex(ord(' '));
    ana_lex(BLK_sym);
    ana_lex(EOT_sym);
  };
}

read_frmfunc()
#define read_frm read_frmfunc()
{register int b,n,c ;
  dst=cre(100);
  b=TRUE;
  while( b==TRUE ){
    c=reset_input_fil(2);
    reset_err;
    reset_lex;
    clr(dst);
    n=nbr_sym;
    macTRUEspe;
    if( nbr_err>0 ){
      b=TRUE;
      fprintf(stderr,"\n");
      write_lst_err;
      fprintf(stderr,"\n");
      rmv_sym(n);
    } else {
      b=FALSE;
    } ;
    close_input_fil;
  };
  reset_err
; return dst;
}

read_eol_frmfunc()
#define read_eol_frm read_eol_frmfunc()
{register int b,n,c ;
  dst=cre(100);
  b=TRUE;
  while( b==TRUE ){
    c=reset_input_fil(3);
    reset_err;
    reset_lex;
    clr(dst);
    n=nbr_sym;
    macTRUEspe;
    if( nbr_err>0 ){
      b=TRUE;
      fprintf(stderr,"\n");
      write_lst_err;
      fprintf(stderr,"\n");
      rmv_sym(n);
    } else {
      b=FALSE;
    } ;
    close_input_fil;
  };
  reset_err
; return dst;
}



/*
#ifdef bplatform

safety_fifo_check( ss, sock_buf_len, flag )   /? flag = 1 => verbose ?/
  char ? ss;
  int sock_buf_len;
  int flag;
{
  char err_buf [ 200 ];
  int i, nnn;
  i = strlen ( ss );

  while ( i && ss [ i ] != ':' ) i--;
  if ( ! i ) {
    sprintf ( err_buf, "$BKIT/BLIB/BPrompt \"  bplatform format fifo error 1 - See shell \"", nnn );
    system ( err_buf );
    fprintf ( bstdout, "\n\n  bplatform fifo format error 1: %s\n\n", ss ); fflush ( bstdout ); fflush ( bstdout );
  }
  else {
    i--;
    while ( i && ss [ i ] != ':' ) i--;
    if ( ! i ) {
      sprintf ( err_buf, "$BKIT/BLIB/BPrompt \"  bplatform format fifo error 2 - See shell \"", nnn );
      system ( err_buf );
     fprintf ( bstdout, "\n\n  bplatform fifo format error 2: %s\n\n", ss ); fflush ( bstdout ); fflush ( bstdout );
    }
    else {
      i++;
      nnn = 0;
      while ( ss [ i ] != ':' && ss [ i ] != '\0' ) {
        nnn = ( nnn ? 10 ) + ss [ i ] - '0';
        i++;
      }

      /????????????? flag = 1 => verbose DOESN'T WORK : ?????????????

      if ( flag ) {
        fprintf ( bstdout, "                                  bplatform: read_fifo %d (len %d/%d)\n", nnn, 250000 - sock_buf_len, 250000 ); fflush ( bstdout );
        fprintf ( bstdout, "                                  bplatform: read_fifo %d (%d/%d)", nnn, 250000 - sock_buf_len, 250000 ); fflush ( bstdout );
        fprintf ( bstdout, "\n                                                            %s\n", ss ); fflush ( bstdout );
        fprintf ( bstdout, "\n" ); fflush ( bstdout );
      }

      ????????????????????????????????????????????????/

      /????????????? flag = 1 => verbose DOESN'T WORK : ?????????????

      if ( nnn <= 0 || nnn >= 250 ) {
        sprintf ( err_buf, "$BKIT/BLIB/BPrompt \"  bplatform fifo error (%d) - See shell \"", nnn );
        system ( err_buf );
        fprintf ( bstdout, "\n\n  bplatform fifo error: %s\n\n", ss ); fflush ( bstdout );
      }

      ????????????? DOESN'T WORK ':' can be anywhere ?????????????/

    }
  }
}

#endif /? bplatform ?/
*/




#define read_fifo read_fifofunc()
/* #define read_fifo read_fifofunc_non_fifo() */

read_fifofunc ()
{
  int n, read_fifo_res;
  char ss [ 250000 ];
  int sock_buf_len;
  char * sock_buf_ptr;

/*
   while ( ! interrupt_SIGUSR1_recd ) {

/?????????????????????????????????????????????????????????????????/
#ifdef FIFO_TRACE_FLAG
fprintf ( bstdout, "                                  bplatform: waiting for SIGUSR1\n" ); fflush ( bstdout );
#endif /? FIFO_TRACE_FLAG ?/
/?????????????????????????????????????????????????????????????????/

      sigpause ( SIGUSR1 );
    }
    interrupt_SIGUSR1_recd = 0;
*/

/*****************************************************************/
#ifdef FIFO_TRACE_FLAG
fprintf ( bstdout, "                                  bplatform: about to open for read\n" ); fflush ( bstdout );
#endif /* FIFO_TRACE_FLAG */
/*****************************************************************/

  do
  {
  	#ifdef FIFO_TRACE_FLAG
  	fprintf ( stdout, "                                  bplatform: read about to open\n"); fflush ( stdout );
	#endif /* FIFO_TRACE_FLAG */
	
  	fifo_read_ptr = open ( fifo_file_2b, O_RDONLY /* & ~O_NONBLOCK & ~O_NDELAY & ~O_APPEND */ );
	
	#ifdef FIFO_TRACE_FLAG
	fprintf ( stdout, "                                  bplatform: read open\n"); fflush ( stdout );
	#endif /* FIFO_TRACE_FLAG */
	
	if(errno==EINTR)
	{
		#ifdef FIFO_TRACE_FLAG
		fprintf ( stdout, "                                  bplatform: read open EINTR\n"); fflush ( stdout );
		#endif /* FIFO_TRACE_FLAG */
	
		sleep(1);
	}
  }
  while( fifo_read_ptr < 0 && errno == EINTR );


  if ( fifo_read_ptr < 0 ) {
  
  		fprintf ( stdout, "                                  bplatform: read open error\n"); fflush ( stdout );
  
           sprintf ( err_buf, "  bplatform: %s", fifo_file_2b );
           perror ( err_buf );
           printf ( "\n" );
           system ( "echo 0 > .Bses" );
           exit ( 1 );
  }

/***
fifo_info ( "                                  << bplatform fifo_read_ptr",  fifo_read_ptr );
***/

  /***
  read may come in many pieces
  ***/
  sock_buf_len = 250000;
  sock_buf_ptr = ss;

	#ifdef FIFO_TRACE_FLAG
	fprintf ( stdout, "                                  bplatform: reading\n"); fflush ( stdout );
	#endif /* FIFO_TRACE_FLAG */
	
while ( sock_buf_len > 0 ) {

    errno=0;

    n = read ( fifo_read_ptr, sock_buf_ptr, sock_buf_len );
    if(errno == EINTR)
    {
    
    	#ifdef FIFO_TRACE_FLAG
	fprintf ( stdout, "                                  bplatform: read ignored EINTR\n"); fflush ( stdout );
	#endif /* FIFO_TRACE_FLAG */
	
	sleep(1);
    	continue;
    }
    if( n==0 && sock_buf_len == 250000)
    {
    
    	#ifdef FIFO_TRACE_FLAG
	fprintf ( stdout, "                                  bplatform: read n==0 and nothing read\n"); fflush ( stdout );
	#endif /* FIFO_TRACE_FLAG */
	
	sleep(1);
    	continue;
    }
    if ( n <= 0 ) break;
    sock_buf_ptr += n;
    sock_buf_len -= n;
  }
  
  	#ifdef FIFO_TRACE_FLAG
	fprintf ( stdout, "                                  bplatform: read\n"); fflush ( stdout );
	#endif /* FIFO_TRACE_FLAG */
	

/**
  while ( sock_buf_len == 250000 ) {
    while ( ( n = read ( fifo_read_ptr, sock_buf_ptr, sock_buf_len ) ) > 0 ) {
/???
fprintf ( bstdout, "                                  bplatform: fifo_read (interim %d)\n", n ); fflush ( bstdout );
???/
      sock_buf_ptr += n;
      sock_buf_len -= n;
    }
  }
 **/

  if ( n < 0 ) {
           fprintf ( stdout, "bplatform: read error\n" ); fflush ( stdout );
           perror ( "" );
           system ( "echo 0 > .Bses" );
           exit ( 1 );
  }

    if (   close ( fifo_read_ptr )  != 0 )
    {
           fprintf ( stdout, "bplatform: close error\n" ); fflush ( stdout );
           perror ( "" );
           system ( "echo 0 > .Bses" );
           exit ( 1 );
    }
    
    #ifdef FIFO_TRACE_FLAG
    fprintf ( stdout, "                                  bplatform: read closed\n"); fflush ( stdout );
    #endif /* FIFO_TRACE_FLAG */

  

  ss [ 250000 - sock_buf_len ] = '\0';

  /************************************************************************

  THIS DOESN'T WORK
  safety_fifo_check( ss, sock_buf_len, 1 );   /? flag = 1 => verbose ?/

  ************************************************************************/

/*****************************************************************/
#ifdef FIFO_TRACE_FLAG
fprintf ( bstdout, "                                  bplatform: read %d\n", strlen ( ss ) ); fflush ( bstdout );
fprintf ( bstdout, "                                  %s\n                                  rrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\n", ss ); fflush ( bstdout );
#endif /* FIFO_TRACE_FLAG */
/*****************************************************************/

  reset_err;
  reset_lex;
  
  /* moved from below variable declarations */
  dst = cre ( 200 );
  /* */
    
  clr ( dst );
  n = nbr_sym;
  macTRUE_read_fifo ( ss );

  if( nbr_err > 0 ){
    write_lst_err;
    fprintf ( bstdout,"\n"); fflush ( bstdout );
    fprintf ( bstdout,"\n       Error in fifo read:\n\n" ); fflush ( bstdout );
    fprintf ( bstdout, "\n        bplatform macmch: read (len %d)\n", strlen ( ss ) ); fflush ( bstdout );
    fprintf ( bstdout, "\n        %s\n\n", ss ); fflush ( bstdout );
/*
    system ( "$BKIT/BLIB/BPrompt \"  bplatform - Error in fifo read - See shell\"  " );
*/
    system ( "echo 0 > .Bses" );
    exit ( 1 );
/*    read_fifo_res = 0; */
  }
  else {
    read_fifo_res = dst;
  }
  reset_err;
  if( read_fifo_res == 0 ) {
    kil ( dst );
  }
  return read_fifo_res;
}


/*
read_fifofunc_non_fifo ()
{
  int n, read_fifo_res;
  FILE ? fileptr;
  int c, i;
  char ss [ 250000 ];
  int whole_file_read = 0;

   dst = cre ( 200 );

   while ( ! interrupt_SIGUSR1_recd ) {

/?????????????????????????????????????????????????????????????????/
#ifdef FIFO_TRACE_FLAG
fprintf ( bstdout, "                                  bplatform: non_fifo waiting for SIGUSR1\n" ); fflush ( bstdout );
#endif /? FIFO_TRACE_FLAG ?/
/?????????????????????????????????????????????????????????????????/

      sigpause ( SIGUSR1 );
    }
    interrupt_SIGUSR1_recd = 0;

/?????????????????????????????????????????????????????????????????/
#ifdef FIFO_TRACE_FLAG
fprintf ( bstdout, "                                  bplatform: about to read non_fifo\n" ); fflush ( bstdout );
#endif /? FIFO_TRACE_FLAG ?/
/?????????????????????????????????????????????????????????????????/

  while ( ! whole_file_read ) {
    if ( ( fileptr = fopen ( "TMP/.Bfif", "r" ) ) == NULL ) {
      printf ( "\n\n  Can't open \"%s\" for reading\n\n", "TMP/.Bfif" );
      sprintf ( err_buf, "  bplatform: %s", "TMP/.Bfif" );
      perror ( err_buf );
      printf ( "\n" );
      exit ( 1 );
    }
    i = 0;
    c = getc ( fileptr );
    while ( c != EOF ) {
      ss [ i++ ] = ( char ) c;
      c = getc ( fileptr );
    }
    fclose ( fileptr );
    if (  ss [ i - 1 ] == ( char ) 27 ) whole_file_read = 1;
#ifdef FIFO_TRACE_FLAG
    else                            { printf ( "                                  bplatform: sleeping (i=%d %c %d)\n", i - 1, ss [ i - 1 ], ss [ i - 1 ] ); sleep ( 1 ); }
#else
    else          sleep ( 1 );
#endif
  }
  unlink ( "TMP/.Bfif" );
  ss [ i - 1 ] = '\0';

/?????????????????????????????????????????????????????????????????/
#ifdef FIFO_TRACE_FLAG
fprintf ( bstdout, "                                  bplatform: read %d\n", strlen ( ss ) ); fflush ( bstdout );
fprintf ( bstdout, "                                  %s\n                                  rrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\n", ss ); fflush ( bstdout );
#endif /? FIFO_TRACE_FLAG ?/
/?????????????????????????????????????????????????????????????????/

  reset_err;
  reset_lex;
  clr ( dst );
  n = nbr_sym;
  macTRUE_read_fifo ( ss );

  if( nbr_err > 0 ){
    write_lst_err;
    fprintf ( bstdout,"\n"); fflush ( bstdout );
    fprintf ( bstdout,"\n       Error in non_fifo read:\n\n" ); fflush ( bstdout );
    fprintf ( bstdout, "\n        bplatform: read (len %d)\n", strlen ( ss ) ); fflush ( bstdout );
    fprintf ( bstdout, "\n        %s\n\n", ss ); fflush ( bstdout );
/?
    system ( "$BKIT/BLIB/BPrompt \"  bplatform - Error in non_fifo read - See shell\"  " );
?/
    system ( "echo 0 > .Bses" );
    exit ( 1 );
/?    read_fifo_res = 0; ?/
  }
  else {
    read_fifo_res = dst;
  }
  reset_err;
  if( read_fifo_res == 0 ) {
    kil ( dst );
  }
/???
fprintf ( bstdout, "                                  bplatform: fifo_read %d (%s)\n", strlen ( ss ), ss ); fflush ( bstdout );
???/
  return read_fifo_res;
}
*/



read_file_frmfunc()
#define read_file_frm read_file_frmfunc()
{register int b,n,read_file_frm_res ;
  dst=cre(10000);
  b=TRUE;
  while( b==TRUE ){
    if( reset_input_fil(1)==FALSE ){
      b=FALSE;
      read_file_frm_res=0;
    }
    else {
      reset_err;
      reset_lex;
      clr(dst);
      n=nbr_sym;
      macTRUE;
      if( nbr_err>0 ){
        fprintf(stderr,"\n");
        write_lst_err;
        if( val_batch_sys == FALSE ){
          fprintf ( bstdout, "\n");
          fprintf ( bstdout, "      Again? ");
          rmv_sym(n);
          if( yes_no==YES ){
            b=TRUE;
          } else {
            b=FALSE;
            read_file_frm_res=0;
          };
        } else {
          fprintf(stderr,"\n");
          b=FALSE;
          read_file_frm_res=0;
        };
      } else {
        b=FALSE;
        read_file_frm_res=dst;
      } ;
      close_input_fil;
    };
    reset_err;
  };
  if( read_file_frm_res == 0 ){
    kil(dst);
  }
; return read_file_frm_res;
}



read_load_file_frmfunc()
#define read_load_file_frm read_load_file_frmfunc()
{register int b,n,read_file_frm_res ;
  dst=cre(10000);
  b=TRUE;
  while( b==TRUE ){
    if( reset_load_input_fil(1)==FALSE ){
      b=FALSE;
      read_file_frm_res=0;
    } else {
      reset_err;
      reset_lex;
      clr(dst);
      n=nbr_sym;
      macTRUE;
      if( nbr_err>0 ){
        fprintf(stderr,"\n");
        write_lst_err;
        if( val_batch_sys == FALSE ){
          fprintf ( bstdout, "\n");
          fprintf ( bstdout, "      Again? ");
          rmv_sym(n);
          if( yes_no==YES ){
            b=TRUE;
          } else {
            b=FALSE;
            read_file_frm_res=0;
          };
        } else {
          fprintf(stderr,"\n");
          b=FALSE;
          read_file_frm_res=0;
        };
      } else {
        b=FALSE;
        read_file_frm_res=dst;
      } ;
      close_input_fil;
    };
    reset_err;
  };
  if( read_file_frm_res == 0 ){
    kil(dst);
  }
; return read_file_frm_res;
}

